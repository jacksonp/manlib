<!-- Converted by db4-upgrade version 1.1 -->
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="vcl">
  <title>VCL</title>
  <section xml:id="varnish-configuration-language">
    <title>Varnish Configuration Language</title>
    <section xml:id="description">
      <title>DESCRIPTION</title>
      <para>
        The VCL language is a small domain-specific language designed to
        be used to describe request handling and document caching
        policies for Varnish Cache.
      </para>
      <para>
        When a new configuration is loaded, the varnishd management
        process translates the VCL code to C and compiles it to a shared
        object which is then loaded into the server process.
      </para>
      <para>
        This document focuses on the syntax of the VCL language. For a
        full description of syntax and semantics, with ample examples,
        please see the online documentation at
        <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.varnish-cache.org/docs/">https://www.varnish-cache.org/docs/</link>
        .
      </para>
      <para>
        Starting with Varnish 4.0, each VCL file must start by declaring
        its version with a special "vcl 4.0;" marker at the
        top of the file.
      </para>
      <section xml:id="operators">
        <title>Operators</title>
        <para>
          The following operators are available in VCL:
        </para>
        <blockquote>
          <variablelist>
            <varlistentry>
              <term>
                =
              </term>
              <listitem>
                <para>
                  Assignment operator.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                ==
              </term>
              <listitem>
                <para>
                  Comparison.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                ~
              </term>
              <listitem>
                <para>
                  Match. Can either be used with regular expressions or
                  ACLs.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                !
              </term>
              <listitem>
                <para>
                  Negation.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                &amp;&amp;
              </term>
              <listitem>
                <para>
                  Logical and.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                ||
              </term>
              <listitem>
                <para>
                  Logical or.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </blockquote>
      </section>
      <section xml:id="conditionals">
        <title>Conditionals</title>
        <para>
          VCL has <emphasis>if</emphasis> and <emphasis>else</emphasis>
          statements. Nested logic can be implemented with the
          <emphasis>elseif</emphasis> statement.
          (<emphasis>elsif</emphasis>/<emphasis>elif</emphasis>/<emphasis>else
          if</emphasis> is equivalent.)
        </para>
        <para>
          Note that are no loops or iterators of any kind in VCL.
        </para>
      </section>
      <section xml:id="strings-booleans-time-duration-and-integers">
        <title>Strings, booleans, time, duration and integers</title>
        <para>
          These are the data types in Varnish. You can
          <emphasis>set</emphasis> or <emphasis>unset</emphasis> these.
        </para>
        <para>
          Example:
        </para>
        <programlisting>
set req.http.User-Agent = "unknown";
unset req.http.Range;
</programlisting>
        <section xml:id="strings">
          <title>Strings</title>
          <para>
            Basic strings are enclosed in double quotes (" ...
            "), and may not contain newlines. Long strings are
            enclosed in {" ... "}. They may contain any
            character including single double quotes ("), newline
            and other control characters except for the NUL (0x00)
            character.
          </para>
        </section>
        <section xml:id="booleans">
          <title>Booleans</title>
          <para>
            Booleans can be either <emphasis>true</emphasis> or
            <emphasis>false</emphasis>.
          </para>
        </section>
      </section>
      <section xml:id="time">
        <title>Time</title>
        <para>
          VCL has time. The function <emphasis>now</emphasis> returns a
          time. A duration can be added to a time to make another time.
          In string context they return a formatted string.
        </para>
      </section>
      <section xml:id="durations">
        <title>Durations</title>
        <para>
          Durations are defined by a number and a designation. The
          number can be a real so 1.5w is allowed.
        </para>
        <blockquote>
          <variablelist>
            <varlistentry>
              <term>
                ms
              </term>
              <listitem>
                <para>
                  milliseconds
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                s
              </term>
              <listitem>
                <para>
                  seconds
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                m
              </term>
              <listitem>
                <para>
                  minutes
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                h
              </term>
              <listitem>
                <para>
                  hours
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                d
              </term>
              <listitem>
                <para>
                  days
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                w
              </term>
              <listitem>
                <para>
                  weeks
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                y
              </term>
              <listitem>
                <para>
                  years
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </blockquote>
      </section>
      <section xml:id="integers">
        <title>Integers</title>
        <para>
          Certain fields are integers, used as expected. In string
          context they return a string.
        </para>
      </section>
      <section xml:id="real-numbers">
        <title>Real numbers</title>
        <para>
          VCL understands real numbers. As with integers, when used in a
          string context they will return a string.
        </para>
      </section>
      <section xml:id="regular-expressions">
        <title>Regular Expressions</title>
        <para>
          Varnish uses Perl-compatible regular expressions (PCRE). For a
          complete description please see the pcre(3) man page.
        </para>
        <para>
          To send flags to the PCRE engine, such as to do case
          insensitive matching, add the flag within parens following a
          question mark, like this:
        </para>
        <programlisting>
# If host is NOT example dot com..
if (req.http.host !~ "(?i)example.com$") {
    ...
}
</programlisting>
      </section>
      <section xml:id="include-statement">
        <title>Include statement</title>
        <para>
          To include a VCL file in another file use the include keyword:
        </para>
        <programlisting>
include "foo.vcl";
</programlisting>
      </section>
      <section xml:id="import-statement">
        <title>Import statement</title>
        <para>
          The <emphasis>import</emphasis> statement is used to load
          Varnish Modules (VMODs.)
        </para>
        <para>
          Example:
        </para>
        <programlisting>
import std;
sub vcl_recv {
    std.log("foo");
}
</programlisting>
      </section>
      <section xml:id="backend-definition">
        <title>Backend definition</title>
        <para>
          A backend declaration creates and initialises a named backend
          object. A declaration start with the keyword
          <emphasis>backend</emphasis> followed by the name of the
          backend. The actual declaration is in curly brackets, in a
          key/value fashion.:
        </para>
        <programlisting>
backend name {
    .attribute = "value";
}
</programlisting>
        <para>
          The only mandatory attribute is <emphasis>host</emphasis>. The
          attributes will inherit their defaults from the global
          parameters. The following attributes are available:
        </para>
        <blockquote>
          <variablelist>
            <varlistentry>
              <term>
                host (mandatory)
              </term>
              <listitem>
                <para>
                  The host to be used. IP address or a hostname that
                  resolves to a single IP address.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                port
              </term>
              <listitem>
                <para>
                  The port on the backend that Varnish should connect
                  to.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                host_header
              </term>
              <listitem>
                <para>
                  A host header to add.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                connect_timeout
              </term>
              <listitem>
                <para>
                  Timeout for connections.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                first_byte_timeout
              </term>
              <listitem>
                <para>
                  Timeout for first byte.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                between_bytes_timeout
              </term>
              <listitem>
                <para>
                  Timeout between bytes.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                probe
              </term>
              <listitem>
                <para>
                  Attach a probe to the backend. See Probes.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                max_connections
              </term>
              <listitem>
                <para>
                  Maximum number of open connections towards this
                  backend. If Varnish reaches the maximum Varnish it
                  will start failing connections.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </blockquote>
        <para>
          Backends can be used with <emphasis>directors</emphasis>.
          Please see the vmod_directors(3) man page for more
          information.
        </para>
      </section>
      <section xml:id="probes">
        <title>Probes</title>
        <para>
          Probes will query the backend for status on a regular basis
          and mark the backend as down it they fail. A probe is defined
          as this::
        </para>
        <programlisting>
probe name {
     .attribute = "value";
}
</programlisting>
        <para>
          There are no mandatory options. These are the options you can
          set:
        </para>
        <blockquote>
          <variablelist>
            <varlistentry>
              <term>
                url
              </term>
              <listitem>
                <para>
                  The URL to query. Defaults to "/".
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                request
              </term>
              <listitem>
                <para>
                  Specify a full HTTP request using multiple strings.
                  .request will have rn automatically inserted after
                  every string. If specified, .request will take
                  precedence over .url.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                expected_response
              </term>
              <listitem>
                <para>
                  The expected HTTP response code. Defaults to 200.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                timeout
              </term>
              <listitem>
                <para>
                  The timeout for the probe. Default is 2s.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                interval
              </term>
              <listitem>
                <para>
                  How often the probe is run. Default is 5s.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                initial
              </term>
              <listitem>
                <para>
                  How many of the polls in .window are considered good
                  when Varnish starts. Defaults to the value of
                  threshold - 1. In this case, the backend starts as
                  sick and requires one single poll to be considered
                  healthy.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                window
              </term>
              <listitem>
                <para>
                  How many of the latest polls we examine to determine
                  backend health. Defaults to 8.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                threshold
              </term>
              <listitem>
                <para>
                  How many of the polls in .window must have succeeded
                  for us to consider the backend healthy. Defaults to 3.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </blockquote>
      </section>
      <section xml:id="access-control-list-acl">
        <title>Access Control List (ACL)</title>
        <para>
          An Access Control List (ACL) declaration creates and
          initialises a named access control list which can later be
          used to match client addresses:
        </para>
        <programlisting>
acl localnetwork {
    "localhost";    # myself
    "192.0.2.0"/24; # and everyone on the local network
    ! "192.0.2.23"; # except for the dial-in router
}
</programlisting>
        <para>
          If an ACL entry specifies a host name which Varnish is unable
          to resolve, it will match any address it is compared to.
          Consequently, if it is preceded by a negation mark, it will
          reject any address it is compared to, which may not be what
          you intended. If the entry is enclosed in parentheses,
          however, it will simply be ignored.
        </para>
        <para>
          To match an IP address against an ACL, simply use the match
          operator:
        </para>
        <programlisting>
if (client.ip ~ localnetwork) {
    return (pipe);
}
</programlisting>
      </section>
      <section xml:id="vcl-objects">
        <title>VCL objects</title>
        <para>
          A VCL object can be made with the <emphasis>new</emphasis>
          keyword.
        </para>
        <para>
          Example:
        </para>
        <programlisting>
sub vcl_init {
    new b = directors.round_robin()
    b.add_backend(node1);
}
</programlisting>
      </section>
      <section xml:id="subroutines">
        <title>Subroutines</title>
        <para>
          A subroutine is used to group code for legibility or
          reusability:
        </para>
        <programlisting>
sub pipe_if_local {
    if (client.ip ~ localnetwork) {
        return (pipe);
    }
}
</programlisting>
        <para>
          Subroutines in VCL do not take arguments, nor do they return
          values. The built in subroutines all have names beginning with
          vcl_, which is reserved.
        </para>
        <para>
          To call a subroutine, use the call keyword followed by the
          subroutine's name:
        </para>
        <programlisting>
sub vcl_recv {
    call pipe_if_local;
}
</programlisting>
        <section xml:id="return-statements">
          <title>Return statements</title>
          <para>
            The ongoing vcl_* subroutine execution ends when a
            return(<emphasis>action</emphasis>) statement is made.
          </para>
          <para>
            The <emphasis>action</emphasis> specifies how execution
            should proceed. The context defines which actions are
            available.
          </para>
        </section>
        <section xml:id="multiple-subroutines">
          <title>Multiple subroutines</title>
          <para>
            If multiple subroutines with the name of one of the built-in
            ones are defined, they are concatenated in the order in
            which they appear in the source.
          </para>
          <para>
            The built-in VCL distributed with Varnish will be implicitly
            concatenated when the VCL is compiled.
          </para>
        </section>
      </section>
      <section xml:id="variables">
        <title>Variables</title>
        <para>
          In VCL you have access to certain variable objects. These
          contain requests and responses currently being worked on. What
          variables are available depends on context.
        </para>
      </section>
      <section xml:id="functions">
        <title>Functions</title>
        <para>
          The following built-in functions are available:
        </para>
        <variablelist>
          <varlistentry>
            <term>
              ban(expression)
            </term>
            <listitem>
              <para>
                Invalidates all objects in cache that match the
                expression with the ban mechanism.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              call(subroutine)
            </term>
            <listitem>
              <para>
                Run a VCL subroutine within the current scope.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              hash_data(input)
            </term>
            <listitem>
              <para>
                Adds an input to the hash input. In the built-in VCL
                hash_data() is called on the host and URL of the
                <emphasis>request</emphasis>. Available in vcl_hash.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              new()
            </term>
            <listitem>
              <para>
                Instanciate a new VCL object. Available in vcl_init.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              purge()
            </term>
            <listitem>
              <para>
                Invalidate all variants of the current object using
                purge. Available in vcl_miss and vcl_hit.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              return()
            </term>
            <listitem>
              <para>
                End execution of the current VCL subroutine, and
                continue to the next step in the request handling state
                machine.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              rollback()
            </term>
            <listitem>
              <para>
                Restore request HTTP headers to their original state.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              synthetic(STRING)
            </term>
            <listitem>
              <para>
                Prepare a synthetic response body containing the STRING.
                Available in vcl_synth and vcl_backend_error.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <variablelist>
          <varlistentry>
            <term>
              regsub(str, regex, sub)
            </term>
            <listitem>
              <para>
                Returns a copy of str with the first occurrence of the
                regular expression regex replaced with sub. Within sub,
                \0 (which can also be spelled \&amp;) is replaced with
                the entire matched string, and \n is replaced with the
                contents of subgroup n in the matched string.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              regsuball(str, regex, sub)
            </term>
            <listitem>
              <para>
                As regsub() but this replaces all occurrences.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <section xml:id="examples">
      <title>EXAMPLES</title>
      <para>
        For examples, please see the online documentation.
      </para>
    </section>
    <section xml:id="see-also">
      <title>SEE ALSO</title>
      <itemizedlist>
        <listitem>
          <para>
            varnishd(1)
          </para>
        </listitem>
        <listitem>
          <para>
            vmod_directors(3)
          </para>
        </listitem>
        <listitem>
          <para>
            vmod_std(3)
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="history">
      <title>HISTORY</title>
      <para>
        VCL was developed by Poul-Henning Kamp in cooperation with
        Verdens Gang AS, Redpill Linpro and Varnish Software. This
        manual page is written by Per Buer, Poul-Henning Kamp, Martin
        Blix Grydeland, Kristian Lyngstøl, Lasse Karstensen and possibly
        others.
      </para>
    </section>
    <section xml:id="copyright">
      <title>COPYRIGHT</title>
      <para>
        This document is licensed under the same license as Varnish
        itself. See LICENSE for details.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Copyright (c) 2006 Verdens Gang AS
          </para>
        </listitem>
        <listitem>
          <para>
            Copyright (c) 2006-2014 Varnish Software AS
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</section>