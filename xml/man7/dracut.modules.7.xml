<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry lang="en">
<refentryinfo>
    <title>DRACUT.MODULES(7)</title>
</refentryinfo>
<refmeta>
<refentrytitle>dracut.modules</refentrytitle>
<manvolnum>7</manvolnum>
<refmiscinfo class="source">dracut</refmiscinfo>
<refmiscinfo class="manual">dracut</refmiscinfo>
</refmeta>
<refnamediv>
    <refname>dracut.modules</refname>
    <refpurpose>dracut modules</refpurpose>
</refnamediv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>dracut uses a modular system to build and extend the initramfs image. All
modules are located in <emphasis>/usr/lib/dracut/modules.d</emphasis> or in <emphasis>&lt;git-src&gt;/modules.d</emphasis>.
The most basic dracut module is <emphasis>99base</emphasis>. In <emphasis>99base</emphasis> the initial shell script
init is defined, which gets run by the kernel after initramfs loading. Although
you can replace init with your own version of <emphasis>99base</emphasis>, this is not encouraged.
Instead you should use, if possible, the hooks of dracut. All hooks, and the
point of time in which they are executed, are described in <xref linkend="stages"/>.</simpara>
<simpara>The main script, which creates the initramfs is dracut itsself. It parses all
arguments and sets up the directory, in which everything is installed. It then
executes all check, install, installkernel scripts found in the modules, which
are to be processed. After everything is installed, the install directory is
archived and compressed to the final initramfs image. All helper functions used
by check, install and installkernel are found in in the file <emphasis>dracut-functions</emphasis>.
These shell functions are available to all module installer (install,
installkernel) scripts, without the need to source <emphasis>dracut-functions</emphasis>.</simpara>
<simpara>A module can check the preconditions for install and installkernel with the
check script. Also dependencies can be expressed with check. If a module passed
check, install and installkernel will be called to install all of the necessary
files for the module. To split between kernel and non-kernel parts of the
installation, all kernel module related parts have to be in installkernel. All
other files found in a module directory are module specific and mostly are hook
scripts and udev rules.</simpara>
</refsect1>
<refsect1 id="stages">
<title>Boot Process Stages</title>
<simpara>dracut modules can insert custom script at various points, to control the boot
process.
These hooks are plain directories containing shell scripts ending with ".sh",
which are sourced by init.
Common used functions are in <emphasis>dracut-lib.sh</emphasis>, which can be sourced by any script.</simpara>
<refsect2 id="_hook_cmdline">
<title>Hook: cmdline</title>
<simpara>The <emphasis>cmdline</emphasis> hook is a place to insert scripts to parse the kernel command line
and prepare the later actions, like setting up udev rules and configuration
files.</simpara>
<simpara>In this hook the most important environment variable is defined: root. The
second one is rootok, which indicates, that a module claimed to be able to parse
the root defined. So for example, <emphasis role="strong">root=</emphasis><emphasis>iscsi:&#8230;.</emphasis> will be claimed by the
iscsi dracut module, which then sets rootok.</simpara>
</refsect2>
<refsect2 id="_hook_pre_udev">
<title>Hook: pre-udev</title>
<simpara>This hook is executed right after the cmdline hook and a check if root and
rootok were set. Here modules can take action with the final root, and before
udev has been run.</simpara>
</refsect2>
<refsect2 id="_start_udev">
<title>Start Udev</title>
<simpara>Now udev is started and the logging for udev is setup.</simpara>
</refsect2>
<refsect2 id="_hook_pre_trigger">
<title>Hook: pre-trigger</title>
<simpara>In this hook, you can set udev environment variables with <emphasis role="strong">udevadm control
--property=KEY=<emphasis>value</emphasis></emphasis> or control the further execution of udev with
udevadm.</simpara>
</refsect2>
<refsect2 id="_trigger_udev">
<title>Trigger Udev</title>
<simpara>udev is triggered by calling udevadm trigger, which sends add events for all
devices and subsystems.</simpara>
</refsect2>
<refsect2 id="_main_loop">
<title>Main Loop</title>
<simpara>In the main loop of dracut loops until udev has settled and
all scripts in <emphasis>initqueue/finished</emphasis> returned true.
In this loop there are three hooks, where scripts can be inserted
by calling /sbin/initqueue.</simpara>
<refsect3 id="_initqueue">
<title>Initqueue</title>
<simpara>This hook gets executed every time a script is inserted here, regardless of the
udev state.</simpara>
</refsect3>
<refsect3 id="_initqueue_settled">
<title>Initqueue settled</title>
<simpara>This hooks (initqueue/settled) gets executed every time udev has settled.</simpara>
</refsect3>
<refsect3 id="_initqueue_timeout">
<title>Initqueue timeout</title>
<simpara>This hooks (initqueue/timeout) gets executed, when the main loop counter becomes
half of the rd.retry counter.</simpara>
</refsect3>
<refsect3 id="_initqueue_finished">
<title>Initqueue finished</title>
<simpara>This hook (initqueue/finished) is called after udev has settled and
if all scripts herein return 0 the main loop will be ended.
Abritary scripts can be added here, to loop in the
initqueue until something happens, which a dracut module wants to wait for.</simpara>
</refsect3>
</refsect2>
<refsect2 id="_hook_pre_mount">
<title>Hook: pre-mount</title>
<simpara>Before the root device is mounted all scripts in the hook pre-mount are
executed. In some cases (e.g. NFS) the real root device is already mounted,
though.</simpara>
</refsect2>
<refsect2 id="_hook_mount">
<title>Hook: mount</title>
<simpara>This hook is mainly to mount the real root device.</simpara>
</refsect2>
<refsect2 id="_hook_pre_pivot">
<title>Hook: pre-pivot</title>
<simpara>This hook is called before cleanup hook, This is a good place for
actions other than cleanups which need to be called before pivot.</simpara>
</refsect2>
<refsect2 id="_hook_cleanup">
<title>Hook: cleanup</title>
<simpara>This hook is the last hook and is called before init finally switches root to
the real root device. This is a good place to clean up and kill processes not
needed anymore.</simpara>
</refsect2>
<refsect2 id="_cleanup_and_switch_root">
<title>Cleanup and switch_root</title>
<simpara>Init (or systemd) kills all udev processes, cleans up the environment,
sets up the arguments for the real init process and finally calls switch_root.
switch_root removes the whole filesystem hierarchy of the initramfs,
chroot()s to the real root device and calls /sbin/init with the specified
arguments.</simpara>
<simpara>To ensure all files in the initramfs hierarchy can be removed, all processes
still running from the initramfs should not have any open file descriptors left.</simpara>
</refsect2>
</refsect1>
<refsect1 id="_network_infrastructure">
<title>Network Infrastructure</title>
<simpara>FIXME</simpara>
</refsect1>
<refsect1 id="_writing_a_module">
<title>Writing a Module</title>
<simpara>A simple example module is <emphasis>96insmodpost</emphasis>, which modprobes a kernel module after
udev has settled and the basic device drivers have been loaded.</simpara>
<simpara>All module installation information is in the file module-setup.sh.</simpara>
<simpara>First we create a check() function, which just exits with 0 indicating that this
module should be included by default.</simpara>
<simpara>check():</simpara>
<screen>return 0</screen>
<simpara>The we create the install() function, which installs a cmdline hook with
priority number 20 called <emphasis>parse-insmodpost.sh</emphasis>. It also installs the
<emphasis>insmodpost.sh</emphasis> script in <emphasis>/sbin</emphasis>.</simpara>
<simpara>install():</simpara>
<screen>inst_hook cmdline 20 "$moddir/parse-insmodpost.sh"
inst_simple "$moddir/insmodpost.sh" /sbin/insmodpost.sh</screen>
<simpara>The <emphasis>pase-instmodpost.sh</emphasis> parses the kernel command line for a argument
rd.driver.post, blacklists the module from being autoloaded and installs the
hook <emphasis>insmodpost.sh</emphasis> in the <emphasis>initqueue/settled</emphasis>.</simpara>
<simpara><emphasis>parse-insmodpost.sh</emphasis>:</simpara>
<screen>for p in $(getargs rd.driver.post=); do
    echo "blacklist $p" &gt;&gt; /etc/modprobe.d/initramfsblacklist.conf
    _do_insmodpost=1
done

[ -n "$_do_insmodpost" ] &amp;&amp; /sbin/initqueue --settled --unique --onetime /sbin/insmodpost.sh
unset _do_insmodpost</screen>
<simpara><emphasis>insmodpost.sh</emphasis>, which is called in the <emphasis>initqueue/settled</emphasis> hook will just
modprobe the kernel modules specified in all rd.driver.post kernel command line
parameters. It runs after udev has settled and is only called once (--onetime).</simpara>
<simpara><emphasis>insmodpost.sh</emphasis>:</simpara>
<screen>. /lib/dracut-lib.sh

for p in $(getargs rd.driver.post=); do
    modprobe $p
done</screen>
<refsect2 id="_module_setup_sh_check">
<title>module-setup.sh: check()</title>
<simpara><emphasis>check()</emphasis> is called by dracut to evaluate the inclusion of a dracut module in
the initramfs.</simpara>
<variablelist>
<varlistentry>
<term>
$hostonly
</term>
<listitem>
<simpara>
If the $hostonly variable is set, then the module check() function
should be in "hostonly" mode, which means, that the check() should only return
0, if the module is really needed to boot this specific host.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>check() should return with:</simpara>
<variablelist>
<varlistentry>
<term>
0
</term>
<listitem>
<simpara>
Include the dracut module in the initramfs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
1
</term>
<listitem>
<simpara>
Do not include the dracut module. The requirements are not fullfilled
(missing tools, etc.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
255
</term>
<listitem>
<simpara>
Only include the dracut module, if another module requires it or if
explicitly specified in the config file or on the argument list.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect2>
<refsect2 id="_module_setup_sh_depends">
<title>module-setup.sh: depends()</title>
<simpara>The function depends() should echo all other dracut module names the module
depends on.</simpara>
</refsect2>
<refsect2 id="_module_setup_sh_cmdline">
<title>module-setup.sh: cmdline()</title>
<simpara>This function should print the kernel command line options needed to boot the
current machine setup. It should start with a space and should not print a
newline.</simpara>
</refsect2>
<refsect2 id="_module_setup_sh_install">
<title>module-setup.sh: install()</title>
<simpara>The install() function is called to install everything non-kernel related.
To install binaries, scripts, and other files, you can use the functions
mentioned in <xref linkend="creation"/>.</simpara>
<simpara>To address a file in the current module directory, use the variable "$moddir".</simpara>
</refsect2>
<refsect2 id="_module_setup_sh_installkernel">
<title>module-setup.sh: installkernel()</title>
<simpara>In installkernel() all kernel related files should be installed. You can use all
of the functions mentioned in <xref linkend="creation"/> to install files.</simpara>
</refsect2>
<refsect2 id="_anchor_id_creation_xreflabel_creation_creation_functions">
<title><anchor id="creation" xreflabel="[creation]"/>Creation Functions</title>
<refsect3 id="_inst_multiple_o_lt_file_gt_lt_file_gt_8230">
<title>inst_multiple [-o] &lt;file&gt; [ &lt;file&gt; &#8230;]</title>
<simpara>installs multiple binaries and files. If executables are specified without a
path, dracut will search the path PATH=/usr/sbin:/sbin:/usr/bin:/bin for the
binary. If the option "-o" is given as the first parameter, a missing file does
not lead to an error.</simpara>
</refsect3>
<refsect3 id="_inst_lt_src_gt_lt_dst_gt">
<title>inst &lt;src&gt; [&lt;dst&gt;]</title>
<simpara>installs <emphasis>one</emphasis> file &lt;src&gt; either to the same place in the initramfs or to an
optional &lt;dst&gt;.</simpara>
</refsect3>
<refsect3 id="_inst_hook_lt_hookdir_gt_lt_prio_gt_lt_src_gt">
<title>inst_hook &lt;hookdir&gt; &lt;prio&gt; &lt;src&gt;</title>
<simpara>installs an executable/script &lt;src&gt; in the dracut hook &lt;hookdir&gt; with priority
&lt;prio&gt;.</simpara>
</refsect3>
<refsect3 id="_inst_rules_lt_udevrule_gt_lt_udevrule_gt_8230">
<title>inst_rules &lt;udevrule&gt; [ &lt;udevrule&gt; &#8230;]</title>
<simpara>installs one ore more udev rules. Non-existant udev rules are reported, but do
not let dracut fail.</simpara>
</refsect3>
<refsect3 id="_instmods_lt_kernelmodule_gt_lt_kernelmodule_gt_8230">
<title>instmods &lt;kernelmodule&gt; [ &lt;kernelmodule&gt; &#8230; ]</title>
<simpara>instmods should be used only in the installkernel() function.</simpara>
<simpara>instmods installs one or more kernel modules in the initramfs. &lt;kernelmodule&gt;
can also be a whole subsystem, if prefixed with a "=", like "=drivers/net/team".</simpara>
<simpara>instmods will not install the kernel module, if $hostonly is set and the kernel
module is not currently needed by any /sys/<emphasis role="strong">&#8230;</emphasis>/uevent MODALIAS.
To install a kernel module regardless of the hostonly mode use the form:</simpara>
<screen>hostonly='' instmods &lt;kernelmodule&gt;</screen>
</refsect3>
</refsect2>
<refsect2 id="_initramfs_functions">
<title>Initramfs Functions</title>
<simpara>FIXME</simpara>
</refsect2>
<refsect2 id="_network_modules">
<title>Network Modules</title>
<simpara>FIXME</simpara>
</refsect2>
</refsect1>
<refsect1 id="_author">
<title>AUTHOR</title>
<simpara>Harald Hoyer</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><emphasis role="strong">dracut</emphasis>(8)</simpara>
</refsect1>
</refentry>
