<!-- Converted by db4-upgrade version 1.1 -->
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="varnish-cli">
  <title>Varnish CLI</title>
  <section xml:id="varnish-command-line-interface">
    <title>Varnish Command Line Interface</title>
    <section xml:id="description">
      <title>DESCRIPTION</title>
      <para>
        Varnish as a command line interface (CLI) which can control and
        change most of the operational parameters and the configuration
        of Varnish, without interrupting the running service.
      </para>
      <para>
        The CLI can be used for the following tasks:
      </para>
      <variablelist>
        <varlistentry>
          <term>
            configuration
          </term>
          <listitem>
            <para>
              You can upload, change and delete VCL files from the CLI.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            parameters
          </term>
          <listitem>
            <para>
              You can inspect and change the various parameters Varnish
              has available through the CLI. The individual parameters
              are documented in the varnishd(1) man page.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            bans
          </term>
          <listitem>
            <para>
              Bans are filters that are applied to keep Varnish from
              serving stale content. When you issue a ban Varnish will
              not serve any <emphasis>banned</emphasis> object from
              cache, but rather re-fetch it from its backend servers.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            process management
          </term>
          <listitem>
            <para>
              You can stop and start the cache (child) process though
              the CLI. You can also retrieve the lastst stack trace if
              the child process has crashed.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        If you invoke varnishd(1) with -T, -M or -d the CLI will be
        available. In debug mode (-d) the CLI will be in the foreground,
        with -T you can connect to it with varnishadm or telnet and with
        -M varnishd will connect back to a listening service
        <emphasis>pushing</emphasis> the CLI to that service. Please see
        varnishd(1) for details.
      </para>
      <section xml:id="syntax">
        <title>Syntax</title>
        <para>
          Commands are usually terminated with a newline. Long command
          can be entered using sh style <emphasis>here
          documents</emphasis>. The format of here-documents is:
        </para>
        <programlisting>
&lt;&lt; word
 here document
word
</programlisting>
        <para>
          <emphasis>word</emphasis> can be any continuous string choosen
          to make sure it doesn't appear naturally in the following
          <emphasis>here document</emphasis>.
        </para>
        <para>
          When using the here document style of input there are no
          restrictions on lenght. When using newline-terminated commands
          maximum lenght is limited by the varnishd parameter
          <emphasis>cli_buffer</emphasis>.
        </para>
        <para>
          When commands are newline terminated they get
          <emphasis>tokenized</emphasis> before parsing so if you have
          significant spaces enclose your strings in double quotes.
          Within the quotes you can escape characters with \. The n, r
          and t get translated to newlines, carrage returns and tabs.
          Double quotes themselves can be escaped with a backslash.
        </para>
        <para>
          To enter characters in octals use the \nnn syntax.
          Hexadecimals can be entered with the \xnn syntax.
        </para>
      </section>
      <section xml:id="commands">
        <title>Commands</title>
        <variablelist>
          <varlistentry>
            <term>
              help [command]
            </term>
            <listitem>
              <para>
                Show command/protocol help
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              ping [timestamp]
            </term>
            <listitem>
              <para>
                Keep connection alive
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              auth response
            </term>
            <listitem>
              <para>
                Authenticate.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              quit
            </term>
            <listitem>
              <para>
                Close connection
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              banner
            </term>
            <listitem>
              <para>
                Print welcome banner.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              status
            </term>
            <listitem>
              <para>
                Check status of Varnish cache process.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              start
            </term>
            <listitem>
              <para>
                Start the Varnish cache process.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              stop
            </term>
            <listitem>
              <para>
                Stop the Varnish cache process
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              vcl.load &lt;configname&gt; &lt;filename&gt;
            </term>
            <listitem>
              <para>
                Compile and load the VCL file under the name provided.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              vcl.inline &lt;configname&gt; &lt;quoted_VCLstring&gt;
            </term>
            <listitem>
              <para>
                Compile and load the VCL data under the name provided.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              vcl.use &lt;configname&gt;
            </term>
            <listitem>
              <para>
                Switch to the named configuration immediately.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              vcl.discard &lt;configname&gt;
            </term>
            <listitem>
              <para>
                Unload the named configuration (when possible).
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              vcl.list
            </term>
            <listitem>
              <para>
                List all loaded configuration.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              vcl.show &lt;configname&gt;
            </term>
            <listitem>
              <para>
                Display the source code for the specified configuration.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              param.show [-l] [&lt;param&gt;]
            </term>
            <listitem>
              <para>
                Show parameters and their values.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              param.set &lt;param&gt; &lt;value&gt;
            </term>
            <listitem>
              <para>
                Set parameter value.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              panic.show
            </term>
            <listitem>
              <para>
                Return the last panic, if any.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              panic.clear
            </term>
            <listitem>
              <para>
                Clear the last panic, if any.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              storage.list
            </term>
            <listitem>
              <para>
                List storage devices
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              backend.list
            </term>
            <listitem>
              <para>
                List all backends
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              backend.set_health matcher state
            </term>
            <listitem>
              <para>
                Set health status on a backend
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              ban &lt;field&gt; &lt;operator&gt; &lt;arg&gt; [&amp;&amp;
              &lt;field&gt; &lt;oper&gt; &lt;arg&gt;]...
            </term>
            <listitem>
              <para>
                All objects where the all the conditions match will be
                marked obsolete.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              ban.list
            </term>
            <listitem>
              <para>
                List the active bans.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="ban-expressions">
        <title>Ban Expressions</title>
        <para>
          A ban expression consists of one or more conditions. A
          condition consists of a field, an operator, and an argument.
          Conditions can be ANDed together with "&amp;&amp;".
        </para>
        <para>
          A field can be any of the variables from VCL, for instance
          req.url, req.http.host or obj.http.set-cookie.
        </para>
        <para>
          Operators are "==" for direct comparision,
          "~" for a regular expression match, and
          "&gt;" or "&lt;" for size comparisons.
          Prepending an operator with "!" negates the
          expression.
        </para>
        <para>
          The argument could be a quoted string, a regexp, or an
          integer. Integers can have "KB", "MB",
          "GB" or "TB" appended for size related
          fields.
        </para>
      </section>
      <section xml:id="scripting">
        <title>Scripting</title>
        <para>
          If you are going to write a script that talks CLI to varnishd,
          the include/cli.h contains the relevant magic numbers.
        </para>
        <para>
          One particular magic number to know, is that the line with the
          status code and length field always is exactly 13 characters
          long, including the NL character.
        </para>
        <para>
          For your reference the sourcefile lib/libvarnish/cli_common.h
          contains the functions Varnish code uses to read and write CLI
          response.
        </para>
      </section>
      <section xml:id="how--spsk-authentication-works">
        <title>How -S/PSK Authentication Works</title>
        <para>
          If the -S secret-file is given as argument to varnishd, all
          network CLI connections must authenticate, by proving they
          know the contents of that file.
        </para>
        <para>
          The file is read at the time the auth command is issued and
          the contents is not cached in varnishd, so it is possible to
          update the file on the fly.
        </para>
        <para>
          Use the unix file permissions to control access to the file.
        </para>
        <para>
          An authenticated session looks like this:
        </para>
        <programlisting>
critter phk&gt; telnet localhost 1234
Trying ::1...
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
107 59
ixslvvxrgkjptxmcgnnsdxsvdmvfympg

Authentication required.

auth 455ce847f0073c7ab3b1465f74507b75d3dc064c1e7de3b71e00de9092fdc89a
200 193
-----------------------------
Varnish HTTP accelerator CLI.
-----------------------------
Type 'help' for command list.
Type 'quit' to close CLI session.
Type 'start' to launch worker process.
</programlisting>
        <para>
          The CLI status of 107 indicates that authentication is
          necessary. The first 32 characters of the reponse text is the
          challenge "ixsl...mpg". The challenge is randomly
          generated for each CLI connection, and changes each time a 107
          is emitted.
        </para>
        <para>
          The most recently emitted challenge must be used for
          calculating the authenticator "455c...c89a".
        </para>
        <para>
          The authenticator is calculated by applying the SHA256
          function to the following byte sequence:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Challenge string
            </para>
          </listitem>
          <listitem>
            <para>
              Newline (0x0a) character.
            </para>
          </listitem>
          <listitem>
            <para>
              Contents of the secret file
            </para>
          </listitem>
          <listitem>
            <para>
              Challenge string
            </para>
          </listitem>
          <listitem>
            <para>
              Newline (0x0a) character.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          and dumping the resulting digest in lower-case hex.
        </para>
        <para>
          In the above example, the secret file contained foon and thus:
        </para>
        <programlisting>
critter phk&gt; cat &gt; _
ixslvvxrgkjptxmcgnnsdxsvdmvfympg
foo
ixslvvxrgkjptxmcgnnsdxsvdmvfympg
^D
critter phk&gt; hexdump -C _
00000000  69 78 73 6c 76 76 78 72  67 6b 6a 70 74 78 6d 63  |ixslvvxrgkjptxmc|
00000010  67 6e 6e 73 64 78 73 76  64 6d 76 66 79 6d 70 67  |gnnsdxsvdmvfympg|
00000020  0a 66 6f 6f 0a 69 78 73  6c 76 76 78 72 67 6b 6a  |.foo.ixslvvxrgkj|
00000030  70 74 78 6d 63 67 6e 6e  73 64 78 73 76 64 6d 76  |ptxmcgnnsdxsvdmv|
00000040  66 79 6d 70 67 0a                                 |fympg.|
00000046
critter phk&gt; sha256 _
SHA256 (_) = 455ce847f0073c7ab3b1465f74507b75d3dc064c1e7de3b71e00de9092fdc89a
critter phk&gt; openssl dgst -sha256 &lt; _
455ce847f0073c7ab3b1465f74507b75d3dc064c1e7de3b71e00de9092fdc89a
</programlisting>
        <para>
          The sourcefile lib/libvarnish/cli_auth.c contains a useful
          function which calculates the response, given an open
          filedescriptor to the secret file, and the challenge string.
        </para>
      </section>
    </section>
    <section xml:id="examples">
      <title>EXAMPLES</title>
      <para>
        Simple example: All requests where req.url exactly matches the
        string /news are banned from the cache:
      </para>
      <programlisting>
req.url == "/news"
</programlisting>
      <para>
        Example: Ban all documents where the serving host is
        "example.com" or "www.example.com", and
        where the Set-Cookie header received from the backend contains
        "USERID=1663":
      </para>
      <programlisting>
req.http.host ~ "^(?i)(www\.)example.com$" &amp;&amp; obj.http.set-cookie ~ "USERID=1663"
</programlisting>
    </section>
    <section xml:id="see-also">
      <title>SEE ALSO</title>
      <itemizedlist>
        <listitem>
          <para>
            varnishd(1)
          </para>
        </listitem>
        <listitem>
          <para>
            vanrishadm(1)
          </para>
        </listitem>
        <listitem>
          <para>
            vcl(7)
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="history">
      <title>HISTORY</title>
      <para>
        The Varnish manual page was written by Per Buer in 2011. Some of
        the text was taken from the Varnish Cache wiki, the varnishd(7)
        man page or the Varnish source code.
      </para>
    </section>
    <section xml:id="copyright">
      <title>COPYRIGHT</title>
      <para>
        This document is licensed under the same licence as Varnish
        itself. See LICENCE for details.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Copyright (c) 2011-2014 Varnish Software AS
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</section>