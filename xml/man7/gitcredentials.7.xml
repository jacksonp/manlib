<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>gitcredentials</refentrytitle>
<manvolnum>7</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>gitcredentials</refname>
  <refpurpose>providing usernames and passwords to Git</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout class="monospaced">
&#10;.ft C&#10;git config credential.https://example.com.username myusername
git config credential.helper "$helper $options"&#10;.ft&#10;
</literallayout>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Git will sometimes need credentials from the user in order to perform
operations; for example, it may need to ask for a username and password
in order to access a remote repository over HTTP. This manual describes
the mechanisms Git uses to request these credentials, as well as some
features to avoid inputting these credentials repeatedly.</simpara>
</refsect1>
<refsect1 id="_requesting_credentials">
<title>REQUESTING CREDENTIALS</title>
<simpara>Without any credential helpers defined, Git will try the following
strategies to ask the user for usernames and passwords:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
If the <literal>GIT_ASKPASS</literal> environment variable is set, the program
   specified by the variable is invoked. A suitable prompt is provided
   to the program on the command line, and the user&#8217;s input is read
   from its standard output.
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise, if the <literal>core.askPass</literal> configuration variable is set, its
   value is used as above.
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise, if the <literal>SSH_ASKPASS</literal> environment variable is set, its
   value is used as above.
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise, the user is prompted on the terminal.
</simpara>
</listitem>
</orderedlist>
</refsect1>
<refsect1 id="_avoiding_repetition">
<title>AVOIDING REPETITION</title>
<simpara>It can be cumbersome to input the same credentials over and over.  Git
provides two methods to reduce this annoyance:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Static configuration of usernames for a given authentication context.
</simpara>
</listitem>
<listitem>
<simpara>
Credential helpers to cache or store passwords, or to interact with
   a system password wallet or keychain.
</simpara>
</listitem>
</orderedlist>
<simpara>The first is simple and appropriate if you do not have secure storage available
for a password. It is generally configured by adding this to your config:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;[credential "https://example.com"]
        username = me&#10;.ft&#10;
</literallayout>
<simpara>Credential helpers, on the other hand, are external programs from which Git can
request both usernames and passwords; they typically interface with secure
storage provided by the OS or other programs.</simpara>
<simpara>To use a helper, you must first select one to use. Git currently
includes the following helpers:</simpara>
<variablelist>
<varlistentry>
<term>
cache
</term>
<listitem>
<simpara>
        Cache credentials in memory for a short period of time. See
        <citerefentry>
<refentrytitle>git-credential-cache</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
store
</term>
<listitem>
<simpara>
        Store credentials indefinitely on disk. See
        <citerefentry>
<refentrytitle>git-credential-store</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>You may also have third-party helpers installed; search for
<literal>credential-*</literal> in the output of <literal>git help -a</literal>, and consult the
documentation of individual helpers.  Once you have selected a helper,
you can tell Git to use it by putting its name into the
credential.helper variable.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Find a helper.
</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;$ git help -a | grep credential-
credential-foo&#10;.ft&#10;
</literallayout>
</listitem>
<listitem>
<simpara>
Read its description.
</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;$ git help credential-foo&#10;.ft&#10;
</literallayout>
</listitem>
<listitem>
<simpara>
Tell Git to use it.
</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;$ git config --global credential.helper foo&#10;.ft&#10;
</literallayout>
</listitem>
</orderedlist>
<simpara>If there are multiple instances of the <literal>credential.helper</literal> configuration
variable, each helper will be tried in turn, and may provide a username,
password, or nothing. Once Git has acquired both a username and a
password, no more helpers will be tried.</simpara>
</refsect1>
<refsect1 id="_credential_contexts">
<title>CREDENTIAL CONTEXTS</title>
<simpara>Git considers each credential to have a context defined by a URL. This context
is used to look up context-specific configuration, and is passed to any
helpers, which may use it as an index into secure storage.</simpara>
<simpara>For instance, imagine we are accessing <literal>https://example.com/foo.git</literal>. When Git
looks into a config file to see if a section matches this context, it will
consider the two a match if the context is a more-specific subset of the
pattern in the config file. For example, if you have this in your config file:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;[credential "https://example.com"]
        username = foo&#10;.ft&#10;
</literallayout>
<simpara>then we will match: both protocols are the same, both hosts are the same, and
the "pattern" URL does not care about the path component at all. However, this
context would not match:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;[credential "https://kernel.org"]
        username = foo&#10;.ft&#10;
</literallayout>
<simpara>because the hostnames differ. Nor would it match <literal>foo.example.com</literal>; Git
compares hostnames exactly, without considering whether two hosts are part of
the same domain. Likewise, a config entry for <literal>http://example.com</literal> would not
match: Git compares the protocols exactly.</simpara>
</refsect1>
<refsect1 id="_configuration_options">
<title>CONFIGURATION OPTIONS</title>
<simpara>Options for a credential context can be configured either in
<literal>credential.*</literal> (which applies to all credentials), or
<literal>credential.&lt;url&gt;.*</literal>, where &lt;url&gt; matches the context as described
above.</simpara>
<simpara>The following options are available in either location:</simpara>
<variablelist>
<varlistentry>
<term>
helper
</term>
<listitem>
<simpara>
        The name of an external credential helper, and any associated options.
        If the helper name is not an absolute path, then the string <literal>git
        credential-</literal> is prepended. The resulting string is executed by the
        shell (so, for example, setting this to <literal>foo --option=bar</literal> will execute
        <literal>git credential-foo --option=bar</literal> via the shell. See the manual of
        specific helpers for examples of their use.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
username
</term>
<listitem>
<simpara>
        A default username, if one is not provided in the URL.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
useHttpPath
</term>
<listitem>
<simpara>
        By default, Git does not consider the "path" component of an http URL
        to be worth matching via external helpers. This means that a credential
        stored for <literal>https://example.com/foo.git</literal> will also be used for
        <literal>https://example.com/bar.git</literal>. If you do want to distinguish these
        cases, set this option to <literal>true</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_custom_helpers">
<title>CUSTOM HELPERS</title>
<simpara>You can write your own custom helpers to interface with any system in
which you keep credentials. See the documentation for Git&#8217;s
<ulink url="technical/api-credentials.html">credentials API</ulink> for details.</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
