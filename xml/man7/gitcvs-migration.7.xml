<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>gitcvs-migration</refentrytitle>
<manvolnum>7</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>gitcvs-migration</refname>
  <refpurpose>Git for CVS users</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git cvsimport</emphasis> *</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Git differs from CVS in that every working tree contains a repository with
a full copy of the project history, and no repository is inherently more
important than any other.  However, you can emulate the CVS model by
designating a single shared repository which people can synchronize with;
this document explains how to do that.</simpara>
<simpara>Some basic familiarity with Git is required. Having gone through
<citerefentry>
<refentrytitle>gittutorial</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> and
<citerefentry>
<refentrytitle>gitglossary</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> should be sufficient.</simpara>
</refsect1>
<refsect1 id="_developing_against_a_shared_repository">
<title>Developing against a shared repository</title>
<simpara>Suppose a shared repository is set up in /pub/repo.git on the host
foo.com.  Then as an individual committer you can clone the shared
repository over ssh with:</simpara>
<literallayout class="monospaced">$ git clone foo.com:/pub/repo.git/ my-project
$ cd my-project</literallayout><simpara></simpara>
<simpara>and hack away.  The equivalent of <emphasis>cvs update</emphasis> is</simpara>
<literallayout class="monospaced">$ git pull origin</literallayout><simpara></simpara>
<simpara>which merges in any work that others might have done since the clone
operation.  If there are uncommitted changes in your working tree, commit
them first before running git pull.</simpara>
<note>
<simpara>The <emphasis>pull</emphasis> command knows where to get updates from because of certain
configuration variables that were set by the first <emphasis>git clone</emphasis>
command; see <literal>git config -l</literal> and the <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> man
page for details.</simpara>
</note>
<simpara>You can update the shared repository with your changes by first committing
your changes, and then using the <emphasis>git push</emphasis> command:</simpara>
<literallayout class="monospaced">$ git push origin master</literallayout><simpara></simpara>
<simpara>to "push" those commits to the shared repository.  If someone else has
updated the repository more recently, <emphasis>git push</emphasis>, like <emphasis>cvs commit</emphasis>, will
complain, in which case you must pull any changes before attempting the
push again.</simpara>
<simpara>In the <emphasis>git push</emphasis> command above we specify the name of the remote branch
to update (<literal>master</literal>).  If we leave that out, <emphasis>git push</emphasis> tries to update
any branches in the remote repository that have the same name as a branch
in the local repository.  So the last <emphasis>push</emphasis> can be done with either of:</simpara>
<literallayout class="monospaced">$ git push origin
$ git push foo.com:/pub/project.git/</literallayout><simpara></simpara>
<simpara>as long as the shared repository does not have any branches
other than <literal>master</literal>.</simpara>
</refsect1>
<refsect1 id="_setting_up_a_shared_repository">
<title>Setting Up a Shared Repository</title>
<simpara>We assume you have already created a Git repository for your project,
possibly created from scratch or from a tarball (see
<citerefentry>
<refentrytitle>gittutorial</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>), or imported from an already existing CVS
repository (see the next section).</simpara>
<simpara>Assume your existing repo is at /home/alice/myproject.  Create a new "bare"
repository (a repository without a working tree) and fetch your project into
it:</simpara>
<literallayout class="monospaced">$ mkdir /pub/my-repo.git
$ cd /pub/my-repo.git
$ git --bare init --shared
$ git --bare fetch /home/alice/myproject master:master</literallayout><simpara></simpara>
<simpara>Next, give every team member read/write access to this repository.  One
easy way to do this is to give all the team members ssh access to the
machine where the repository is hosted.  If you don&#8217;t want to give them a
full shell on the machine, there is a restricted shell which only allows
users to do Git pushes and pulls; see <citerefentry>
<refentrytitle>git-shell</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.</simpara>
<simpara>Put all the committers in the same group, and make the repository
writable by that group:</simpara>
<literallayout class="monospaced">$ chgrp -R $group /pub/my-repo.git</literallayout><simpara></simpara>
<simpara>Make sure committers have a umask of at most 027, so that the directories
they create are writable and searchable by other group members.</simpara>
</refsect1>
<refsect1 id="_importing_a_cvs_archive">
<title>Importing a CVS archive</title>
<simpara>First, install version 2.1 or higher of cvsps from
<ulink url="http://www.cobite.com/cvsps/">http://www.cobite.com/cvsps/</ulink> and make
sure it is in your path.  Then cd to a checked out CVS working directory
of the project you are interested in and run <citerefentry>
<refentrytitle>git-cvsimport</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>:</simpara>
<literallayout class="monospaced">$ git cvsimport -C &lt;destination&gt; &lt;module&gt;</literallayout><simpara></simpara>
<simpara>This puts a Git archive of the named CVS module in the directory
&lt;destination&gt;, which will be created if necessary.</simpara>
<simpara>The import checks out from CVS every revision of every file.  Reportedly
cvsimport can average some twenty revisions per second, so for a
medium-sized project this should not take more than a couple of minutes.
Larger projects or remote repositories may take longer.</simpara>
<simpara>The main trunk is stored in the Git branch named <literal>origin</literal>, and additional
CVS branches are stored in Git branches with the same names.  The most
recent version of the main trunk is also left checked out on the <literal>master</literal>
branch, so you can start adding your own changes right away.</simpara>
<simpara>The import is incremental, so if you call it again next month it will
fetch any CVS updates that have been made in the meantime.  For this to
work, you must not modify the imported branches; instead, create new
branches for your own changes, and merge in the imported branches as
necessary.</simpara>
<simpara>If you want a shared repository, you will need to make a bare clone
of the imported directory, as described above. Then treat the imported
directory as another development clone for purposes of merging
incremental imports.</simpara>
</refsect1>
<refsect1 id="_advanced_shared_repository_management">
<title>Advanced Shared Repository Management</title>
<simpara>Git allows you to specify scripts called "hooks" to be run at certain
points.  You can use these, for example, to send all commits to the shared
repository to a mailing list.  See <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.</simpara>
<simpara>You can enforce finer grained permissions using update hooks.  See
<ulink url="howto/update-hook-example.html">Controlling access to branches using
update hooks</ulink>.</simpara>
</refsect1>
<refsect1 id="_providing_cvs_access_to_a_git_repository">
<title>Providing CVS Access to a Git Repository</title>
<simpara>It is also possible to provide true CVS access to a Git repository, so
that developers can still use CVS; see <citerefentry>
<refentrytitle>git-cvsserver</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for
details.</simpara>
</refsect1>
<refsect1 id="_alternative_development_models">
<title>Alternative Development Models</title>
<simpara>CVS users are accustomed to giving a group of developers commit access to
a common repository.  As we&#8217;ve seen, this is also possible with Git.
However, the distributed nature of Git allows other development models,
and you may want to first consider whether one of them might be a better
fit for your project.</simpara>
<simpara>For example, you can choose a single person to maintain the project&#8217;s
primary public repository.  Other developers then clone this repository
and each work in their own clone.  When they have a series of changes that
they&#8217;re happy with, they ask the maintainer to pull from the branch
containing the changes.  The maintainer reviews their changes and pulls
them into the primary repository, which other developers pull from as
necessary to stay coordinated.  The Linux kernel and other projects use
variants of this model.</simpara>
<simpara>With a small group, developers may just pull changes from each other&#8217;s
repositories without the need for a central maintainer.</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>gittutorial</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>gittutorial-2</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>gitcore-tutorial</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>gitglossary</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>giteveryday</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>,
<ulink url="user-manual.html">The Git User&#8217;s Manual</ulink></simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite.</simpara>
</refsect1>
</refentry>
