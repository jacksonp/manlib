<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>btrfs-filesystem</refentrytitle>
<manvolnum>8</manvolnum>
<refmiscinfo class="source">Btrfs</refmiscinfo>
<refmiscinfo class="version">v4.4</refmiscinfo>
<refmiscinfo class="manual">Btrfs Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>btrfs-filesystem</refname>
  <refpurpose>command group of btrfs that usually work on the whole filesystem</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<simpara><emphasis role="strong">btrfs filesystem</emphasis> <emphasis>&lt;subcommand&gt;</emphasis> <emphasis>&lt;args&gt;</emphasis></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara><emphasis role="strong">btrfs filesystem</emphasis> is used to do the whole filesystem level tasks, including
all the regular filesystem operations like resizing, space stats, label
setting/getting, and defragmentation.</simpara>
</refsect1>
<refsect1 id="_subcommand">
<title>SUBCOMMAND</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">df</emphasis> [options] <emphasis>&lt;path&gt;</emphasis>
</term>
<listitem>
<simpara>
Show a terse summary information about allocation of block group types of a given
mount point. The original purpose of this command was a debugging helper. The
output needs to be further interpreted and is not suitable for quick overview.
</simpara>
<simpara>An example with description:</simpara>
<itemizedlist>
<listitem>
<simpara>
device size: <emphasis>1.9TiB</emphasis>, one device, no RAID
</simpara>
</listitem>
<listitem>
<simpara>
filesystem size: <emphasis>1.9TiB</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
created with: <emphasis>mkfs.btrfs -d single -m single</emphasis>
</simpara>
</listitem>
</itemizedlist>
<screen>$ btrfs filesystem df /path
Data, single: total=1.15TiB, used=1.13TiB
System, single: total=32.00MiB, used=144.00KiB
Metadata, single: total=12.00GiB, used=6.45GiB
GlobalReserve, single: total=512.00MiB, used=0.00B</screen>
<itemizedlist>
<listitem>
<simpara>
<emphasis>Data</emphasis>, <emphasis>System</emphasis> and <emphasis>Metadata</emphasis> are separeate block group types.
<emphasis>GlobalReserve</emphasis> is an artificial and internal emergency space, see below.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>single</emphasis>&#8201;&#8212;&#8201;the allocation profile, defined at mkfs time
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>total</emphasis>&#8201;&#8212;&#8201;sum of space reserved for
all allocation profiles of the given type, ie. all Data/single. Note that it&#8217;s
not total size of filesystem.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>used</emphasis>&#8201;&#8212;&#8201;sum of used space of the above, ie. file extents, metadata blocks
</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>GlobalReserve</emphasis> is an artificial and internal emergency space. It is used eg.
when the filesystem is full. Its <emphasis>total</emphasis> size is dynamic based on the
filesystem size, usually not larger than 512MiB, <emphasis>used</emphasis> may fluctuate.</simpara>
<simpara>The global block reserve is accounted within Metadata. In case the filesystem
metadata are exhausted, <emphasis>GlobalReserve/total + Metadata/used = Metadata/total</emphasis>.</simpara>
<simpara><literal>Options</literal></simpara>
<variablelist>
<varlistentry>
<term>
-b|--raw
</term>
<listitem>
<simpara>
raw numbers in bytes, without the <emphasis>B</emphasis> suffix
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-h|--human-readable
</term>
<listitem>
<simpara>
print human friendly numbers, base 1024, this is the default
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-H
</term>
<listitem>
<simpara>
print human friendly numbers, base 1000
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--iec
</term>
<listitem>
<simpara>
select the 1024 base for the following options, according to the IEC standard
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--si
</term>
<listitem>
<simpara>
select the 1000 base for the following options, according to the SI standard
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-k|--kbytes
</term>
<listitem>
<simpara>
show sizes in KiB, or kB with --si
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-m|--mbytes
</term>
<listitem>
<simpara>
show sizes in MiB, or MB with --si
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-g|--gbytes
</term>
<listitem>
<simpara>
show sizes in GiB, or GB with --si
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t|--tbytes
</term>
<listitem>
<simpara>
show sizes in TiB, or TB with --si
</simpara>
<simpara>If conflicting options are passed, the last one takes precedence.</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">defragment</emphasis> [options] <emphasis>&lt;file&gt;</emphasis>|<emphasis>&lt;dir&gt;</emphasis> [<emphasis>&lt;file&gt;</emphasis>|<emphasis>&lt;dir&gt;</emphasis>&#8230;]
</term>
<listitem>
<simpara>
Defragment file data on a mounted filesytem.
</simpara>
<simpara>If <emphasis>-r</emphasis> is passed, files in dir will be defragmented recursively.
The start position and the number of bytes to defragment can be specified by
start and len using <emphasis>-s</emphasis> and <emphasis>-l</emphasis> options below.
Extents bigger than value given by <emphasis>-t</emphasis> will be skipped, otherwise this value
is used as a target extent size, but is only advisory and may not be reached
if the free space is too fragmented.
Use 0 to take the kernel default, which is 256kB but may change in the future.
You can also turn on compression in defragment operations.</simpara>
<warning><simpara>Defragmenting with Linux kernel versions &lt; 3.9 or ≥ 3.14-rc2 as well as
with Linux stable kernel versions ≥ 3.10.31, ≥ 3.12.12 or ≥ 3.13.4 will break up
the ref-links of COW data (for example files copied with <literal>cp --reflink</literal>,
snapshots or de-duplicated data).
This may cause considerable increase of space usage depending on the broken up
ref-links.</simpara></warning>
<simpara><literal>Options</literal></simpara>
<variablelist>
<varlistentry>
<term>
-v
</term>
<listitem>
<simpara>
be verbose, print file names as they&#8217;re submitted for defragmentation
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-c[<emphasis>&lt;algo&gt;</emphasis>]
</term>
<listitem>
<simpara>
compress file contents while defragmenting. Optional argument selects the compression
algorithm, <emphasis>zlib</emphasis> (default) or <emphasis>lzo</emphasis>. Currently it&#8217;s not possible to select no
compression. See also section <emphasis>EXAMPLES</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-r
</term>
<listitem>
<simpara>
defragment files recursively in given directories
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f
</term>
<listitem>
<simpara>
flush data for each file before going to the next file. This will limit the amount
of dirty data to current file, otherwise the amount cumulates from several files
and may increase system load.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s <emphasis>&lt;start&gt;</emphasis>[kKmMgGtTpPeE]
</term>
<listitem>
<simpara>
defragmentation will start from the given offset, default is beginning of a file
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-l <emphasis>&lt;len&gt;</emphasis>[kKmMgGtTpPeE]
</term>
<listitem>
<simpara>
defragment only up to <emphasis>len</emphasis> bytes, default is the file size
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t <emphasis>&lt;size&gt;</emphasis>[kKmMgGtTpPeE]
</term>
<listitem>
<simpara>
target extent size, do not touch extents bigger than <emphasis>size</emphasis>
</simpara>
<simpara>For <emphasis>start</emphasis>, <emphasis>len</emphasis>, <emphasis>size</emphasis> it is possible to append
units designator: 'K', 'M', 'G', 'T', 'P', or 'E', which represent
KiB, MiB, GiB, TiB, PiB, or EiB, respectively (case does not matter).</simpara>
<note><simpara>Directory arguments without <emphasis>-r</emphasis> do not defragment files recursively but will
defragment certain internal trees (extent tree and the subvolume tree). This has been
confusing and could be removed in the future.</simpara></note>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">label</emphasis> [<emphasis>&lt;dev&gt;</emphasis>|<emphasis>&lt;mountpoint&gt;</emphasis>] [<emphasis>&lt;newlabel&gt;</emphasis>]
</term>
<listitem>
<simpara>
Show or update the label of a filesystem. This works on a mounted filesystem or
a filesystem image.
</simpara>
<simpara>The <emphasis>newlabel</emphasis> argument is optional. Current label is printed if the the argument
is omitted.</simpara>
<note><simpara>the maximum allowable length shall be less than 256 chars and must not contain
a newline. The trailing newline is stripped automatically.</simpara></note>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">resize</emphasis> [<emphasis>&lt;devid&gt;</emphasis>:][+/-]<emphasis>&lt;size&gt;</emphasis>[kKmMgGtTpPeE]|[<emphasis>&lt;devid&gt;</emphasis>:]max <emphasis>&lt;path&gt;</emphasis>
</term>
<listitem>
<simpara>
Resize a mounted filesystem identified by <emphasis>path</emphasis>. A particular device
can be resized by specifying a <emphasis>devid</emphasis>.
</simpara>
<warning><simpara>If <emphasis>path</emphasis> is a file containing a BTRFS image then resize does not work
as expected and does not resize the image. This would resize the underlying
filesystem instead.</simpara></warning>
<simpara>The <emphasis>devid</emphasis> can be found in the output of <emphasis role="strong">btrfs filesystem show</emphasis> and
defaults to 1 if not specified.
The <emphasis>size</emphasis> parameter specifies the new size of the filesystem.
If the prefix <emphasis>+</emphasis> or <emphasis>-</emphasis> is present the size is increased or decreased
by the quantity <emphasis>size</emphasis>.
If no units are specified, bytes are assumed for <emphasis>size</emphasis>.
Optionally, the size parameter may be suffixed by one of the following
units designators: 'K', 'M', 'G', 'T', 'P', or 'E', which represent
KiB, MiB, GiB, TiB, PiB, or EiB, respectively (case does not matter).</simpara>
<simpara>If <emphasis>max</emphasis> is passed, the filesystem will occupy all available space on the
device respecting <emphasis>devid</emphasis> (remember, devid 1 by default).</simpara>
<simpara>The resize command does not manipulate the size of underlying
partition.  If you wish to enlarge/reduce a filesystem, you must make sure you
can expand the partition before enlarging the filesystem and shrink the
partition after reducing the size of the filesystem.  This can done using
<literal>fdisk</literal>(8) or <literal>parted</literal>(8) to delete the existing partition and recreate
it with the new desired size.  When recreating the partition make sure to use
the same starting partition offset as before.</simpara>
<simpara>Growing is usually instant as it only updates the size. However, shrinking could
take a long time if there are data in the device area that&#8217;s beyond the new
end. Relocation of the data takes time.</simpara>
<simpara>See also section <emphasis>EXAMPLES</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">show</emphasis> [options] [<emphasis>&lt;path&gt;</emphasis>|<emphasis>&lt;uuid&gt;</emphasis>|<emphasis>&lt;device&gt;</emphasis>|<emphasis>&lt;label&gt;</emphasis>]
</term>
<listitem>
<simpara>
Show the btrfs filesystem with some additional info about devices and space
allocation.
</simpara>
<simpara>If no option none of <emphasis>path</emphasis>/<emphasis>uuid</emphasis>/<emphasis>device</emphasis>/<emphasis>label</emphasis> is passed, information
about all the BTRFS filesystems is shown, both mounted and unmounted.</simpara>
<simpara><literal>Options</literal></simpara>
<variablelist>
<varlistentry>
<term>
-m|--mounted
</term>
<listitem>
<simpara>
probe kernel for mounted BTRFS filesystems
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-d|--all-devices
</term>
<listitem>
<simpara>
scan all devices under /dev, otherwise the devices list is extracted from the
/proc/partitions file. This is a fallback option if there&#8217;s no device node
manager (like udev) available in the system.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--raw
</term>
<listitem>
<simpara>
raw numbers in bytes, without the <emphasis>B</emphasis> suffix
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--human-readable
</term>
<listitem>
<simpara>
print human friendly numbers, base 1024, this is the default
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--iec
</term>
<listitem>
<simpara>
select the 1024 base for the following options, according to the IEC standard
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--si
</term>
<listitem>
<simpara>
select the 1000 base for the following options, according to the SI standard
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--kbytes
</term>
<listitem>
<simpara>
show sizes in KiB, or kB with --si
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--mbytes
</term>
<listitem>
<simpara>
show sizes in MiB, or MB with --si
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--gbytes
</term>
<listitem>
<simpara>
show sizes in GiB, or GB with --si
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--tbytes
</term>
<listitem>
<simpara>
show sizes in TiB, or TB with --si
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">sync</emphasis> <emphasis>&lt;path&gt;</emphasis>
</term>
<listitem>
<simpara>
Force a sync of the filesystem at <emphasis>path</emphasis>. This is done via a special ioctl and
will also trigger cleaning of deleted subvolumes. Besides that it&#8217;s equivalent
to the <literal>sync</literal>(1) command.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">usage</emphasis> [options] <emphasis>&lt;path&gt;</emphasis> [<emphasis>&lt;path&gt;</emphasis>&#8230;]
</term>
<listitem>
<simpara>
Show detailed information about internal filesystem usage. This is supposed to
replace the <emphasis role="strong">btrfs filesystem df</emphasis> command in the long run.
</simpara>
<simpara>The level of detail can differ if the command is run under a regular or the
root user (due to use of restricted ioctl). For both there&#8217;s a summary section
with information about space usage:</simpara>
<screen>$ btrfs fi usage /path
WARNING: cannot read detailed chunk info, RAID5/6 numbers will be incorrect, run as root
Overall:
    Device size:                   1.82TiB
    Device allocated:              1.17TiB
    Device unallocated:          669.99GiB
    Device missing:                  0.00B
    Used:                          1.14TiB
    Free (estimated):            692.57GiB      (min: 692.57GiB)
    Data ratio:                       1.00
    Metadata ratio:                   1.00
    Global reserve:              512.00MiB      (used: 0.00B)</screen>
<simpara>The root user will also see stats broken down by block group types:</simpara>
<screen>Data,single: Size:1.15TiB, Used:1.13TiB
   /dev/sdb        1.15TiB

Metadata,single: Size:12.00GiB, Used:6.45GiB
   /dev/sdb       12.00GiB

System,single: Size:32.00MiB, Used:144.00KiB
   /dev/sdb       32.00MiB

Unallocated:
   /dev/sdb      669.99GiB</screen>
<simpara><literal>Options</literal></simpara>
<variablelist>
<varlistentry>
<term>
-b|--raw
</term>
<listitem>
<simpara>
raw numbers in bytes, without the <emphasis>B</emphasis> suffix
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-h|--human-readable
</term>
<listitem>
<simpara>
print human friendly numbers, base 1024, this is the default
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-H
</term>
<listitem>
<simpara>
print human friendly numbers, base 1000
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--iec
</term>
<listitem>
<simpara>
select the 1024 base for the following options, according to the IEC standard
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--si
</term>
<listitem>
<simpara>
select the 1000 base for the following options, according to the SI standard
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-k|--kbytes
</term>
<listitem>
<simpara>
show sizes in KiB, or kB with --si
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-m|--mbytes
</term>
<listitem>
<simpara>
show sizes in MiB, or MB with --si
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-g|--gbytes
</term>
<listitem>
<simpara>
show sizes in GiB, or GB with --si
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t|--tbytes
</term>
<listitem>
<simpara>
show sizes in TiB, or TB with --si
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-T
</term>
<listitem>
<simpara>
show data in tabular format
</simpara>
<simpara>If conflicting options are passed, the last one takes precedence.</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<simpara><emphasis role="strong">$ btrfs filesystem defrag -v -r dir/</emphasis></simpara>
<simpara>Recursively defragment files under <emphasis>dir/</emphasis>, print files as they are processed.
The file names will be printed in batches, similarly the amount of data triggered
by defragmentation will be proportional to last N printed files. The system dirty
memory throttling will slow down the defragmentation but there can still be a lot
of IO load and the system may stall for a moment.</simpara>
<simpara><emphasis role="strong">$ btrfs filesystem defrag -v -r -f dir/</emphasis></simpara>
<simpara>Recusively defragment files under <emphasis>dir/</emphasis>, be verbose and wait until all blocks
are flushed before processing next file. You can note slower progress of the
output and lower IO load (proportional to currently defragmented file).</simpara>
<simpara><emphasis role="strong">$ btrfs filesystem defrag -v -r -f -clzo dir/</emphasis></simpara>
<simpara>Recusively defragment files under <emphasis>dir/</emphasis>, be verbose, wait until all blocks are
flushed and force file compression.</simpara>
<simpara><emphasis role="strong">$ btrfs filesystem defrag -v -r -t 64M dir/</emphasis></simpara>
<simpara>Recusively defragment files under <emphasis>dir/</emphasis>, be verbose and try to merge extents
to be about 64MiB. As stated above, the success rate depends on actual free
space fragmentation and the final result is not guaranteed to meet the target
even if run repeatedly.</simpara>
<simpara><emphasis role="strong">$ btrfs filesystem resize -1G /path</emphasis></simpara>
<simpara><emphasis role="strong">$ btrfs filesystem resize 1:-1G /path</emphasis></simpara>
<simpara>Shrink size of the filesystem&#8217;s device id 1 by 1GiB. The first syntax expects a
device with id 1 to exist, otherwise fails. The second is equivalent and more
explicit. For a single-device filesystem it&#8217;s typically not necessary to
specify the devid though.</simpara>
<simpara><emphasis role="strong">$ btrfs filesystem resize max /path</emphasis></simpara>
<simpara><emphasis role="strong">$ btrfs filesystem resize 1:max /path</emphasis></simpara>
<simpara>Let&#8217;s assume that devid 1 exists, the filesystem does not occupy the whole block
device, eg. it has been enlarged and we wan the grow the filesystem. Simply using
<emphasis>max</emphasis> as size we will achieve that.</simpara>
<note><simpara>There are two ways to minimize the filesystem on a given device. The
<emphasis role="strong">btrfs inspect-internal min-dev-size</emphasis> command, or iteratively shrink in steps.</simpara></note>
</refsect1>
<refsect1 id="_exit_status">
<title>EXIT STATUS</title>
<simpara><emphasis role="strong">btrfs filesystem</emphasis> returns a zero exit status if it succeeds. Non zero is
returned in case of failure.</simpara>
</refsect1>
<refsect1 id="_availability">
<title>AVAILABILITY</title>
<simpara><emphasis role="strong">btrfs</emphasis> is part of btrfs-progs.
Please refer to the btrfs wiki <ulink url="http://btrfs.wiki.kernel.org">http://btrfs.wiki.kernel.org</ulink> for
further details.</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><literal>mkfs.btrfs</literal>(8),</simpara>
</refsect1>
</refentry>
