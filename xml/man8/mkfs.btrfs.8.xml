<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>mkfs.btrfs</refentrytitle>
<manvolnum>8</manvolnum>
<refmiscinfo class="source">Btrfs</refmiscinfo>
<refmiscinfo class="version">v4.4</refmiscinfo>
<refmiscinfo class="manual">Btrfs Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>mkfs.btrfs</refname>
  <refpurpose>create a btrfs filesystem</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<simpara><emphasis role="strong">mkfs.btrfs</emphasis>
[-A|--alloc-start &lt;alloc-start&gt;]
[-b|--byte-count &lt;byte-count&gt;]
[-d|--data &lt;data-profile&gt;]
[-m|--metadata &lt;metadata profile&gt;]
[-M|--mixed]
[-l|--leafsize &lt;leafsize&gt;]
[-n|--nodesize &lt;nodesize&gt;]
[-s|--sectorsize &lt;sectorsize&gt;]
[-L|--label &lt;label&gt;]
[-K|--nodiscard]
[-r|--rootdir &lt;rootdir&gt;]
[-O|--features &lt;feature1&gt;[,&lt;feature2&gt;...]]
[-U|--uuid &lt;UUID&gt;]
[-f|--force]
[-q|--quiet]
[--help]
[-V|--version]
&lt;device&gt; [&lt;device&gt;...]</simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara><emphasis role="strong">mkfs.btrfs</emphasis> is used to create the btrfs filesystem on a single or multiple
devices.  <emphasis>&lt;device&gt;</emphasis> is typically a block device but can be a file-backed image
as well. Multiple devices are grouped by UUID of the filesystem.</simpara>
<simpara>Before mounting such filesystem, the kernel module must know all the devices
either via preceding execution of <emphasis role="strong">btrfs device scan</emphasis> or using the <emphasis role="strong">device</emphasis>
mount option. See section <emphasis role="strong">MULTIPLE DEVICES</emphasis> for more details.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-A|--alloc-start <emphasis>&lt;offset&gt;</emphasis></emphasis>
</term>
<listitem>
<simpara>
(An option to help debugging chunk allocator.)
Specify the (physical) offset from the start of the device at which allocations
start.  The default value is zero.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-b|--byte-count <emphasis>&lt;size&gt;</emphasis></emphasis>
</term>
<listitem>
<simpara>
Specify the size of the filesystem. If this option is not used,
mkfs.btrfs uses the entire device space for the filesystem.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-d|--data <emphasis>&lt;profile&gt;</emphasis></emphasis>
</term>
<listitem>
<simpara>
Specify the profile for the data block groups.  Valid values are <emphasis>raid0</emphasis>,
<emphasis>raid1</emphasis>, <emphasis>raid5</emphasis>, <emphasis>raid6</emphasis>, <emphasis>raid10</emphasis> or <emphasis>single</emphasis> or dup (case does not matter).
</simpara>
<simpara>See <emphasis>DUP PROFILES ON A SINGLE DEVICE</emphasis> for more.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-m|--metadata <emphasis>&lt;profile&gt;</emphasis></emphasis>
</term>
<listitem>
<simpara>
Specify the profile for the metadata block groups.
Valid values are <emphasis>raid0</emphasis>, <emphasis>raid1</emphasis>, <emphasis>raid5</emphasis>, <emphasis>raid6</emphasis>, <emphasis>raid10</emphasis>, <emphasis>single</emphasis> or
<emphasis>dup</emphasis>, (case does not matter).
</simpara>
<simpara>A single device filesystem will default to <emphasis>DUP</emphasis>, unless a SSD is detected. Then
it will default to <emphasis>single</emphasis>. The detection is based on the value of
<literal>/sys/block/DEV/queue/rotational</literal>, where <emphasis>DEV</emphasis> is the short name of the device.</simpara>
<simpara>Note that the rotational status can be arbitrarily set by the underlying block
device driver and may not reflect the true status (network block device, memory-backed
SCSI devices etc). Use the options <emphasis>--data/--metadata</emphasis> to avoid confusion.</simpara>
<simpara>See <emphasis>DUP PROFILES ON A SINGLE DEVICE</emphasis> for more details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-M|--mixed</emphasis>
</term>
<listitem>
<simpara>
Normally the data and metadata block groups are isolated. The <emphasis>mixed</emphasis> mode
will remove the isolation and store both types in the same block group type.
This helps to utilize the free space regardless of the purpose and is suitable
for small devices. The separate allocation of block groups leads to a situation
where the space is reserved for the other block group type, is not available for
allocation and can lead to ENOSPC state.
</simpara>
<simpara>The recommended size for the mixed mode is for filesystems less than 1GiB. The
soft recommendation is to use it for filesystems smaller than 5GiB. Thie mixed
mode may lead to degraded performance on larger filesystems, but is otherwise
usable, even on multiple devices.</simpara>
<simpara>The <emphasis>nodesize</emphasis> and <emphasis>sectorsize</emphasis> must be equal, and the block group types must
match.</simpara>
<note><simpara>versions up to 4.2.x forced the mixed mode for devices smaller than 1GiB.
This has been removed in 4.3+ as it caused some usability issues.</simpara></note>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-l|--leafsize <emphasis>&lt;size&gt;</emphasis></emphasis>
</term>
<listitem>
<simpara>
Alias for --nodesize. Deprecated.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-n|--nodesize <emphasis>&lt;size&gt;</emphasis></emphasis>
</term>
<listitem>
<simpara>
Specify the nodesize, the tree block size in which btrfs stores metadata. The
default value is 16KiB (16384) or the page size, whichever is bigger. Must be a
multiple of the sectorsize, but not larger than 64KiB (65536).  Leafsize always
equals nodesize and the options are aliases.
</simpara>
<simpara>Smaller node size increases fragmentation but lead to higher b-trees which in
turn leads to lower locking contention. Higher node sizes give better packing
and less fragmentation at the cost of more expensive memory operations while
updating the metadata blocks.</simpara>
<note><simpara>versions up to 3.11 set the nodesize to 4k.</simpara></note>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-s|--sectorsize <emphasis>&lt;size&gt;</emphasis></emphasis>
</term>
<listitem>
<simpara>
Specify the sectorsize, the minimum data block allocation unit.
</simpara>
<simpara>The default value is the page size and is autodetected. If the sectorsize
differs from the page size, the created filesystem may not be mountable by the
kernel. Therefore it is not recommended to use this option unless you are going
to mount it on a system with the appropriate page size.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-L|--label <emphasis>&lt;string&gt;</emphasis></emphasis>
</term>
<listitem>
<simpara>
Specify a label for the filesystem. The <emphasis>string</emphasis> should be less than 256
bytes and must not contain newline characters.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-K|--nodiscard</emphasis>
</term>
<listitem>
<simpara>
Do not perform whole device TRIM operation on devices that are capable of that.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-r|--rootdir <emphasis>&lt;rootdir&gt;</emphasis></emphasis>
</term>
<listitem>
<simpara>
Populate the toplevel subvolume with files from <emphasis>rootdir</emphasis>.  This does not
require root permissions and does not mount the filesystem.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-O|--features <emphasis>&lt;feature1&gt;</emphasis>[,<emphasis>&lt;feature2&gt;</emphasis>&#8230;]</emphasis>
</term>
<listitem>
<simpara>
A list of filesystem features turned on at mkfs time. Not all features are
supported by old kernels. To disable a feature, prefix it with <emphasis>^</emphasis>.
</simpara>
<simpara>See section <emphasis role="strong">FILESYSTEM FEATURES</emphasis> for more details.  To see all available
features that mkfs.btrfs supports run:</simpara>
<simpara><literal>mkfs.btrfs -O list-all</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-f|--force</emphasis>
</term>
<listitem>
<simpara>
Forcibly overwrite the block devices when an existing filesystem is detected.
By default, mkfs.btrfs will utilize <emphasis>libblkid</emphasis> to check for any known
filesystem on the devices. Alternatively you can use the <literal>wipefs</literal> utility
to clear the devices.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-q|--quiet</emphasis>
</term>
<listitem>
<simpara>
Print only error or warning messages. Options --features or --help are unaffected.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-U|--uuid <emphasis>&lt;UUID&gt;</emphasis></emphasis>
</term>
<listitem>
<simpara>
Create the filesystem with the given <emphasis>UUID</emphasis>. The UUID must not exist on any
filesystem currently present.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-V|--version</emphasis>
</term>
<listitem>
<simpara>
Print the <emphasis role="strong">mkfs.btrfs</emphasis> version and exit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">--help</emphasis>
</term>
<listitem>
<simpara>
Print help.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_size_units">
<title>SIZE UNITS</title>
<simpara>The default unit is <emphasis>byte</emphasis>. All size parameters accept suffixes in the 1024
base. The recognized suffixes are: <emphasis>k</emphasis>, <emphasis>m</emphasis>, <emphasis>g</emphasis>, <emphasis>t</emphasis>, <emphasis>e</emphasis>, both uppercase and
lowercase.</simpara>
</refsect1>
<refsect1 id="_multiple_devices">
<title>MULTIPLE DEVICES</title>
<simpara>Before mounting a multiple device filesystem, the kernel module must know the
association of the block devices that are attached to the filesystem UUID.</simpara>
<simpara>There is typically no action needed from the user.  On a system that utilizes a
udev-like daemon, any new block device is automatically registered. The rules
call <emphasis role="strong">btrfs device scan</emphasis>.</simpara>
<simpara>The same command can be used to trigger the device scanning if the btrfs kernel
module is reloaded (naturally all previous information about the device
registration is lost).</simpara>
<simpara>Another possibility is to use the mount options <emphasis role="strong">device</emphasis> to specify the list of
devices to scan at the time of mount.</simpara>
<literallayout class="monospaced"># mount -o device=/dev/sdb,device=/dev/sdc /dev/sda /mnt</literallayout>
<note><simpara>that this means only scanning, if the devices do not exist in the system,
mount will fail anyway. This can happen on systems without initramfs/initrd and
root partition created with RAID1/10/5/6 profiles. The mount action can happen
before all block devices are discovered. The waiting is usually done on the
initramfs/initrd systems.</simpara></note>
</refsect1>
<refsect1 id="_filesystem_features">
<title>FILESYSTEM FEATURES</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">mixed-bg</emphasis>
</term>
<listitem>
<simpara>
mixed data and metadata block groups, also set by option <emphasis>--mixed</emphasis>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">extref</emphasis>
</term>
<listitem>
<simpara>
(default since btrfs-progs 3.12, kernel support since 3.7)
</simpara>
<simpara>increased hardlink limit per file in a directory to 65536, older kernels
supported a varying number of hardlinks depending on the sum of all file name
sizes that can be stored into one metadata block</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">raid56</emphasis>
</term>
<listitem>
<simpara>
extended format for RAID5/6, also enabled if raid5 or raid6 block groups
are selected
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">skinny-metadata</emphasis>
</term>
<listitem>
<simpara>
(default since btrfs-progs 3.18, kernel support since 3.10)
</simpara>
<simpara>reduced-size metadata for extent references, saves a few percent of metadata</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">no-holes</emphasis>
</term>
<listitem>
<simpara>
improved representation of file extents where holes are not explicitly
stored as an extent, saves a few percent of metadata if sparse files are used
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_block_groups_chunks_raid">
<title>BLOCK GROUPS, CHUNKS, RAID</title>
<simpara>The highlevel organizational units of a filesystem are block groups of three types:
data, metadata and system.</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">DATA</emphasis>
</term>
<listitem>
<simpara>
store data blocks and nothing else
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">METADATA</emphasis>
</term>
<listitem>
<simpara>
store internal metadata in b-trees, can store file data if they fit into the
inline limit
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">SYSTEM</emphasis>
</term>
<listitem>
<simpara>
store structures that describe the mapping between the physical devices and the
linear logical space representing the filesystem
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Other terms commonly used:</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">block group</emphasis>
</term>
<term>
<emphasis role="strong">chunk</emphasis>
</term>
<listitem>
<simpara>
a logical range of space of a given profile, stores data, metadata or both;
sometimes the terms are used interchangably
</simpara>
<simpara>A typical size of metadata block group is 256MiB (filesystem smaller than
50GiB) and 1GiB (larger than 50GiB), for data it&#8217;s 1GiB. The system block group
size is a few megabytes.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">RAID</emphasis>
</term>
<listitem>
<simpara>
a block group profile type that utilizes RAID-like features on multiple
devices: striping, mirroring, parity
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">profile</emphasis>
</term>
<listitem>
<simpara>
when used in connection with block groups refers to the allocation strategy
and constraints, see the section <emphasis>PROFILES</emphasis> for more details
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_profiles">
<title>PROFILES</title>
<simpara>There are the following block group types available:</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<?dbhtml table-width="60%"?>
<?dbfo table-width="60%"?>
<?dblatex table-width="60%"?>
<tgroup cols="5">
<colspec colname="col_1" colwidth="51*"/>
<colspec colname="col_2" colwidth="51*"/>
<colspec colname="col_3" colwidth="51*"/>
<colspec colname="col_4" colwidth="51*"/>
<colspec colname="col_5" colwidth="51*"/>
<tbody>
<row>
<entry align="center" valign="top" morerows="1"><simpara><emphasis role="strong">Profile</emphasis></simpara></entry>
<entry align="center" valign="middle" namest="col_2" nameend="col_4"><simpara><emphasis role="strong">Redundancy</emphasis></simpara></entry>
<entry align="center" valign="top" morerows="1"><simpara><emphasis role="strong">Min/max devices</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="middle"><simpara><emphasis role="strong">Copies</emphasis></simpara></entry>
<entry align="center" valign="middle"><simpara><emphasis role="strong">Parity</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Striping</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>single</simpara></entry>
<entry align="center" valign="top"><simpara>1</simpara></entry>
<entry align="center" valign="top"><simpara></simpara></entry>
<entry align="center" valign="top"><simpara></simpara></entry>
<entry align="center" valign="top"><simpara>1/any</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>DUP</simpara></entry>
<entry align="center" valign="top"><simpara>2 / 1 device</simpara></entry>
<entry align="center" valign="top"><simpara></simpara></entry>
<entry align="center" valign="top"><simpara></simpara></entry>
<entry align="center" valign="top"><simpara>1/1 <superscript>(see note)</superscript></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>RAID0</simpara></entry>
<entry align="center" valign="top"><simpara></simpara></entry>
<entry align="center" valign="top"><simpara></simpara></entry>
<entry align="center" valign="top"><simpara>1 to N</simpara></entry>
<entry align="center" valign="top"><simpara>2/any</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>RAID1</simpara></entry>
<entry align="center" valign="top"><simpara>2</simpara></entry>
<entry align="center" valign="top"><simpara></simpara></entry>
<entry align="center" valign="top"><simpara></simpara></entry>
<entry align="center" valign="top"><simpara>2/any</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>RAID10</simpara></entry>
<entry align="center" valign="top"><simpara>2</simpara></entry>
<entry align="center" valign="top"><simpara></simpara></entry>
<entry align="center" valign="top"><simpara>1 to N</simpara></entry>
<entry align="center" valign="top"><simpara>4/any</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>RAID5</simpara></entry>
<entry align="center" valign="top"><simpara>1</simpara></entry>
<entry align="center" valign="top"><simpara>1</simpara></entry>
<entry align="center" valign="top"><simpara>2 to N - 1</simpara></entry>
<entry align="center" valign="top"><simpara>2/any</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>RAID6</simpara></entry>
<entry align="center" valign="top"><simpara>1</simpara></entry>
<entry align="center" valign="top"><simpara>2</simpara></entry>
<entry align="center" valign="top"><simpara>3 to N - 2</simpara></entry>
<entry align="center" valign="top"><simpara>3/any</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara><emphasis>Note:</emphasis> DUP may exist on more than 1 device if it starts on a single device and
another one is added, but <emphasis role="strong">mkfs.btrfs</emphasis> will not let you create DUP on multiple
devices.</simpara>
</refsect1>
<refsect1 id="_dup_profiles_on_a_single_device">
<title>DUP PROFILES ON A SINGLE DEVICE</title>
<simpara>The mkfs utility will let the user create a filesystem with profiles that write
the logical blocks to 2 physical locations. Whether there are really 2
physical copies highly depends on the underlying device type.</simpara>
<simpara>For example, a SSD drive can remap the blocks internally to a single copy thus
deduplicating them. This negates the purpose of increased redunancy and just
wastes space.</simpara>
<simpara>The duplicated data/metadata may still be useful to statistically improve the
chances on a device that might perform some internal optimizations. The actual
details are not usually disclosed by vendors. As another example, the widely
used USB flash or SD cards use a translation layer. The data lifetime may
be affected by frequent plugging. The memory cells could get damaged, hopefully
not destroying both copies of particular data.</simpara>
<simpara>The traditional rotational hard drives usually fail at the sector level.</simpara>
<simpara>In any case, a device that starts to misbehave and repairs from the DUP copy
should be replaced! <emphasis role="strong">DUP is not backup</emphasis>.</simpara>
</refsect1>
<refsect1 id="_known_issues">
<title>KNOWN ISSUES</title>
<simpara><emphasis role="strong">SMALL FILESYSTEMS AND LARGE NODESIZE</emphasis></simpara>
<simpara>The combination of small filesystem size and large nodesize is not recommended
in general and can lead to various ENOSPC-related issues during mount time or runtime.</simpara>
<simpara>Since mixed block group creation is optional, we allow small
filesystem instances with differing values for <emphasis>sectorsize</emphasis> and <emphasis>nodesize</emphasis>
to be created and could end up in the following situation:</simpara>
<literallayout class="monospaced"># mkfs.btrfs -f -n 65536 /dev/loop0
btrfs-progs v3.19-rc2-405-g976307c
See http://btrfs.wiki.kernel.org for more information.</literallayout>
<literallayout class="monospaced">Performing full device TRIM (512.00MiB) ...
Label:              (null)
UUID:               49fab72e-0c8b-466b-a3ca-d1bfe56475f0
Node size:          65536
Sector size:        4096
Filesystem size:    512.00MiB
Block group profiles:
  Data:             single            8.00MiB
  Metadata:         DUP              40.00MiB
  System:           DUP              12.00MiB
SSD detected:       no
Incompat features:  extref, skinny-metadata
Number of devices:  1
Devices:
  ID        SIZE  PATH
   1   512.00MiB  /dev/loop0</literallayout>
<literallayout class="monospaced"># mount /dev/loop0 /mnt/
mount: mount /dev/loop0 on /mnt failed: No space left on device</literallayout>
<simpara>The ENOSPC occurs during the creation of the UUID tree. This is caused
by large metadata blocks and space reservation strategy that allocates more
than can fit into the filesystem.</simpara>
</refsect1>
<refsect1 id="_availability">
<title>AVAILABILITY</title>
<simpara><emphasis role="strong">mkfs.btrfs</emphasis> is part of btrfs-progs.
Please refer to the btrfs wiki <ulink url="http://btrfs.wiki.kernel.org">http://btrfs.wiki.kernel.org</ulink> for
further details.</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><literal>btrfs</literal>(8), <literal>wipefs</literal>(8)</simpara>
</refsect1>
</refentry>
