<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>btrfs-rescue</refentrytitle>
<manvolnum>8</manvolnum>
<refmiscinfo class="source">Btrfs</refmiscinfo>
<refmiscinfo class="version">v4.3.1</refmiscinfo>
<refmiscinfo class="manual">Btrfs Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>btrfs-rescue</refname>
  <refpurpose>Recover a damaged btrfs filesystem</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<simpara><emphasis role="strong">btrfs rescue</emphasis> <emphasis>&lt;subcommand&gt;</emphasis> <emphasis>&lt;args&gt;</emphasis></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara><emphasis role="strong">btrfs rescue</emphasis> is used to try to recover a damaged btrfs filesystem.</simpara>
</refsect1>
<refsect1 id="_subcommand">
<title>SUBCOMMAND</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">chunk-recover</emphasis> [options] <emphasis>&lt;device&gt;</emphasis>
</term>
<listitem>
<simpara>
Recover the chunk tree by scanning the devices
</simpara>
<simpara><literal>Options</literal></simpara>
<variablelist>
<varlistentry>
<term>
-y
</term>
<listitem>
<simpara>
assume an answer of <emphasis>yes</emphasis> to all questions.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<listitem>
<simpara>
verbose mode.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-h
</term>
<listitem>
<simpara>
help.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
<note><simpara>Since <emphasis role="strong">chunk-recover</emphasis> will scan the whole device, it will be <emphasis role="strong">VERY</emphasis> slow
especially executed on a large device.</simpara></note>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">super-recover</emphasis> [options] <emphasis>&lt;device&gt;</emphasis>
</term>
<listitem>
<simpara>
Recover bad superblocks from good copies.
</simpara>
<simpara><literal>Options</literal></simpara>
<variablelist>
<varlistentry>
<term>
-y
</term>
<listitem>
<simpara>
assume an answer of <emphasis>yes</emphasis> to all questions.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<listitem>
<simpara>
verbose mode.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">zero-log</emphasis> <emphasis>&lt;device&gt;</emphasis>
</term>
<listitem>
<simpara>
clear the filesystem log tree
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>This command will clear the filesystem log tree. This may fix a specific
set of problem when the filesystem mount fails due to the log replay. See below
for sample stacktraces that may show up in system log.</simpara>
<simpara>The common case where this happens has been fixed a long time ago,
so it is unlikely that you will see this particular problem, but the utility is
kept around.</simpara>
<note><simpara>clearing the log may lead to loss of changes that were made since the
last transaction commit. This may be up to 30 seconds (default commit period)
or less if the commit was implied by other filesystem activity.</simpara></note>
<simpara>One can determine whether <emphasis role="strong">zero-log</emphasis> is needed according to the kernel
backtrace:</simpara>
<screen>? replay_one_dir_item+0xb5/0xb5 [btrfs]
? walk_log_tree+0x9c/0x19d [btrfs]
? btrfs_read_fs_root_no_radix+0x169/0x1a1 [btrfs]
? btrfs_recover_log_trees+0x195/0x29c [btrfs]
? replay_one_dir_item+0xb5/0xb5 [btrfs]
? btree_read_extent_buffer_pages+0x76/0xbc [btrfs]
? open_ctree+0xff6/0x132c [btrfs]</screen>
<simpara>If the errors are like above, then <emphasis role="strong">zero-log</emphasis> should be used to clear
the log and the filesystem may be mounted normally again. The keywords to look
for are <emphasis>open_ctree</emphasis> which says that it&#8217;s during mount and function names
that contain <emphasis>replay</emphasis>, <emphasis>recover</emphasis> or <emphasis>log_tree</emphasis>.</simpara>
</refsect1>
<refsect1 id="_exit_status">
<title>EXIT STATUS</title>
<simpara><emphasis role="strong">btrfs rescue</emphasis> returns a zero exit status if it succeeds. Non zero is
returned in case of failure.</simpara>
</refsect1>
<refsect1 id="_availability">
<title>AVAILABILITY</title>
<simpara><emphasis role="strong">btrfs</emphasis> is part of btrfs-progs.
Please refer to the btrfs wiki <ulink url="http://btrfs.wiki.kernel.org">http://btrfs.wiki.kernel.org</ulink> for
further details.</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><literal>mkfs.btrfs</literal>(8),
<literal>btrfs-scrub</literal>(8),
<literal>btrfs-check</literal>(8)</simpara>
</refsect1>
</refentry>
