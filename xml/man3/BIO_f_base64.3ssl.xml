<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_f_base64.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_f_base64</refname>
<refpurpose>base64 BIO filter</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bio.h&gt;
#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis>BIO_METHOD *   BIO_f_base64(void);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-b321ee955b4a0ce81ec077ad0b3440f5"><title>DESCRIPTION</title>
    <para>
      BIO_f_base64() returns the base64 BIO method. This is a filter BIO
      that base64 encodes any data written through it and decodes any data
      read through it.
    </para>
    <para>
      Base64 BIOs do not support BIO_gets() or BIO_puts().
    </para>
    <para>
      BIO_flush() on a base64 BIO that is being written through is used to
      signal that no more data is to be encoded: this is used to flush the
      final block through the BIO.
    </para>
    <para>
      The flag BIO_FLAGS_BASE64_NO_NL can be set with BIO_set_flags() to
      encode the data all on one line or expect the data to be all on one
      line.
    </para>
  </refsection>
  <refsection xml:id="ID-0da283af54a55daa0825e23f88101835"><title>NOTES</title>
    <para>
      Because of the format of base64 encoding the end of the encoded block
      cannot always be reliably determined.
    </para>
  </refsection>
  <refsection xml:id="ID-d0d7f425d88f9117d1d413dca5f3896f"><title>RETURN VALUES</title>
    <para>
      BIO_f_base64() returns the base64 BIO method.
    </para>
  </refsection>
  <refsection xml:id="ID-4c43ba201f527981bc9a6fb8c2ce028a"><title>EXAMPLES</title>
    <para>
      Base64 encode the string "Hello World\n" and write the result to
      standard output:
    </para>
    <screen>BIO *bio, *b64;
char message[] = "Hello World \n";

b64 = BIO_new(BIO_f_base64());
bio = BIO_new_fp(stdout, BIO_NOCLOSE);
BIO_push(b64, bio);
BIO_write(b64, message, strlen(message));
BIO_flush(b64);

BIO_free_all(b64);</screen>
    <para>
      Read Base64 encoded data from standard input and write the decoded
      data to standard output:
    </para>
    <screen>BIO *bio, *b64, *bio_out;
char inbuf[512];
int inlen;

b64 = BIO_new(BIO_f_base64());
bio = BIO_new_fp(stdin, BIO_NOCLOSE);
bio_out = BIO_new_fp(stdout, BIO_NOCLOSE);
BIO_push(b64, bio);
while((inlen = BIO_read(b64, inbuf, 512)) &gt; 0) 
       BIO_write(bio_out, inbuf, inlen);

BIO_flush(bio_out);
BIO_free_all(b64);</screen>
  </refsection>
  <refsection xml:id="ID-1b2c8b9473e05421ee5e05448e02c48a"><title>BUGS</title>
    <para>
      The ambiguity of EOF in base64 encoded data can cause additional data
      following the base64 encoded block to be misinterpreted.
    </para>
    <para>
      There should be some way of specifying a test that the BIO can
      perform to reliably determine EOF (for example a MIME boundary).
    </para>
  </refsection>
  <refsection xml:id="ID-cc9ad3ac33bd39f3c59a0e7d24039e40"><title>SEE ALSO</title>
    <para>
      TBA
    </para>
  </refsection>
</refentry>