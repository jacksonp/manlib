<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_extension_supported.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_extension_supported,
SSL_CTX_add_client_custom_ext, SSL_CTX_add_server_custom_ext</refname>
<refpurpose>custom TLS extension handling</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>int SSL_CTX_add_client_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                                  custom_ext_add_cb add_cb,
                                  custom_ext_free_cb free_cb, void *add_arg,
                                  custom_ext_parse_cb parse_cb,
                                  void *parse_arg);</synopsis>
<synopsis>int SSL_CTX_add_server_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                                  custom_ext_add_cb add_cb,
                                  custom_ext_free_cb free_cb, void *add_arg,
                                  custom_ext_parse_cb parse_cb,
                                  void *parse_arg);</synopsis>
<synopsis>int SSL_extension_supported(unsigned int ext_type);</synopsis>
<synopsis>typedef int (*custom_ext_add_cb)(SSL *s, unsigned int ext_type,
                                 const unsigned char **out,
                                 size_t *outlen, int *al,
                                 void *add_arg);</synopsis>
<synopsis>typedef void (*custom_ext_free_cb)(SSL *s, unsigned int ext_type,
                                   const unsigned char *out,
                                   void *add_arg);</synopsis>
<synopsis>typedef int (*custom_ext_parse_cb)(SSL *s, unsigned int ext_type,
                                   const unsigned char *in,
                                   size_t inlen, int *al,
                                   void *parse_arg);</synopsis>
<synopsis/>
  </refsynopsisdiv>
  <refsection xml:id="ID-45fecf443cf63906fd9b5a01695b4264"><title>DESCRIPTION</title>
    <para>
      SSL_CTX_add_client_custom_ext() adds a custom extension for a TLS
      client with extension type <emphasis role="bold">ext_type</emphasis>
      and callbacks <emphasis role="bold">add_cb</emphasis>, <emphasis role="bold">free_cb</emphasis> and <emphasis role="bold">parse_cb</emphasis>.
    </para>
    <para>
      SSL_CTX_add_server_custom_ext() adds a custom extension for a TLS
      server with extension type <emphasis role="bold">ext_type</emphasis>
      and callbacks <emphasis role="bold">add_cb</emphasis>, <emphasis role="bold">free_cb</emphasis> and <emphasis role="bold">parse_cb</emphasis>.
    </para>
    <para>
      In both cases the extension type must not be handled by OpenSSL
      internally or an error occurs.
    </para>
    <para>
      SSL_extension_supported() returns 1 if the extension <emphasis role="bold">ext_type</emphasis> is handled internally by OpenSSL and
      0 otherwise.
    </para>
  </refsection>
  <refsection xml:id="ID-a2a19f1236e6d9ff3d458971f990f6fa"><title>EXTENSION CALLBACKS</title>
    <para>
      The callback <emphasis role="bold">add_cb</emphasis> is called to
      send custom extension data to be included in ClientHello for TLS
      clients or ServerHello for servers. The <emphasis role="bold">ext_type</emphasis> parameter is set to the extension
      type which will be added and <emphasis role="bold">add_arg</emphasis>
      to the value set when the extension handler was added.
    </para>
    <para>
      If the application wishes to include the extension <emphasis role="bold">ext_type</emphasis> it should set <emphasis role="bold">*out</emphasis> to the extension data, set <emphasis role="bold">*outlen</emphasis> to the length of the extension data
      and return 1.
    </para>
    <para>
      If the <emphasis role="bold">add_cb</emphasis> does not wish to
      include the extension it must return 0.
    </para>
    <para>
      If <emphasis role="bold">add_cb</emphasis> returns -1 a fatal
      handshake error occurs using the TLS alert value specified in
      <emphasis role="bold">*al</emphasis>.
    </para>
    <para>
      For clients (but not servers) if <emphasis role="bold">add_cb</emphasis> is set to NULL a zero length extension
      is added for <emphasis role="bold">ext_type</emphasis>.
    </para>
    <para>
      For clients every registered <emphasis role="bold">add_cb</emphasis>
      is always called to see if the application wishes to add an extension
      to ClientHello.
    </para>
    <para>
      For servers every registered <emphasis role="bold">add_cb</emphasis>
      is called once if and only if the corresponding extension was
      received in ClientHello to see if the application wishes to add the
      extension to ServerHello. That is, if no corresponding extension was
      received in ClientHello then <emphasis role="bold">add_cb</emphasis>
      will not be called.
    </para>
    <para>
      If an extension is added (that is <emphasis role="bold">add_cb</emphasis> returns 1) <emphasis role="bold">free_cb</emphasis> is called (if it is set) with the
      value of <emphasis role="bold">out</emphasis> set by the add
      callback. It can be used to free up any dynamic extension data set by
      <emphasis role="bold">add_cb</emphasis>. Since <emphasis role="bold">out</emphasis> is constant (to permit use of constant
      data in <emphasis role="bold">add_cb</emphasis>) applications may
      need to cast away const to free the data.
    </para>
    <para>
      The callback <emphasis role="bold">parse_cb</emphasis> receives data
      for TLS extensions. For TLS clients the extension data will come from
      ServerHello and for TLS servers it will come from ClientHello.
    </para>
    <para>
      The extension data consists of <emphasis role="bold">inlen</emphasis>
      bytes in the buffer <emphasis role="bold">in</emphasis> for the
      extension <emphasis role="bold">extension_type</emphasis>.
    </para>
    <para>
      If the <emphasis role="bold">parse_cb</emphasis> considers the
      extension data acceptable it must return 1. If it returns 0 or a
      negative value a fatal handshake error occurs using the TLS alert
      value specified in <emphasis role="bold">*al</emphasis>.
    </para>
    <para>
      The buffer <emphasis role="bold">in</emphasis> is a temporary
      internal buffer which will not be valid after the callback returns.
    </para>
  </refsection>
  <refsection xml:id="ID-d344a87740938ae3e01ae0717bf114fc"><title>NOTES</title>
    <para>
      The <emphasis role="bold">add_arg</emphasis> and <emphasis role="bold">parse_arg</emphasis> parameters can be set to arbitrary
      values which will be passed to the corresponding callbacks. They can,
      for example, be used to store the extension data received in a
      convenient structure or pass the extension data to be added or freed
      when adding extensions.
    </para>
    <para>
      The <emphasis role="bold">ext_type</emphasis> parameter corresponds
      to the <emphasis role="bold">extension_type</emphasis> field of
      RFC5246 et al. It is <emphasis role="bold">not</emphasis> a NID.
    </para>
    <para>
      If the same custom extension type is received multiple times a fatal
      <emphasis role="bold">decode_error</emphasis> alert is sent and the
      handshake aborts. If a custom extension is received in ServerHello
      which was not sent in ClientHello a fatal <emphasis role="bold">unsupported_extension</emphasis> alert is sent and the
      handshake is aborted. The ServerHello <emphasis role="bold">add_cb</emphasis> callback is only called if the
      corresponding extension was received in ClientHello. This is
      compliant with the TLS specifications. This behaviour ensures that
      each callback is called at most once and that an application can
      never send unsolicited extensions.
    </para>
  </refsection>
  <refsection xml:id="ID-fb0e55e8552b11428b588d89eaaa2a46"><title>RETURN VALUES</title>
    <para>
      SSL_CTX_add_client_custom_ext() and SSL_CTX_add_server_custom_ext()
      return 1 for success and 0 for failure. A failure can occur if an
      attempt is made to add the same <emphasis role="bold">ext_type</emphasis> more than once, if an attempt is made
      to use an extension type handled internally by OpenSSL or if an
      internal error occurs (for example a memory allocation failure).
    </para>
    <para>
      SSL_extension_supported() returns 1 if the extension <emphasis role="bold">ext_type</emphasis> is handled internally by OpenSSL and
      0 otherwise.
    </para>
  </refsection>
  <refsection xml:id="ID-62e917ff607d324cac72fb056940e791"><title>COPYRIGHT</title>
    <para>
      Copyright 2014-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>