<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="sd_journal_get_cutoff_realtime_usec">

        <info>
                
                <productname>systemd</productname>

                <authorgroup>
                        <author><personname><firstname>Lennart</firstname><surname>Poettering</surname></personname><contrib>Developer</contrib><email>lennart@poettering.net</email></author>
                </authorgroup>
        </info>

        <refmeta>
                <refentrytitle>sd_journal_get_cutoff_realtime_usec</refentrytitle>
                <manvolnum>3</manvolnum>
        </refmeta>

        <refnamediv>
                <refname>sd_journal_get_cutoff_realtime_usec</refname>
                <refname>sd_journal_get_cutoff_monotonic_usec</refname>
                <refpurpose>Read cut-off timestamps from the current journal entry</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
                <funcsynopsis>
                        <funcsynopsisinfo>#include &lt;systemd/sd-journal.h&gt;</funcsynopsisinfo>

                        <funcprototype>
                                <funcdef>int <function>sd_journal_get_cutoff_realtime_usec</function></funcdef>
                                <paramdef>sd_journal* <parameter>j</parameter></paramdef>
                                <paramdef>uint64_t* <parameter>from</parameter></paramdef>
                                <paramdef>uint64_t* <parameter>to</parameter></paramdef>
                        </funcprototype>

                        <funcprototype>
                                <funcdef>int <function>sd_journal_get_cutoff_monotonic_usec</function></funcdef>
                                <paramdef>sd_journal* <parameter>j</parameter></paramdef>
                                <paramdef>sd_id128_t <parameter>boot_id</parameter></paramdef>
                                <paramdef>uint64_t* <parameter>from</parameter></paramdef>
                                <paramdef>uint64_t* <parameter>to</parameter></paramdef>
                        </funcprototype>

                </funcsynopsis>
        </refsynopsisdiv>

        <refsect1>
                <title>Description</title>

                <para><function>sd_journal_get_cutoff_realtime_usec()</function>
                gets the realtime (wallclock) timestamps of the first
                and last entries accessible in the journal.  It takes
                three arguments: the journal context object and two
                pointers to 64-bit unsigned integers to store the
                timestamps in. The timestamps are in microseconds
                since the epoch,
                i.e. <constant>CLOCK_REALTIME</constant>. Either one
                of the two timestamp arguments may be passed as
                <constant>NULL</constant> in case the timestamp is not
                needed, but not both.</para>

                <para><function>sd_journal_get_cutoff_monotonic_usec()</function>
                gets the monotonic timestamps of the first and last
                entries accessible in the journal. It takes three
                arguments: the journal context object, a 128-bit
                identifier for the boot, and two pointers to 64-bit
                unsigned integers to store the timestamps. The
                timestamps are in microseconds since boot-up of the
                specific boot,
                i.e. <constant>CLOCK_MONOTONIC</constant>. Since the
                monotonic clock begins new with every reboot it only
                defines a well-defined point in time when used
                together with an identifier identifying the boot, see
                <citerefentry><refentrytitle>sd_id128_get_boot</refentrytitle><manvolnum>3</manvolnum></citerefentry>
                for more information. The function will return the
                timestamps for the boot identified by the passed boot
                ID. Either one of the two timestamp arguments may be
                passed as <constant>NULL</constant> in case the
                timestamp is not needed, but not both.</para>
        </refsect1>

        <refsect1>
                <title>Return Value</title>

                <para><function>sd_journal_get_cutoff_realtime_usec()</function>
                and
                <function>sd_journal_get_cutoff_monotonic_usec()</function>
                return 1 on success, 0 if not suitable entries are in
                the journal or a negative errno-style error code.</para>
        </refsect1>

        <refsect1>
                <title>Notes</title>

                <para>The
                <function>sd_journal_get_cutoff_realtime_usec()</function>
                and
                <function>sd_journal_get_cutoff_monotonic_usec()</function>
                interfaces are available as a shared library, which can
                be compiled and linked to with the
                <constant>libsystemd</constant>Â <citerefentry><refentrytitle>pkg-config</refentrytitle><manvolnum>1</manvolnum></citerefentry>
                file.</para>
        </refsect1>

        <refsect1>
                <title>See Also</title>

                <para>
                        <citerefentry><refentrytitle>systemd</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>sd-journal</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>sd_journal_open</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>sd_journal_get_realtime_usec</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>sd_id128_get_boot</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>clock_gettime</refentrytitle><manvolnum>2</manvolnum></citerefentry>
                </para>
        </refsect1>

</refentry>