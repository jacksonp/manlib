<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_set_default_passwd_cb.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_set_default_passwd_cb, SSL_CTX_set_default_passwd_cb_userdata,
SSL_CTX_get_default_passwd_cb, SSL_CTX_get_default_passwd_cb_userdata,
SSL_set_default_passwd_cb, SSL_set_default_passwd_cb_userdata,
SSL_get_default_passwd_cb, SSL_get_default_passwd_cb_userdata</refname>
<refpurpose>set or
get passwd callback for encrypted PEM file handling</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb);
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u);
pem_password_cb *SSL_CTX_get_default_passwd_cb(SSL_CTX *ctx);
void *SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX *ctx);</synopsis>
<synopsis>void SSL_set_default_passwd_cb(SSL *s, pem_password_cb *cb);
void SSL_set_default_passwd_cb_userdata(SSL *s, void *u);
pem_password_cb *SSL_get_default_passwd_cb(SSL *s);
void *SSL_get_default_passwd_cb_userdata(SSL *s);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-c5e162abc2a314af19662718cb392cfe"><title>DESCRIPTION</title>
    <para>
      SSL_CTX_set_default_passwd_cb() sets the default password callback
      called when loading/storing a PEM certificate with encryption.
    </para>
    <para>
      SSL_CTX_set_default_passwd_cb_userdata() sets a pointer to userdata,
      <emphasis role="bold">u</emphasis>, which will be provided to the
      password callback on invocation.
    </para>
    <para>
      SSL_CTX_get_default_passwd_cb() returns a function pointer to the
      password callback currently set in <emphasis role="bold">ctx</emphasis>. If no callback was explicitly set, the
      NULL pointer is returned.
    </para>
    <para>
      SSL_CTX_get_default_passwd_cb_userdata() returns a pointer to the
      userdata currently set in <emphasis role="bold">ctx</emphasis>. If no
      userdata was explicitly set, the NULL pointer is returned.
    </para>
    <para>
      SSL_set_default_passwd_cb(), SSL_set_default_passwd_cb_userdata(),
      SSL_get_default_passwd_cb() and SSL_get_default_passwd_cb_userdata()
      perform the same function as their SSL_CTX counterparts, but using an
      SSL object.
    </para>
    <para>
      The password callback, which must be provided by the application,
      hands back the password to be used during decryption. On invocation a
      pointer to userdata is provided. The function must store the password
      into the provided buffer <emphasis role="bold">buf</emphasis> which
      is of size <emphasis role="bold">size</emphasis>. The actual length
      of the password must be returned to the calling function. <emphasis role="bold">rwflag</emphasis> indicates whether the callback is used
      for reading/decryption (rwflag=0) or writing/encryption (rwflag=1).
      For more details, see <citerefentry>
      <refentrytitle>pem_password_cb</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-a92387b6bbdf8ab6621915fe6b1cec65"><title>NOTES</title>
    <para>
      When loading or storing private keys, a password might be supplied to
      protect the private key. The way this password can be supplied may
      depend on the application. If only one private key is handled, it can
      be practical to have the callback handle the password dialog
      interactively. If several keys have to be handled, it can be
      practical to ask for the password once, then keep it in memory and
      use it several times. In the last case, the password could be stored
      into the userdata storage and the callback only returns the password
      already stored.
    </para>
    <para>
      When asking for the password interactively, the callback can use
      <emphasis role="bold">rwflag</emphasis> to check, whether an item
      shall be encrypted (rwflag=1). In this case the password dialog may
      ask for the same password twice for comparison in order to catch
      typos, that would make decryption impossible.
    </para>
    <para>
      Other items in PEM formatting (certificates) can also be encrypted,
      it is however not usual, as certificate information is considered
      public.
    </para>
  </refsection>
  <refsection xml:id="ID-c8f423a7315d084815a0ddda7293d6fd"><title>RETURN VALUES</title>
    <para>
      These functions do not provide diagnostic information.
    </para>
  </refsection>
  <refsection xml:id="ID-d98314f22f1244e327f8749d67e71f57"><title>EXAMPLES</title>
    <para>
      The following example returns the password provided as userdata to
      the calling function. The password is considered to be a '\0'
      terminated string. If the password does not fit into the buffer, the
      password is truncated.
    </para>
    <screen>int my_cb(char *buf, int size, int rwflag, void *u)
{
     strncpy(buf, (char *)u, size);
     buf[size - 1] = '\0';
     return strlen(buf);
}</screen>
  </refsection>
  <refsection xml:id="ID-80999e3448ace6693cbab91f93b39a78"><title>HISTORY</title>
    <para>
      SSL_CTX_get_default_passwd_cb(),
      SSL_CTX_get_default_passwd_cb_userdata(), SSL_set_default_passwd_cb()
      and SSL_set_default_passwd_cb_userdata() were first added to OpenSSL
      1.1.0
    </para>
  </refsection>
  <refsection xml:id="ID-1e384cf6f1b2ecc8ccb68979fad48e5b"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ssl</refentrytitle>
      <manvolnum>7</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_use_certificate</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-c4af70f9b4e408587f3823627c641975"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>