<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>ASN1_STRING_print_ex.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>ASN1_STRING_print_ex, ASN1_STRING_print_ex_fp, ASN1_STRING_print</refname>
<refpurpose>ASN1_STRING output routines.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/asn1.h&gt;</synopsis>
<synopsis format="linespecific">int ASN1_STRING_print_ex(BIO *out, ASN1_STRING *str, unsigned long flags);
int ASN1_STRING_print_ex_fp(FILE *fp, ASN1_STRING *str, unsigned long flags);
int ASN1_STRING_print(BIO *out, ASN1_STRING *str);</synopsis>
<synopsis format="linespecific"/>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.ASN1_STRING_print_ex.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      These functions output an <emphasis role="bold">ASN1_STRING</emphasis> structure. <emphasis role="bold">ASN1_STRING</emphasis> is used to represent all the ASN1
      string types.
    </para>
    <para>
      ASN1_STRING_print_ex() outputs <emphasis role="bold">str</emphasis>
      to <emphasis role="bold">out</emphasis>, the format is determined by
      the options <emphasis role="bold">flags</emphasis>.
      ASN1_STRING_print_ex_fp() is identical except it outputs to <emphasis role="bold">fp</emphasis> instead.
    </para>
    <para>
      ASN1_STRING_print() prints <emphasis role="bold">str</emphasis> to
      <emphasis role="bold">out</emphasis> but using a different format to
      ASN1_STRING_print_ex(). It replaces unprintable characters (other
      than CR, LF) with '.'.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.ASN1_STRING_print_ex.pod:NOTES"><title>NOTES</title>
    <para>
      ASN1_STRING_print() is a legacy function which should be avoided in
      new applications.
    </para>
    <para>
      Although there are a large number of options frequently <emphasis role="bold">ASN1_STRFLGS_RFC2253</emphasis> is suitable, or on UTF8
      terminals <emphasis role="bold">ASN1_STRFLGS_RFC2253 &amp;
      ~ASN1_STRFLGS_ESC_MSB</emphasis>. 
    </para>
    <para>
      The complete set of supported options for <emphasis role="bold">flags</emphasis> is listed below.
    </para>
    <para>
      Various characters can be escaped. If <emphasis role="bold">ASN1_STRFLGS_ESC_2253</emphasis> is set the characters
      determined by RFC2253 are escaped. If <emphasis role="bold">ASN1_STRFLGS_ESC_CTRL</emphasis> is set control
      characters are escaped. If <emphasis role="bold">ASN1_STRFLGS_ESC_MSB</emphasis> is set characters with
      the MSB set are escaped: this option should <emphasis role="bold">not</emphasis> be used if the terminal correctly
      interprets UTF8 sequences.
    </para>
    <para>
      Escaping takes several forms.
    </para>
    <para>
      If the character being escaped is a 16 bit character then the form
      "\UXXXX" is used using exactly four characters for the hex
      representation. If it is 32 bits then "\WXXXXXXXX" is used using
      eight characters of its hex representation. These forms will only be
      used if UTF8 conversion is not set (see below).
    </para>
    <para>
      Printable characters are normally escaped using the backslash '\'
      character. If <emphasis role="bold">ASN1_STRFLGS_ESC_QUOTE</emphasis>
      is set then the whole string is instead surrounded by double quote
      characters: this is arguably more readable than the backslash
      notation. Other characters use the "\XX" using exactly two characters
      of the hex representation.
    </para>
    <para>
      If <emphasis role="bold">ASN1_STRFLGS_UTF8_CONVERT</emphasis> is set
      then characters are converted to UTF8 format first. If the terminal
      supports the display of UTF8 sequences then this option will
      correctly display multi byte characters.
    </para>
    <para>
      If <emphasis role="bold">ASN1_STRFLGS_IGNORE_TYPE</emphasis> is set
      then the string type is not interpreted at all: everything is assumed
      to be one byte per character. This is primarily for debugging
      purposes and can result in confusing output in multi character
      strings.
    </para>
    <para>
      If <emphasis role="bold">ASN1_STRFLGS_SHOW_TYPE</emphasis> is set
      then the string type itself is printed out before its value (for
      example "BMPSTRING"), this actually uses ASN1_tag2str().
    </para>
    <para>
      The content of a string instead of being interpreted can be "dumped":
      this just outputs the value of the string using the form #XXXX using
      hex format for each octet.
    </para>
    <para>
      If <emphasis role="bold">ASN1_STRFLGS_DUMP_ALL</emphasis> is set then
      any type is dumped.
    </para>
    <para>
      Normally non character string types (such as OCTET STRING) are
      assumed to be one byte per character, if <emphasis role="bold">ASN1_STRFLGS_DUMP_UNKNOWN</emphasis> is set then they
      will be dumped instead.
    </para>
    <para>
      When a type is dumped normally just the content octets are printed,
      if <emphasis role="bold">ASN1_STRFLGS_DUMP_DER</emphasis> is set then
      the complete encoding is dumped instead (including tag and length
      octets). 
    </para>
    <para>
      <emphasis role="bold">ASN1_STRFLGS_RFC2253</emphasis> includes all
      the flags required by RFC2253. It is equivalent to:
      ASN1_STRFLGS_ESC_2253 | ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB
      | ASN1_STRFLGS_UTF8_CONVERT | ASN1_STRFLGS_DUMP_UNKNOWN
      ASN1_STRFLGS_DUMP_DER
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.ASN1_STRING_print_ex.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>X509_NAME_print_ex</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ASN1_tag2str</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.ASN1_STRING_print_ex.pod:HISTORY"><title>HISTORY</title>
    <para>
      TBA
    </para>
  </refsection>
</refentry>