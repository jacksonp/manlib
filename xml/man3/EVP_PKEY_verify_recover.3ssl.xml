<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EVP_PKEY_verify_recover.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EVP_PKEY_verify_recover_init, EVP_PKEY_verify_recover</refname>
<refpurpose>recover signature using a public key algorithm</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis>int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx);
int EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx,
                       unsigned char *rout, size_t *routlen,
                       const unsigned char *sig, size_t siglen);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-1c47c6d4bbc68cb175b0577409495baf"><title>DESCRIPTION</title>
    <para>
      The EVP_PKEY_verify_recover_init() function initializes a public key
      algorithm context using key <emphasis role="bold">pkey</emphasis> for
      a verify recover operation.
    </para>
    <para>
      The EVP_PKEY_verify_recover() function recovers signed data using
      <emphasis role="bold">ctx</emphasis>. The signature is specified
      using the <emphasis role="bold">sig</emphasis> and <emphasis role="bold">siglen</emphasis> parameters. If <emphasis role="bold">rout</emphasis> is <emphasis role="bold">NULL</emphasis>
      then the maximum size of the output buffer is written to the
      <emphasis role="bold">routlen</emphasis> parameter. If <emphasis role="bold">rout</emphasis> is not <emphasis role="bold">NULL</emphasis> then before the call the <emphasis role="bold">routlen</emphasis> parameter should contain the length of
      the <emphasis role="bold">rout</emphasis> buffer, if the call is
      successful recovered data is written to <emphasis role="bold">rout</emphasis> and the amount of data written to
      <emphasis role="bold">routlen</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-49dd215383f34cdd9141795f252df4e7"><title>NOTES</title>
    <para>
      Normally an application is only interested in whether a signature
      verification operation is successful in those cases the EVP_verify()
      function should be used.
    </para>
    <para>
      Sometimes however it is useful to obtain the data originally signed
      using a signing operation. Only certain public key algorithms can
      recover a signature in this way (for example RSA in PKCS padding
      mode).
    </para>
    <para>
      After the call to EVP_PKEY_verify_recover_init() algorithm specific
      control operations can be performed to set any appropriate parameters
      for the operation.
    </para>
    <para>
      The function EVP_PKEY_verify_recover() can be called more than once
      on the same context if several operations are performed using the
      same parameters.
    </para>
  </refsection>
  <refsection xml:id="ID-2239ec58c08ca19fa369f86eb27ecd22"><title>RETURN VALUES</title>
    <para>
      EVP_PKEY_verify_recover_init() and EVP_PKEY_verify_recover() return 1
      for success and 0 or a negative value for failure. In particular a
      return value of -2 indicates the operation is not supported by the
      public key algorithm.
    </para>
  </refsection>
  <refsection xml:id="ID-c3daf3dd8f8d0301bd12d368485da746"><title>EXAMPLE</title>
    <para>
      Recover digest originally signed using PKCS#1 and SHA256 digest:
    </para>
    <screen>#include &amp;lt;openssl/evp.h&amp;gt;
#include &amp;lt;openssl/rsa.h&amp;gt;

EVP_PKEY_CTX *ctx;
unsigned char *rout, *sig;
size_t routlen, siglen;
EVP_PKEY *verify_key;
/* NB: assumes verify_key, sig and siglen are already set up
 * and that verify_key is an RSA public key
 */
ctx = EVP_PKEY_CTX_new(verify_key);
if (!ctx)
       /* Error occurred */
if (EVP_PKEY_verify_recover_init(ctx) &lt;= 0)
       /* Error */
if (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_PADDING) &lt;= 0)
       /* Error */
if (EVP_PKEY_CTX_set_signature_md(ctx, EVP_sha256()) &lt;= 0)
       /* Error */

/* Determine buffer length */
if (EVP_PKEY_verify_recover(ctx, NULL, &amp;routlen, sig, siglen) &lt;= 0)
       /* Error */

rout = OPENSSL_malloc(routlen);

if (!rout)
       /* malloc failure */

if (EVP_PKEY_verify_recover(ctx, rout, &amp;routlen, sig, siglen) &lt;= 0)
       /* Error */

/* Recovered data is routlen bytes written to buffer rout */</screen>
  </refsection>
  <refsection xml:id="ID-581944f7a10d6acd28182fd67453e07d"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>EVP_PKEY_CTX_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_encrypt</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_decrypt</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_sign</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_verify</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_derive</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-61fb84c87900234637c73a3b9dd9fcd2"><title>HISTORY</title>
    <para>
      These functions were first added to OpenSSL 1.0.0.
    </para>
  </refsection>
  <refsection xml:id="ID-d29bcfe70d4ff0e1e08d81c4df8d403f"><title>COPYRIGHT</title>
    <para>
      Copyright 2013-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>