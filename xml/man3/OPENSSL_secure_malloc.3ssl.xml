<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>OPENSSL_secure_malloc.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>CRYPTO_secure_malloc_init, CRYPTO_secure_malloc_initialized,
CRYPTO_secure_malloc_done, OPENSSL_secure_malloc, CRYPTO_secure_malloc,
OPENSSL_secure_zalloc, CRYPTO_secure_zalloc, OPENSSL_secure_free,
CRYPTO_secure_free, OPENSSL_secure_actual_size, OPENSSL_secure_allocated,
CYRPTO_secure_malloc_used</refname>
<refpurpose>secure heap storage</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/crypto.h&gt;</synopsis>
<synopsis>int CRYPTO_secure_malloc_init(size_t size, int minsize);</synopsis>
<synopsis>int CRYPTO_secure_malloc_initialized();</synopsis>
<synopsis>void CRYPTO_secure_malloc_done();</synopsis>
<synopsis>void *OPENSSL_secure_malloc(int num);
void *CRYPTO_secure_malloc(int num, const char *file, int line);</synopsis>
<synopsis>void *OPENSSL_secure_zalloc(int num);
void *CRYPTO_secure_zalloc(int num, const char *file, int line);</synopsis>
<synopsis>void OPENSSL_secure_free(void* ptr);
void CRYPTO_secure_free(void *ptr, const char *, int);</synopsis>
<synopsis>size_t OPENSSL_secure_actual_size(const void *ptr);
int OPENSSL_secure_allocated(const void *ptr);</synopsis>
<synopsis>size_t CYRPTO_secure_malloc_used();</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-4725b721946cbd593e69d7b8152ffb7a"><title>DESCRIPTION</title>
    <para>
      In order to help protect applications (particularly long-running
      servers) from pointer overruns or underruns that could return
      arbitrary data from the program's dynamic memory area, where keys and
      other sensitive information might be stored, OpenSSL supports the
      concept of a "secure heap." The level and type of security guarantees
      depend on the operating system. It is a good idea to review the code
      and see if it addresses your threat model and concerns.
    </para>
    <para>
      If a secure heap is used, then private key <emphasis role="bold">BIGNUM</emphasis> values are stored there. This protects
      long-term storage of private keys, but will not necessarily put all
      intermediate values and computations there.
    </para>
    <para>
      CRYPTO_secure_malloc_init() creates the secure heap, with the
      specified <literal role="code">size</literal> in bytes.
      The <literal role="code">minsize</literal> parameter is
      the minimum size to allocate from the heap. Both <literal role="code">size</literal> and <literal role="code">minsize</literal> must be a power of two.  It
      is an error to call this after any OPENSSL_secure_malloc() calls have
      been made.
    </para>
    <para>
      CRYPTO_secure_malloc_initialized() indicates whether or not the
      secure heap as been initialized and is available.
    </para>
    <para>
      CRYPTO_secure_malloc_done() releases the heap and makes the memory
      unavailable to the process. It can take noticeably long to complete.
    </para>
    <para>
      OPENSSL_secure_malloc() allocates <literal role="code">num</literal> bytes from the heap. If
      CRYPTO_secure_malloc_init() is not called, this is equivalent to
      calling OPENSSL_malloc(). It is a macro that expands to
      CRYPTO_secure_malloc() and adds the <literal role="code">__FILE__</literal> and <literal role="code">__LINE__</literal> parameters.
    </para>
    <para>
      OPENSSL_secure_zalloc() and CRYPTO_secure_zalloc() are like
      OPENSSL_secure_malloc() and CRYPTO_secure_malloc(), respectively,
      except that they call memset() to zero the memory before returning.
    </para>
    <para>
      OPENSSL_secure_free() releases the memory at <literal role="code">ptr</literal> back to the heap. It must be
      called with a value previously obtained from OPENSSL_secure_malloc().
      If CRYPTO_secure_malloc_init() is not called, this is equivalent to
      calling OPENSSL_free(). It exists for consistency with
      OPENSSL_secure_malloc() , and is a macro that expands to
      CRYPTO_secure_free() and adds the <literal role="code">__FILE__</literal> and <literal role="code">__LINE__</literal> parameters..
    </para>
    <para>
      OPENSSL_secure_allocated() tells whether or not a pointer is within
      the secure heap. OPENSSL_secure_actual_size() tells the actual size
      allocated to the pointer; implementations may allocate more space
      than initially requested, in order to "round up" and reduce secure
      heap fragmentation.
    </para>
    <para>
      CRYPTO_secure_malloc_used() returns the number of bytes allocated in
      the secure heap.
    </para>
  </refsection>
  <refsection xml:id="ID-0153c790d92aff7a0a4b48502b4e8ba1"><title>RETURN VALUES</title>
    <para>
      CRYPTO_secure_malloc_init() returns 0 on failure, 1 if successful,
      and 2 if successful but the heap could not be protected by memory
      mapping.
    </para>
    <para>
      CRYPTO_secure_malloc_initialized() returns 1 if the secure heap is
      available (that is, if CRYPTO_secure_malloc_init() has been called,
      but CRYPTO_secure_malloc_done() has not) or 0 if not.
    </para>
    <para>
      OPENSSL_secure_malloc() and OPENSSL_secure_zalloc() return a pointer
      into the secure heap of the requested size, or <literal role="code">NULL</literal> if memory could not be
      allocated.
    </para>
    <para>
      CRYPTO_secure_allocated() returns 1 if the pointer is in the secure
      heap, or 0 if not.
    </para>
    <para>
      CRYPTO_secure_malloc_done() and OPENSSL_secure_free() return no
      values.
    </para>
  </refsection>
  <refsection xml:id="ID-cb800546e8fffecbfbe758f4f8eb3299"><title>BUGS</title>
    <para>
      The size parameters should be <emphasis role="bold">size_t</emphasis>
      not <emphasis role="bold">int</emphasis> and will be changed in a
      future release.
    </para>
  </refsection>
  <refsection xml:id="ID-63465cfce5072170fc71216c7dd4d61e"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>OPENSSL_malloc</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>BN_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>bn_internal</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsection>
</refentry>