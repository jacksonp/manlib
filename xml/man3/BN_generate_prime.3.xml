<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BN_generate_prime.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BN_generate_prime_ex, BN_is_prime_ex, BN_is_prime_fasttest_ex, BN_GENCB_call,
BN_GENCB_set_old, BN_GENCB_set, BN_generate_prime, BN_is_prime,
BN_is_prime_fasttest</refname>
<refpurpose>generate primes and test for primality</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis format="linespecific">int BN_generate_prime_ex(BIGNUM *ret,int bits,int safe, const BIGNUM *add,
    const BIGNUM *rem, BN_GENCB *cb);</synopsis>
<synopsis format="linespecific">int BN_is_prime_ex(const BIGNUM *p,int nchecks, BN_CTX *ctx, BN_GENCB *cb);</synopsis>
<synopsis format="linespecific">int BN_is_prime_fasttest_ex(const BIGNUM *p,int nchecks, BN_CTX *ctx,
    int do_trial_division, BN_GENCB *cb);</synopsis>
<synopsis format="linespecific">int BN_GENCB_call(BN_GENCB *cb, int a, int b);</synopsis>
<synopsis format="linespecific">#define BN_GENCB_set_old(gencb, callback, cb_arg) ...</synopsis>
<synopsis format="linespecific">#define BN_GENCB_set(gencb, callback, cb_arg) ...</synopsis>
<synopsis format="linespecific"/>
<synopsis format="linespecific">Deprecated:</synopsis>
<synopsis format="linespecific">BIGNUM *BN_generate_prime(BIGNUM *ret, int num, int safe, BIGNUM *add,
    BIGNUM *rem, void (*callback)(int, int, void *), void *cb_arg);</synopsis>
<synopsis format="linespecific">int BN_is_prime(const BIGNUM *a, int checks, void (*callback)(int, int, 
    void *), BN_CTX *ctx, void *cb_arg);</synopsis>
<synopsis format="linespecific">int BN_is_prime_fasttest(const BIGNUM *a, int checks,
    void (*callback)(int, int, void *), BN_CTX *ctx, void *cb_arg,
    int do_trial_division);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.BN_generate_prime.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      BN_generate_prime_ex() generates a pseudo-random prime number of at
      least bit length <emphasis role="bold">bits</emphasis>. If <emphasis role="bold">ret</emphasis> is not <emphasis role="bold">NULL</emphasis>, it will be used to store the number.
    </para>
    <para>
      If <emphasis role="bold">cb</emphasis> is not <emphasis role="bold">NULL</emphasis>, it is used as follows:
    </para>
    <para>
      <itemizedlist>
        <listitem>
          <para>
	    <emphasis role="bold">BN_GENCB_call(cb, 0, i)</emphasis> is
	    called after generating the i-th potential prime number.
          </para>
        </listitem>
        <listitem>
          <para>
	    While the number is being tested for primality, <emphasis role="bold">BN_GENCB_call(cb, 1, j)</emphasis> is called as
	    described below.
          </para>
        </listitem>
        <listitem>
          <para>
	    When a prime has been found, <emphasis role="bold">BN_GENCB_call(cb, 2, i)</emphasis> is called.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      The prime may have to fulfill additional requirements for use in
      Diffie-Hellman key exchange:
    </para>
    <para>
      If <emphasis role="bold">add</emphasis> is not <emphasis role="bold">NULL</emphasis>, the prime will fulfill the condition p %
      <emphasis role="bold">add</emphasis> == <emphasis role="bold">rem</emphasis> (p % <emphasis role="bold">add</emphasis>
      == 1 if <emphasis role="bold">rem</emphasis> == <emphasis role="bold">NULL</emphasis>) in order to suit a given generator.
    </para>
    <para>
      If <emphasis role="bold">safe</emphasis> is true, it will be a safe
      prime (i.e. a prime p so that (p-1)/2 is also prime).
    </para>
    <para>
      The PRNG must be seeded prior to calling BN_generate_prime_ex(). The
      prime number generation has a negligible error probability.
    </para>
    <para>
      BN_is_prime_ex() and BN_is_prime_fasttest_ex() test if the number
      <emphasis role="bold">p</emphasis> is prime.  The following tests are
      performed until one of them shows that <emphasis role="bold">p</emphasis> is composite; if <emphasis role="bold">p</emphasis> passes all these tests, it is considered
      prime.
    </para>
    <para>
      BN_is_prime_fasttest_ex(), when called with <emphasis role="bold">do_trial_division == 1</emphasis>, first attempts trial
      division by a number of small primes; if no divisors are found by
      this test and <emphasis role="bold">cb</emphasis> is not <emphasis role="bold">NULL</emphasis>, <emphasis role="bold">BN_GENCB_call(cb,
      1, -1)</emphasis> is called. If <emphasis role="bold">do_trial_division == 0</emphasis>, this test is skipped.
    </para>
    <para>
      Both BN_is_prime_ex() and BN_is_prime_fasttest_ex() perform a
      Miller-Rabin probabilistic primality test with <emphasis role="bold">nchecks</emphasis> iterations. If <emphasis role="bold">nchecks == BN_prime_checks</emphasis>, a number of
      iterations is used that yields a false positive rate of at most 2^-80
      for random input.
    </para>
    <para>
      If <emphasis role="bold">cb</emphasis> is not <emphasis role="bold">NULL</emphasis>, <emphasis role="bold">BN_GENCB_call(cb,
      1, j)</emphasis> is called after the j-th iteration (j = 0, 1, ...).
      <emphasis role="bold">ctx</emphasis> is a pre-allocated <emphasis role="bold">BN_CTX</emphasis> (to save the overhead of allocating and
      freeing the structure in a loop), or <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      BN_GENCB_call calls the callback function held in the <emphasis role="bold">BN_GENCB</emphasis> structure and passes the ints
      <emphasis role="bold">a</emphasis> and <emphasis role="bold">b</emphasis> as arguments. There are two types of
      <emphasis role="bold">BN_GENCB</emphasis> structure that are
      supported: "new" style and "old" style. New programs should prefer
      the "new" style, whilst the "old" style is provided for backwards
      compatibility purposes.
    </para>
    <para>
      For "new" style callbacks a BN_GENCB structure should be initialised
      with a call to BN_GENCB_set, where <emphasis role="bold">gencb</emphasis> is a <emphasis role="bold">BN_GENCB
      *</emphasis>, <emphasis role="bold">callback</emphasis> is of type
      <emphasis role="bold">int (*callback)(int, int, BN_GENCB
      *)</emphasis> and <emphasis role="bold">cb_arg</emphasis> is a
      <emphasis role="bold">void *</emphasis>. "Old" style callbacks are
      the same except they are initialised with a call to BN_GENCB_set_old
      and <emphasis role="bold">callback</emphasis> is of type <emphasis role="bold">void (*callback)(int, int, void *)</emphasis>.
    </para>
    <para>
      A callback is invoked through a call to <emphasis role="bold">BN_GENCB_call</emphasis>. This will check the type of the
      callback and will invoke <emphasis role="bold">callback(a, b,
      gencb)</emphasis> for new style callbacks or <emphasis role="bold">callback(a, b, cb_arg)</emphasis> for old style.
    </para>
    <para>
      BN_generate_prime (deprecated) works in the same way as
      BN_generate_prime_ex but expects an old style callback function
      directly in the <emphasis role="bold">callback</emphasis> parameter,
      and an argument to pass to it in the <emphasis role="bold">cb_arg</emphasis>. Similarly BN_is_prime and
      BN_is_prime_fasttest are deprecated and can be compared to
      BN_is_prime_ex and BN_is_prime_fasttest_ex respectively.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BN_generate_prime.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      BN_generate_prime_ex() return 1 on success or 0 on error.
    </para>
    <para>
      BN_is_prime_ex(), BN_is_prime_fasttest_ex(), BN_is_prime() and
      BN_is_prime_fasttest() return 0 if the number is composite, 1 if it
      is prime with an error probability of less than 0.25^<emphasis role="bold">nchecks</emphasis>, and -1 on error.
    </para>
    <para>
      BN_generate_prime() returns the prime number on success, <emphasis role="bold">NULL</emphasis> otherwise.
    </para>
    <para>
      Callback functions should return 1 on success or 0 on error.
    </para>
    <para>
      The error codes can be obtained by ERR_get_error(3).
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BN_generate_prime.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      bn(3), ERR_get_error(3), rand(3)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BN_generate_prime.pod:HISTORY"><title>HISTORY</title>
    <para>
      The <emphasis role="bold">cb_arg</emphasis> arguments to
      BN_generate_prime() and to BN_is_prime() were added in SSLeay 0.9.0.
      The <emphasis role="bold">ret</emphasis> argument to
      BN_generate_prime() was added in SSLeay 0.9.1. BN_is_prime_fasttest()
      was added in OpenSSL 0.9.5.
    </para>
  </refsection>
</refentry>