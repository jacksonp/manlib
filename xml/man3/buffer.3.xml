<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>buffer.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BUF_MEM_new, BUF_MEM_new_ex, BUF_MEM_free, BUF_MEM_grow</refname>
<refpurpose>simple
character array structure</refpurpose>
  </refnamediv>
  <para>
    BUF_strdup, BUF_strndup, BUF_memdup, BUF_strlcpy, BUF_strlcat -
    standard C library equivalents
  </para>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/buffer.h&gt;</synopsis>
<synopsis>BUF_MEM *BUF_MEM_new(void);</synopsis>
<synopsis>#define BUF_MEM_FLAG_SECURE</synopsis>
<synopsis>BUF_MEM *BUF_MEM_new_ex(unsigned long flags);</synopsis>
<synopsis>void   BUF_MEM_free(BUF_MEM *a);</synopsis>
<synopsis>int    BUF_MEM_grow(BUF_MEM *str, int len);</synopsis>
<synopsis>char *BUF_strdup(const char *str);</synopsis>
<synopsis>char *BUF_strndup(const char *str, size_t siz);</synopsis>
<synopsis>void *BUF_memdup(const void *data, size_t siz);</synopsis>
<synopsis>size_t BUF_strlcpy(char *dst, const char *src, size_t size);</synopsis>
<synopsis>size_t BUF_strlcat(char *dst, const char *src, size_t size);</synopsis>
<synopsis>size_t BUF_strnlen(const char *str, size_t maxlen);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-f6097c5d2df595835e7c09f25fa131b8"><title>DESCRIPTION</title>
    <para>
      The buffer library handles simple character arrays. Buffers are used
      for various purposes in the library, most notably memory BIOs.
    </para>
    <para>
      BUF_MEM_new() allocates a new buffer of zero size.
    </para>
    <para>
      BUF_MEM_new_ex() allocates a buffer with the specified flags. The
      flag <emphasis role="bold">BUF_MEM_FLAG_SECURE</emphasis> specifies
      that the <emphasis role="bold">data</emphasis> pointer should be
      allocated on the secure heap; see <citerefentry>
      <refentrytitle>CRYPTO_secure_malloc</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
    <para>
      BUF_MEM_free() frees up an already existing buffer. The data is
      zeroed before freeing up in case the buffer contains sensitive data.
    </para>
    <para>
      BUF_MEM_grow() changes the size of an already existing buffer to
      <emphasis role="bold">len</emphasis>. Any data already in the buffer
      is preserved if it increases in size.
    </para>
    <para>
      BUF_strdup(), BUF_strndup(), BUF_memdup(), BUF_strlcpy(),
      BUF_strlcat() and BUF_strnlen are equivalents of the standard C
      library functions. The dup() functions use OPENSSL_malloc()
      underneath and so should be used in preference to the standard
      library for memory leak checking or replacing the malloc() function.
    </para>
    <para>
      Memory allocated from these functions should be freed up using the
      OPENSSL_free() function.
    </para>
    <para>
      BUF_strndup makes the explicit guarantee that it will never read past
      the first <emphasis role="bold">siz</emphasis> bytes of <emphasis role="bold">str</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-742b9485aa57c1072bd7b02a7dafe863"><title>RETURN VALUES</title>
    <para>
      BUF_MEM_new() returns the buffer or NULL on error.
    </para>
    <para>
      BUF_MEM_free() has no return value.
    </para>
    <para>
      BUF_MEM_grow() returns zero on error or the new size (i.e. <emphasis role="bold">len</emphasis>).
    </para>
  </refsection>
  <refsection xml:id="ID-e9b20686eaa662168c11890912f0a740"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>bio</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>CRYPTO_secure_malloc</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-d4260ff8af1d771b3101b4f004ea55fd"><title>HISTORY</title>
    <para>
      BUF_MEM_new_ex() was added in OpenSSL 1.1.0.
    </para>
  </refsection>
</refentry>