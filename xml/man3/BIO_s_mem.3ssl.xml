<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_s_mem.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_s_mem, BIO_set_mem_eof_return, BIO_get_mem_data, BIO_set_mem_buf,
BIO_get_mem_ptr, BIO_new_mem_buf</refname>
<refpurpose>memory BIO</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bio.h&gt;</synopsis>
<synopsis>const BIO_METHOD *     BIO_s_mem(void);
const BIO_METHOD *     BIO_s_secmem(void);</synopsis>
<synopsis>BIO_set_mem_eof_return(BIO *b,int v)
long BIO_get_mem_data(BIO *b, char **pp)
BIO_set_mem_buf(BIO *b,BUF_MEM *bm,int c)
BIO_get_mem_ptr(BIO *b,BUF_MEM **pp)</synopsis>
<synopsis>BIO *BIO_new_mem_buf(const void *buf, int len);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-8981ea0d32c47b0b0b0363d3d7b7ea97"><title>DESCRIPTION</title>
    <para>
      BIO_s_mem() return the memory BIO method function.
    </para>
    <para>
      A memory BIO is a source/sink BIO which uses memory for its I/O. Data
      written to a memory BIO is stored in a BUF_MEM structure which is
      extended as appropriate to accommodate the stored data.
    </para>
    <para>
      BIO_s_secmem() is like BIO_s_mem() except that the secure heap is
      used for buffer storage.
    </para>
    <para>
      Any data written to a memory BIO can be recalled by reading from it.
      Unless the memory BIO is read only any data read from it is deleted
      from the BIO.
    </para>
    <para>
      Memory BIOs support BIO_gets() and BIO_puts().
    </para>
    <para>
      If the BIO_CLOSE flag is set when a memory BIO is freed then the
      underlying BUF_MEM structure is also freed.
    </para>
    <para>
      Calling BIO_reset() on a read write memory BIO clears any data in it
      if the flag BIO_FLAGS_NONCLEAR_RST is not set. On a read only BIO or
      if the flag BIO_FLAGS_NONCLEAR_RST is set it restores the BIO to its
      original state and the data can be read again.
    </para>
    <para>
      BIO_eof() is true if no data is in the BIO.
    </para>
    <para>
      BIO_ctrl_pending() returns the number of bytes currently stored.
    </para>
    <para>
      BIO_set_mem_eof_return() sets the behaviour of memory BIO <emphasis role="bold">b</emphasis> when it is empty. If the <emphasis role="bold">v</emphasis> is zero then an empty memory BIO will return
      EOF (that is it will return zero and BIO_should_retry(b) will be
      false. If <emphasis role="bold">v</emphasis> is non zero then it will
      return <emphasis role="bold">v</emphasis> when it is empty and it
      will set the read retry flag (that is BIO_read_retry(b) is true). To
      avoid ambiguity with a normal positive return value <emphasis role="bold">v</emphasis> should be set to a negative value, typically
      -1.
    </para>
    <para>
      BIO_get_mem_data() sets <emphasis role="bold">pp</emphasis> to a
      pointer to the start of the memory BIOs data and returns the total
      amount of data available. It is implemented as a macro.
    </para>
    <para>
      BIO_set_mem_buf() sets the internal BUF_MEM structure to <emphasis role="bold">bm</emphasis> and sets the close flag to <emphasis role="bold">c</emphasis>, that is <emphasis role="bold">c</emphasis>
      should be either BIO_CLOSE or BIO_NOCLOSE. It is a macro.
    </para>
    <para>
      BIO_get_mem_ptr() places the underlying BUF_MEM structure in
      <emphasis role="bold">pp</emphasis>. It is a macro.
    </para>
    <para>
      BIO_new_mem_buf() creates a memory BIO using <emphasis role="bold">len</emphasis> bytes of data at <emphasis role="bold">buf</emphasis>, if <emphasis role="bold">len</emphasis>
      is -1 then the <emphasis role="bold">buf</emphasis> is assumed to be
      nul terminated and its length is determined by <emphasis role="bold">strlen</emphasis>. The BIO is set to a read only state
      and as a result cannot be written to. This is useful when some data
      needs to be made available from a static area of memory in the form
      of a BIO. The supplied data is read directly from the supplied
      buffer: it is <emphasis role="bold">not</emphasis> copied first, so
      the supplied area of memory must be unchanged until the BIO is freed.
    </para>
  </refsection>
  <refsection xml:id="ID-7ae99b99e0280968907f6e7434da927e"><title>NOTES</title>
    <para>
      Writes to memory BIOs will always succeed if memory is available:
      that is their size can grow indefinitely.
    </para>
    <para>
      Every read from a read write memory BIO will remove the data just
      read with an internal copy operation, if a BIO contains a lot of data
      and it is read in small chunks the operation can be very slow. The
      use of a read only memory BIO avoids this problem. If the BIO must be
      read write then adding a buffering BIO to the chain will speed up the
      process.
    </para>
    <para>
      Calling BIO_set_mem_buf() on a BIO created with BIO_new_secmem() will
      give undefined results, including perhaps a program crash.
    </para>
  </refsection>
  <refsection xml:id="ID-e939a0526f7d03dbe8d336d275aa2ca2"><title>BUGS</title>
    <para>
      There should be an option to set the maximum size of a memory BIO.
    </para>
  </refsection>
  <refsection xml:id="ID-5f9fd039d842c8ce9b21a51ce98ccd9e"><title>EXAMPLE</title>
    <para>
      Create a memory BIO and write some data to it:
    </para>
    <screen>BIO *mem = BIO_new(BIO_s_mem());
BIO_puts(mem, "Hello World\n");</screen>
    <para>
      Create a read only memory BIO:
    </para>
    <screen>char data[] = "Hello World";
BIO *mem;
mem = BIO_new_mem_buf(data, -1);</screen>
    <para>
      Extract the BUF_MEM structure from a memory BIO and then free up the
      BIO:
    </para>
    <screen>BUF_MEM *bptr;
BIO_get_mem_ptr(mem, &amp;bptr);
BIO_set_close(mem, BIO_NOCLOSE); /* So BIO_free() leaves BUF_MEM alone */
BIO_free(mem);</screen>
  </refsection>
  <refsection xml:id="ID-f6f21d2caf1c19ad8733cc2532f78aa1"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>