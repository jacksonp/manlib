<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>RSA_sign.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>RSA_sign, RSA_verify</refname>
<refpurpose>RSA signatures</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/rsa.h&gt;</synopsis>
<synopsis format="linespecific">int RSA_sign(int type, const unsigned char *m, unsigned int m_len,
   unsigned char *sigret, unsigned int *siglen, RSA *rsa);</synopsis>
<synopsis format="linespecific">int RSA_verify(int type, const unsigned char *m, unsigned int m_len,
   unsigned char *sigbuf, unsigned int siglen, RSA *rsa);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.RSA_sign.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      RSA_sign() signs the message digest <emphasis role="bold">m</emphasis> of size <emphasis role="bold">m_len</emphasis> using the private key <emphasis role="bold">rsa</emphasis> as specified in PKCS #1 v2.0. It stores
      the signature in <emphasis role="bold">sigret</emphasis> and the
      signature size in <emphasis role="bold">siglen</emphasis>. <emphasis role="bold">sigret</emphasis> must point to RSA_size(<emphasis role="bold">rsa</emphasis>) bytes of memory. Note that PKCS #1 adds
      meta-data, placing limits on the size of the key that can be used.
      See RSA_private_encrypt(3) for lower-level operations.
    </para>
    <para>
      <emphasis role="bold">type</emphasis> denotes the message digest
      algorithm that was used to generate <emphasis role="bold">m</emphasis>. It usually is one of <emphasis role="bold">NID_sha1</emphasis>, <emphasis role="bold">NID_ripemd160</emphasis> and <emphasis role="bold">NID_md5</emphasis>; see objects(3) for details. If
      <emphasis role="bold">type</emphasis> is <emphasis role="bold">NID_md5_sha1</emphasis>, an SSL signature (MD5 and SHA1
      message digests with PKCS #1 padding and no algorithm identifier) is
      created.
    </para>
    <para>
      RSA_verify() verifies that the signature <emphasis role="bold">sigbuf</emphasis> of size <emphasis role="bold">siglen</emphasis> matches a given message digest
      <emphasis role="bold">m</emphasis> of size <emphasis role="bold">m_len</emphasis>. <emphasis role="bold">type</emphasis>
      denotes the message digest algorithm that was used to generate the
      signature. <emphasis role="bold">rsa</emphasis> is the signer's
      public key.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.RSA_sign.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      RSA_sign() returns 1 on success, 0 otherwise.  RSA_verify() returns 1
      on successful verification, 0 otherwise.
    </para>
    <para>
      The error codes can be obtained by ERR_get_error(3).
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.RSA_sign.pod:BUGS"><title>BUGS</title>
    <para>
      Certain signatures with an improper algorithm identifier are accepted
      for compatibility with SSLeay 0.4.5 :-)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.RSA_sign.pod:CONFORMING_TO"><title>CONFORMING TO</title>
    <para>
      SSL, PKCS #1 v2.0
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.RSA_sign.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      ERR_get_error(3), objects(3), rsa(3), RSA_private_encrypt(3),
      RSA_public_decrypt(3)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.RSA_sign.pod:HISTORY"><title>HISTORY</title>
    <para>
      RSA_sign() and RSA_verify() are available in all versions of SSLeay
      and OpenSSL.
    </para>
  </refsection>
</refentry>