<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>CMS_decrypt.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>CMS_decrypt</refname>
    <refpurpose>decrypt content from a CMS envelopedData structure</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/cms.h&gt;</synopsis>
<synopsis format="linespecific">int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert, BIO *dcont, BIO *out, unsigned int flags);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.CMS_decrypt.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      CMS_decrypt() extracts and decrypts the content from a CMS
      EnvelopedData structure. <emphasis role="bold">pkey</emphasis> is the
      private key of the recipient, <emphasis role="bold">cert</emphasis>
      is the recipient's certificate, <emphasis role="bold">out</emphasis>
      is a BIO to write the content to and <emphasis role="bold">flags</emphasis> is an optional set of flags.
    </para>
    <para>
      The <emphasis role="bold">dcont</emphasis> parameter is used in the
      rare case where the encrypted content is detached. It will normally
      be set to NULL.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.CMS_decrypt.pod:NOTES"><title>NOTES</title>
    <para>
      OpenSSL_add_all_algorithms() (or equivalent) should be called before
      using this function or errors about unknown algorithms will occur.
    </para>
    <para>
      Although the recipients certificate is not needed to decrypt the data
      it is needed to locate the appropriate (of possible several)
      recipients in the CMS structure.
    </para>
    <para>
      If <emphasis role="bold">cert</emphasis> is set to NULL all possible
      recipients are tried. This case however is problematic. To thwart the
      MMA attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all
      recipients are tried whether they succeed or not. If no recipient
      succeeds then a random symmetric key is used to decrypt the content:
      this will typically output garbage and may (but is not guaranteed to)
      ultimately return a padding error only. If CMS_decrypt() just
      returned an error when all recipient encrypted keys failed to decrypt
      an attacker could use this in a timing attack. If the special flag
      <emphasis role="bold">CMS_DEBUG_DECRYPT</emphasis> is set then the
      above behaviour is modified and an error <emphasis role="bold">is</emphasis> returned if no recipient encrypted key can
      be decrypted <emphasis role="bold">without</emphasis> generating a
      random content encryption key. Applications should use this flag with
      <emphasis role="bold">extreme caution</emphasis> especially in
      automated gateways as it can leave them open to attack.
    </para>
    <para>
      It is possible to determine the correct recipient key by other means
      (for example looking them up in a database) and setting them in the
      CMS structure in advance using the CMS utility functions such as
      CMS_set1_pkey(). In this case both <emphasis role="bold">cert</emphasis> and <emphasis role="bold">pkey</emphasis>
      should be set to NULL.
    </para>
    <para>
      To process KEKRecipientInfo types CMS_set1_key() or
      CMS_RecipientInfo_set0_key() and CMS_ReceipientInfo_decrypt() should
      be called before CMS_decrypt() and <emphasis role="bold">cert</emphasis> and <emphasis role="bold">pkey</emphasis>
      set to NULL.
    </para>
    <para>
      The following flags can be passed in the <emphasis role="bold">flags</emphasis> parameter.
    </para>
    <para>
      If the <emphasis role="bold">CMS_TEXT</emphasis> flag is set MIME
      headers for type <emphasis role="bold">text/plain</emphasis> are
      deleted from the content. If the content is not of type <emphasis role="bold">text/plain</emphasis> then an error is returned.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.CMS_decrypt.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      CMS_decrypt() returns either 1 for success or 0 for failure. The
      error can be obtained from ERR_get_error(3)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.CMS_decrypt.pod:BUGS"><title>BUGS</title>
    <para>
      The lack of single pass processing and the need to hold all data in
      memory as mentioned in CMS_verify() also applies to CMS_decrypt().
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.CMS_decrypt.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      ERR_get_error(3), CMS_encrypt(3)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.CMS_decrypt.pod:HISTORY"><title>HISTORY</title>
    <para>
      CMS_decrypt() was added to OpenSSL 0.9.8
    </para>
  </refsection>
</refentry>