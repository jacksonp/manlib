<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_s_file.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_s_file, BIO_new_file, BIO_new_fp, BIO_set_fp, BIO_get_fp,
BIO_read_filename, BIO_write_filename, BIO_append_filename,
BIO_rw_filename</refname>
<refpurpose>FILE bio</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bio.h&gt;</synopsis>
<synopsis>const BIO_METHOD *     BIO_s_file(void);
BIO *BIO_new_file(const char *filename, const char *mode);
BIO *BIO_new_fp(FILE *stream, int flags);</synopsis>
<synopsis>BIO_set_fp(BIO *b,FILE *fp, int flags);
BIO_get_fp(BIO *b,FILE **fpp);</synopsis>
<synopsis>int BIO_read_filename(BIO *b, char *name)
int BIO_write_filename(BIO *b, char *name)
int BIO_append_filename(BIO *b, char *name)
int BIO_rw_filename(BIO *b, char *name)</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-31f21716e8cad04e079a5384470aec8a"><title>DESCRIPTION</title>
    <para>
      BIO_s_file() returns the BIO file method. As its name implies it is a
      wrapper round the stdio FILE structure and it is a source/sink BIO.
    </para>
    <para>
      Calls to BIO_read() and BIO_write() read and write data to the
      underlying stream. BIO_gets() and BIO_puts() are supported on file
      BIOs.
    </para>
    <para>
      BIO_flush() on a file BIO calls the fflush() function on the wrapped
      stream.
    </para>
    <para>
      BIO_reset() attempts to change the file pointer to the start of file
      using fseek(stream, 0, 0).
    </para>
    <para>
      BIO_seek() sets the file pointer to position <emphasis role="bold">ofs</emphasis> from start of file using fseek(stream,
      ofs, 0).
    </para>
    <para>
      BIO_eof() calls feof().
    </para>
    <para>
      Setting the BIO_CLOSE flag calls fclose() on the stream when the BIO
      is freed.
    </para>
    <para>
      BIO_new_file() creates a new file BIO with mode <emphasis role="bold">mode</emphasis> the meaning of <emphasis role="bold">mode</emphasis> is the same as the stdio function
      fopen(). The BIO_CLOSE flag is set on the returned BIO.
    </para>
    <para>
      BIO_new_fp() creates a file BIO wrapping <emphasis role="bold">stream</emphasis>. Flags can be: BIO_CLOSE, BIO_NOCLOSE
      (the close flag) BIO_FP_TEXT (sets the underlying stream to text
      mode, default is binary: this only has any effect under Win32).
    </para>
    <para>
      BIO_set_fp() set the fp of a file BIO to <emphasis role="bold">fp</emphasis>. <emphasis role="bold">flags</emphasis> has
      the same meaning as in BIO_new_fp(), it is a macro.
    </para>
    <para>
      BIO_get_fp() retrieves the fp of a file BIO, it is a macro.
    </para>
    <para>
      BIO_seek() is a macro that sets the position pointer to <emphasis role="bold">offset</emphasis> bytes from the start of file.
    </para>
    <para>
      BIO_tell() returns the value of the position pointer.
    </para>
    <para>
      BIO_read_filename(), BIO_write_filename(), BIO_append_filename() and
      BIO_rw_filename() set the file BIO <emphasis role="bold">b</emphasis>
      to use file <emphasis role="bold">name</emphasis> for reading,
      writing, append or read write respectively.
    </para>
  </refsection>
  <refsection xml:id="ID-786540ae6d1f9929be9bce79c5a091de"><title>NOTES</title>
    <para>
      When wrapping stdout, stdin or stderr the underlying stream should
      not normally be closed so the BIO_NOCLOSE flag should be set.
    </para>
    <para>
      Because the file BIO calls the underlying stdio functions any quirks
      in stdio behaviour will be mirrored by the corresponding BIO.
    </para>
    <para>
      On Windows BIO_new_files reserves for the filename argument to be
      UTF-8 encoded. In other words if you have to make it work in multi-
      lingual environment, encode file names in UTF-8.
    </para>
  </refsection>
  <refsection xml:id="ID-2be5cdac83707c588fbe4a2dfbcfa50f"><title>EXAMPLES</title>
    <para>
      File BIO "hello world":
    </para>
    <screen>BIO *bio_out;
bio_out = BIO_new_fp(stdout, BIO_NOCLOSE);
BIO_printf(bio_out, "Hello World\n");</screen>
    <para>
      Alternative technique:
    </para>
    <screen>BIO *bio_out;
bio_out = BIO_new(BIO_s_file());
if(bio_out == NULL) /* Error ... */
if(!BIO_set_fp(bio_out, stdout, BIO_NOCLOSE)) /* Error ... */
BIO_printf(bio_out, "Hello World\n");</screen>
    <para>
      Write to a file:
    </para>
    <screen>BIO *out;
out = BIO_new_file("filename.txt", "w");
if(!out) /* Error occurred */
BIO_printf(out, "Hello World\n");
BIO_free(out);</screen>
    <para>
      Alternative technique:
    </para>
    <screen>BIO *out;
out = BIO_new(BIO_s_file());
if(out == NULL) /* Error ... */
if(!BIO_write_filename(out, "filename.txt")) /* Error ... */
BIO_printf(out, "Hello World\n");
BIO_free(out);</screen>
  </refsection>
  <refsection xml:id="ID-31e0d492bbe6cefa7960a9208b812e18"><title>RETURN VALUES</title>
    <para>
      BIO_s_file() returns the file BIO method.
    </para>
    <para>
      BIO_new_file() and BIO_new_fp() return a file BIO or NULL if an error
      occurred.
    </para>
    <para>
      BIO_set_fp() and BIO_get_fp() return 1 for success or 0 for failure
      (although the current implementation never return 0).
    </para>
    <para>
      BIO_seek() returns the same value as the underlying fseek() function:
      0 for success or -1 for failure.
    </para>
    <para>
      BIO_tell() returns the current file position.
    </para>
    <para>
      BIO_read_filename(), BIO_write_filename(), BIO_append_filename() and
      BIO_rw_filename() return 1 for success or 0 for failure.
    </para>
  </refsection>
  <refsection xml:id="ID-77418387eb24a45edad1f2eae41ebbbd"><title>BUGS</title>
    <para>
      BIO_reset() and BIO_seek() are implemented using fseek() on the
      underlying stream. The return value for fseek() is 0 for success or
      -1 if an error occurred this differs from other types of BIO which
      will typically return 1 for success and a non positive value if an
      error occurred.
    </para>
  </refsection>
  <refsection xml:id="ID-810f4c9405028b1aee5a76f86f71dfa8"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>BIO_seek</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>BIO_tell</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_reset</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_flush</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_read</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_write</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_puts</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_gets</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_printf</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_set_close</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_get_close</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-a7ef61717e00080000e3e102bfd1c314"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>