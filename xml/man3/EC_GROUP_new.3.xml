<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EC_GROUP_new.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EC_GROUP_new, EC_GROUP_free, EC_GROUP_clear_free, EC_GROUP_new_curve_GFp, EC_GROUP_new_curve_GF2m, EC_GROUP_new_by_curve_name, EC_GROUP_set_curve_GFp, EC_GROUP_get_curve_GFp, EC_GROUP_set_curve_GF2m, EC_GROUP_get_curve_GF2m, EC_get_builtin_curves</refname>
<refpurpose>Functions for creating and destroying <emphasis role="bold">EC_GROUP</emphasis> objects.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/ec.h&gt;
#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis format="linespecific">EC_GROUP *EC_GROUP_new(const EC_METHOD *meth);
void EC_GROUP_free(EC_GROUP *group);
void EC_GROUP_clear_free(EC_GROUP *group);</synopsis>
<synopsis format="linespecific">EC_GROUP *EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
EC_GROUP *EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
EC_GROUP *EC_GROUP_new_by_curve_name(int nid);</synopsis>
<synopsis format="linespecific">int EC_GROUP_set_curve_GFp(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
int EC_GROUP_get_curve_GFp(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
int EC_GROUP_set_curve_GF2m(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
int EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);</synopsis>
<synopsis format="linespecific">size_t EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.EC_GROUP_new.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      Within the library there are two forms of elliptic curve that are of
      interest. The first form is those defined over the prime field Fp.
      The elements of Fp are the integers 0 to p-1, where p is a prime
      number. This gives us a revised elliptic curve equation as follows:
    </para>
    <para>
      y^2 mod p = x^3 +ax + b mod p
    </para>
    <para>
      The second form is those defined over a binary field F2^m where the
      elements of the field are integers of length at most m bits. For this
      form the elliptic curve equation is modified to:
    </para>
    <para>
      y^2 + xy = x^3 + ax^2 + b (where b != 0)
    </para>
    <para>
      Operations in a binary field are performed relative to an <emphasis role="bold">irreducible polynomial</emphasis>. All such curves with
      OpenSSL use a trinomial or a pentanomial for this parameter.
    </para>
    <para>
      A new curve can be constructed by calling EC_GROUP_new, using the
      implementation provided by <emphasis role="bold">meth</emphasis> (see
      <citerefentry> <refentrytitle>EC_GFp_simple_method</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>). It is then necessary to
      call either EC_GROUP_set_curve_GFp or EC_GROUP_set_curve_GF2m as
      appropriate to create a curve defined over Fp or over F2^m
      respectively.
    </para>
    <para>
      EC_GROUP_set_curve_GFp sets the curve parameters <emphasis role="bold">p</emphasis>, <emphasis role="bold">a</emphasis> and
      <emphasis role="bold">b</emphasis> for a curve over Fp stored in
      <emphasis role="bold">group</emphasis>. EC_group_get_curve_GFp
      obtains the previously set curve parameters.
    </para>
    <para>
      EC_GROUP_set_curve_GF2m sets the equivalent curve parameters for a
      curve over F2^m. In this case <emphasis role="bold">p</emphasis>
      represents the irreducible polynomial - each bit represents a term in
      the polynomial. Therefore there will either be three or five bits set
      dependent on whether the polynomial is a trinomial or a pentanomial.
      EC_group_get_curve_GF2m obtains the previously set curve parameters.
    </para>
    <para>
      The functions EC_GROUP_new_curve_GFp and EC_GROUP_new_curve_GF2m are
      shortcuts for calling EC_GROUP_new and the appropriate
      EC_group_set_curve function. An appropriate default implementation
      method will be used.
    </para>
    <para>
      Whilst the library can be used to create any curve using the
      functions described above, there are also a number of predefined
      curves that are available. In order to obtain a list of all of the
      predefined curves, call the function EC_get_builtin_curves. The
      parameter <emphasis role="bold">r</emphasis> should be an array of
      EC_builtin_curve structures of size <emphasis role="bold">nitems</emphasis>. The function will populate the
      <emphasis role="bold">r</emphasis> array with information about the
      builtin curves. If <emphasis role="bold">nitems</emphasis> is less
      than the total number of curves available, then the first <emphasis role="bold">nitems</emphasis> curves will be returned. Otherwise the
      total number of curves will be provided. The return value is the
      total number of curves available (whether that number has been
      populated in <emphasis role="bold">r</emphasis> or not). Passing a
      NULL <emphasis role="bold">r</emphasis>, or setting <emphasis role="bold">nitems</emphasis> to 0 will do nothing other than return
      the total number of curves available. The EC_builtin_curve structure
      is defined as follows:
    </para>
    <screen>typedef struct { 
       int nid;
       const char *comment;
       } EC_builtin_curve;</screen>
    <para>
      Each EC_builtin_curve item has a unique integer id (<emphasis role="bold">nid</emphasis>), and a human readable comment string
      describing the curve.
    </para>
    <para>
      In order to construct a builtin curve use the function
      EC_GROUP_new_by_curve_name and provide the <emphasis role="bold">nid</emphasis> of the curve to be constructed.
    </para>
    <para>
      EC_GROUP_free frees the memory associated with the EC_GROUP. If
      <emphasis role="bold">group</emphasis> is NULL nothing is done.
    </para>
    <para>
      EC_GROUP_clear_free destroys any sensitive data held within the
      EC_GROUP and then frees its memory. If <emphasis role="bold">group</emphasis> is NULL nothing is done.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EC_GROUP_new.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      All EC_GROUP_new* functions return a pointer to the newly constructed
      group, or NULL on error.
    </para>
    <para>
      EC_get_builtin_curves returns the number of builtin curves that are
      available.
    </para>
    <para>
      EC_GROUP_set_curve_GFp, EC_GROUP_get_curve_GFp,
      EC_GROUP_set_curve_GF2m, EC_GROUP_get_curve_GF2m return 1 on success
      or 0 on error.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EC_GROUP_new.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>crypto</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ec</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_GROUP_copy</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_POINT_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_POINT_add</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_KEY_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_GFp_simple_method</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>d2i_ECPKParameters</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
</refentry>