<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>CMS_sign.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>CMS_sign</refname>
<refpurpose>create a CMS SignedData structure</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/cms.h&gt;</synopsis>
<synopsis>CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs, BIO *data, unsigned int flags);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-1052582b7f1e9949d67d7ec2077bbba1"><title>DESCRIPTION</title>
    <para>
      CMS_sign() creates and returns a CMS SignedData structure. <emphasis role="bold">signcert</emphasis> is the certificate to sign with,
      <emphasis role="bold">pkey</emphasis> is the corresponding private
      key. <emphasis role="bold">certs</emphasis> is an optional additional
      set of certificates to include in the CMS structure (for example any
      intermediate CAs in the chain). Any or all of these parameters can be
      <emphasis role="bold">NULL</emphasis>, see <emphasis role="bold">NOTES</emphasis> below.
    </para>
    <para>
      The data to be signed is read from BIO <emphasis role="bold">data</emphasis>.
    </para>
    <para>
      <emphasis role="bold">flags</emphasis> is an optional set of flags.
    </para>
  </refsection>
  <refsection xml:id="ID-2fc13ee5e509bbb4949ded31ee8bc72a"><title>NOTES</title>
    <para>
      Any of the following flags (ored together) can be passed in the
      <emphasis role="bold">flags</emphasis> parameter.
    </para>
    <para>
      Many S/MIME clients expect the signed content to include valid MIME
      headers. If the <emphasis role="bold">CMS_TEXT</emphasis> flag is set
      MIME headers for type <emphasis role="bold">text/plain</emphasis> are
      prepended to the data.
    </para>
    <para>
      If <emphasis role="bold">CMS_NOCERTS</emphasis> is set the signer's
      certificate will not be included in the CMS_ContentInfo structure,
      the signer's certificate must still be supplied in the <emphasis role="bold">signcert</emphasis> parameter though. This can reduce the
      size of the signature if the signers certificate can be obtained by
      other means: for example a previously signed message.
    </para>
    <para>
      The data being signed is included in the CMS_ContentInfo structure,
      unless <emphasis role="bold">CMS_DETACHED</emphasis> is set in which
      case it is omitted. This is used for CMS_ContentInfo detached
      signatures which are used in S/MIME plaintext signed messages for
      example.
    </para>
    <para>
      Normally the supplied content is translated into MIME canonical
      format (as required by the S/MIME specifications) if <emphasis role="bold">CMS_BINARY</emphasis> is set no translation occurs. This
      option should be used if the supplied data is in binary format
      otherwise the translation will corrupt it.
    </para>
    <para>
      The SignedData structure includes several CMS signedAttributes
      including the signing time, the CMS content type and the supported
      list of ciphers in an SMIMECapabilities attribute. If <emphasis role="bold">CMS_NOATTR</emphasis> is set then no signedAttributes
      will be used. If <emphasis role="bold">CMS_NOSMIMECAP</emphasis> is
      set then just the SMIMECapabilities are omitted.
    </para>
    <para>
      If present the SMIMECapabilities attribute indicates support for the
      following algorithms in preference order: 256 bit AES, Gost R3411-94,
      Gost 28147-89, 192 bit AES, 128 bit AES, triple DES, 128 bit RC2, 64
      bit RC2, DES and 40 bit RC2. If any of these algorithms is not
      available then it will not be included: for example the GOST
      algorithms will not be included if the GOST ENGINE is not loaded.
    </para>
    <para>
      OpenSSL will by default identify signing certificates using issuer
      name and serial number. If <emphasis role="bold">CMS_USE_KEYID</emphasis> is set it will use the subject
      key identifier value instead. An error occurs if the signing
      certificate does not have a subject key identifier extension.
    </para>
    <para>
      If the flags <emphasis role="bold">CMS_STREAM</emphasis> is set then
      the returned <emphasis role="bold">CMS_ContentInfo</emphasis>
      structure is just initialized ready to perform the signing operation.
      The signing is however <emphasis role="bold">not</emphasis> performed
      and the data to be signed is not read from the <emphasis role="bold">data</emphasis> parameter. Signing is deferred until
      after the data has been written. In this way data can be signed in a
      single pass.
    </para>
    <para>
      If the <emphasis role="bold">CMS_PARTIAL</emphasis> flag is set a
      partial <emphasis role="bold">CMS_ContentInfo</emphasis> structure is
      output to which additional signers and capabilities can be added
      before finalization.
    </para>
    <para>
      If the flag <emphasis role="bold">CMS_STREAM</emphasis> is set the
      returned <emphasis role="bold">CMS_ContentInfo</emphasis> structure
      is <emphasis role="bold">not</emphasis> complete and outputting its
      contents via a function that does not properly finalize the <emphasis role="bold">CMS_ContentInfo</emphasis> structure will give
      unpredictable results.
    </para>
    <para>
      Several functions including SMIME_write_CMS(), i2d_CMS_bio_stream(),
      PEM_write_bio_CMS_stream() finalize the structure. Alternatively
      finalization can be performed by obtaining the streaming ASN1
      <emphasis role="bold">BIO</emphasis> directly using BIO_new_CMS().
    </para>
    <para>
      If a signer is specified it will use the default digest for the
      signing algorithm. This is <emphasis role="bold">SHA1</emphasis> for
      both RSA and DSA keys.
    </para>
    <para>
      If <emphasis role="bold">signcert</emphasis> and <emphasis role="bold">pkey</emphasis> are NULL then a certificates only CMS
      structure is output.
    </para>
    <para>
      The function CMS_sign() is a basic CMS signing function whose output
      will be suitable for many purposes. For finer control of the output
      format the <emphasis role="bold">certs</emphasis>, <emphasis role="bold">signcert</emphasis> and <emphasis role="bold">pkey</emphasis> parameters can all be <emphasis role="bold">NULL</emphasis> and the <emphasis role="bold">CMS_PARTIAL</emphasis> flag set. Then one or more signers
      can be added using the function CMS_sign_add1_signer(), non default
      digests can be used and custom attributes added. CMS_final() must
      then be called to finalize the structure if streaming is not enabled.
    </para>
  </refsection>
  <refsection xml:id="ID-54770b7dfbcdde57967525938a71de5c"><title>BUGS</title>
    <para>
      Some attributes such as counter signatures are not supported.
    </para>
  </refsection>
  <refsection xml:id="ID-b08ba19eb5f7673833591064a58ac79b"><title>RETURN VALUES</title>
    <para>
      CMS_sign() returns either a valid CMS_ContentInfo structure or NULL
      if an error occurred. The error can be obtained from
      ERR_get_error(3).
    </para>
  </refsection>
  <refsection xml:id="ID-5c300ffcff9f50a9c80fb9b8302f00e5"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ERR_get_error</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>CMS_verify</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-e638a83784a73287684e386391e5266e"><title>HISTORY</title>
    <para>
      The <emphasis role="bold">CMS_STREAM</emphasis> flag is only
      supported for detached data in OpenSSL 0.9.8, it is supported for
      embedded data in OpenSSL 1.0.0 and later.
    </para>
  </refsection>
  <refsection xml:id="ID-c44a830b0fe82c6a18370dc2618741d0"><title>COPYRIGHT</title>
    <para>
      Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>