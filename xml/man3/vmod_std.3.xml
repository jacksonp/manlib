<!-- Converted by db4-upgrade version 1.1 -->
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="vmod_std">
  <title>vmod_std</title>
  <section xml:id="varnish-standard-module">
    <title>Varnish Standard Module</title>
    <variablelist>
      <varlistentry>
        <term>
          Manual section
        </term>
        <listitem>
          <para>
            3
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <section xml:id="synopsis">
      <title>SYNOPSIS</title>
      <para>
        import std [from "path"] ;
      </para>
    </section>
    <section xml:id="description">
      <title>DESCRIPTION</title>
      <para>
        Vmod_std contains basic functions which are part and parcel of
        Varnish, but which for reasons of architecture fit better in a
        VMOD.
      </para>
      <para>
        One particular class of functions in vmod_std is the conversions
        functions which all have the form:
      </para>
      <programlisting>
TYPE type(STRING, TYPE)
</programlisting>
      <para>
        These functions attempt to convert STRING to the TYPE, and if
        that fails, they return the second argument, which must have the
        given TYPE.
      </para>
    </section>
    <section xml:id="contents">
      <title>CONTENTS</title>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            func_cache_req_body
          </para>
        </listitem>
        <listitem>
          <para>
            func_collect
          </para>
        </listitem>
        <listitem>
          <para>
            func_duration
          </para>
        </listitem>
        <listitem>
          <para>
            func_fileread
          </para>
        </listitem>
        <listitem>
          <para>
            func_healthy
          </para>
        </listitem>
        <listitem>
          <para>
            func_integer
          </para>
        </listitem>
        <listitem>
          <para>
            func_ip
          </para>
        </listitem>
        <listitem>
          <para>
            func_log
          </para>
        </listitem>
        <listitem>
          <para>
            func_port
          </para>
        </listitem>
        <listitem>
          <para>
            func_querysort
          </para>
        </listitem>
        <listitem>
          <para>
            func_random
          </para>
        </listitem>
        <listitem>
          <para>
            func_real
          </para>
        </listitem>
        <listitem>
          <para>
            func_real2time
          </para>
        </listitem>
        <listitem>
          <para>
            func_rollback
          </para>
        </listitem>
        <listitem>
          <para>
            func_set_ip_tos
          </para>
        </listitem>
        <listitem>
          <para>
            func_strstr
          </para>
        </listitem>
        <listitem>
          <para>
            func_syslog
          </para>
        </listitem>
        <listitem>
          <para>
            func_time
          </para>
        </listitem>
        <listitem>
          <para>
            func_time2integer
          </para>
        </listitem>
        <listitem>
          <para>
            func_time2real
          </para>
        </listitem>
        <listitem>
          <para>
            func_timestamp
          </para>
        </listitem>
        <listitem>
          <para>
            func_tolower
          </para>
        </listitem>
        <listitem>
          <para>
            func_toupper
          </para>
        </listitem>
      </itemizedlist>
      <section xml:id="string-toupperstring_list">
        <title>STRING toupper(STRING_LIST)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                STRING toupper(STRING_LIST s)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to uppercase.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set beresp.http.x-scream =
                std.toupper("yes!");
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="string-tolowerstring_list">
        <title>STRING tolower(STRING_LIST)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                STRING tolower(STRING_LIST s)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to lowercase.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set beresp.http.x-nice = std.tolower("VerY");
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-set_ip_tosint">
        <title>VOID set_ip_tos(INT)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID set_ip_tos(INT tos)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Sets the IP type-of-service (TOS) field for the current
                session to <emphasis>tos</emphasis>. Please note that
                the TOS field is not removed by the end of the request
                so probably want to set it on every request should you
                utilize it.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
<literallayout>if (req.url ~ ^/slow/) {
   std.set_ip_tos(0x0);
}</literallayout>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="real-randomreal-real">
        <title>REAL random(REAL, REAL)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                REAL random(REAL lo, REAL hi)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Returns a random real number between
                <emphasis>lo</emphasis> and <emphasis>hi</emphasis>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set beresp.http.x-random-number = std.random(1, 100);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-logstring_list">
        <title>VOID log(STRING_LIST)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID log(STRING_LIST s)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Logs the string <emphasis>s</emphasis> to the shared
                memory log, using VSL tag
                <emphasis>SLT_VCL_Log</emphasis>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.log("Something fishy is going on with the vhost
                " + req.host);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-syslogint-string_list">
        <title>VOID syslog(INT, STRING_LIST)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID syslog(INT priority, STRING_LIST s)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Logs the string <emphasis>s</emphasis> to syslog marked
                with <emphasis>priority</emphasis>. See your system's
                syslog.h file for the legal values of
                <emphasis>priority</emphasis>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.syslog(8 + 1, "Something is wrong");
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="string-filereadpriv_call-string">
        <title>STRING fileread(PRIV_CALL, STRING)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                STRING fileread(PRIV_CALL, STRING)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Reads a file and returns a string with the content.
                Please note that it is not recommended to send variables
                to this function the caching in the function doesn't
                take this into account. Also, files are not re-read.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set beresp.http.x-served-by =
                std.fileread("/etc/hostname");
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-collectheader">
        <title>VOID collect(HEADER)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID collect(HEADER hdr)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Collapses the header <emphasis>hdr</emphasis>, joining
                them into one.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.collect(req.http.cookie);
              </para>
              <para>
                This will collapse several Cookie: headers into one,
                long cookie header.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="duration-durationstring-duration">
        <title>DURATION duration(STRING, DURATION)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                DURATION duration(STRING s, DURATION fallback)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to seconds.
                <emphasis>s</emphasis> must be quantified with ms
                (milliseconds), s (seconds), m (minutes), h (hours), d
                (days), w (weeks) or y (years) units. If conversion
                fails, <emphasis>fallback</emphasis> will be returned.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set beresp.ttl = std.duration("1w", 3600s);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="int-integerstring-int">
        <title>INT integer(STRING, INT)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                INT integer(STRING s, INT fallback)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to an
                integer. If conversion fails,
                <emphasis>fallback</emphasis> will be returned.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
<literallayout>if (std.integer(beresp.http.x-foo, 0) &gt; 5) {
  ...
}</literallayout>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="ip-ipstring-ip">
        <title>IP ip(STRING, IP)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                IP ip(STRING s, IP fallback)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to the first
                IP number returned by the system library function
                getaddrinfo(3). If conversion fails,
                <emphasis>fallback</emphasis> will be returned.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
<literallayout>if (std.ip(req.http.X-forwarded-for, "0.0.0.0") ~ my_acl) {
  ...
}</literallayout>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="real-realstring-real">
        <title>REAL real(STRING, REAL)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                REAL real(STRING s, REAL fallback)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to a real. If
                conversion fails, <emphasis>fallback</emphasis> will be
                returned.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.http.x-real = std.real(req.http.x-foo, 0.0);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="time-real2timereal">
        <title>TIME real2time(REAL)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                TIME real2time(REAL r)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the real <emphasis>r</emphasis> to a time.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.http.x-time = std.real2time(1140618699.00);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="int-time2integertime">
        <title>INT time2integer(TIME)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                INT time2integer(TIME t)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the time <emphasis>t</emphasis> to a integer.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.http.x-int = std.time2integer(now);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="real-time2realtime">
        <title>REAL time2real(TIME)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                REAL time2real(TIME t)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the time <emphasis>t</emphasis> to a real.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.http.x-real = std.time2real(now);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="bool-healthybackend">
        <title>BOOL healthy(BACKEND)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                BOOL healthy(BACKEND be)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Returns true if the backend <emphasis>be</emphasis> is
                healthy.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="int-portip">
        <title>INT port(IP)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                INT port(IP ip)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Returns the port number of the IP address
                <emphasis>ip</emphasis>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-rollbackhttp">
        <title>VOID rollback(HTTP)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID rollback(HTTP h)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Restores the <emphasis>h</emphasis> HTTP headers to
                their original state.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.rollback(bereq);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-timestampstring">
        <title>VOID timestamp(STRING)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID timestamp(STRING s)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Introduces a timestamp in the log with the current time,
                using the string <emphasis>s</emphasis> as the label.
                This is useful to time the execution of lengthy VCL
                procedures, and makes the timestamps inserted
                automatically by Varnish more accurate.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.timestamp("curl-request");
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="string-querysortstring">
        <title>STRING querysort(STRING)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                STRING querysort(STRING)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Sorts the query string for cache normalization purposes.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.url = std.querysort(req.url);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-cache_req_bodybytes">
        <title>VOID cache_req_body(BYTES)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID cache_req_body(BYTES size)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Cache the req.body if it is smaller than
                <emphasis>size</emphasis>.
              </para>
              <para>
                Caching the req.body makes it possible to retry pass
                operations (POST, PUT).
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.cache_req_body(1KB);
              </para>
              <para>
                This will cache the req.body if its size is smaller than
                1KB.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="string-strstrstring-string">
        <title>STRING strstr(STRING, STRING)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                STRING strstr(STRING s1, STRING s2)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Returns the first occurrence of the string
                <emphasis>s2</emphasis> in the string
                <emphasis>s1</emphasis>, or an empty string if not
                found.
              </para>
              <para>
                Note that the comparison is case sensitive.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
<literallayout>if (std.strstr(req.url, req.http.x-restrict)) {
  ...
}</literallayout>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="time-timestring-time">
        <title>TIME time(STRING, TIME)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                TIME time(STRING s, TIME fallback)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to a time. If
                conversion fails, <emphasis>fallback</emphasis> will be
                returned.
              </para>
              <para>
                Supported formats:
              </para>
<literallayout>"Sun, 06 Nov 1994 08:49:37 GMT"
"Sunday, 06-Nov-94 08:49:37 GMT"
"Sun Nov 6 08:49:37 1994"
"1994-11-06T08:49:37"
"784111777.00"
"784111777"</literallayout>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
<literallayout>if (std.time(resp.http.last-modified, now) &lt; now - 1w) {
  ...
}</literallayout>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <section xml:id="see-also">
      <title>SEE ALSO</title>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            vcl(7)
          </para>
        </listitem>
        <listitem>
          <para>
            varnishd(1)
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="history">
      <title>HISTORY</title>
      <para>
        The Varnish standard module was released along with Varnish
        Cache 3.0. This manual page was written by Per Buer with help
        from Martin Blix Grydeland.
      </para>
    </section>
    <section xml:id="copyright">
      <title>COPYRIGHT</title>
      <para>
        This document is licensed under the same licence as Varnish
        itself. See LICENCE for details.
      </para>
    </section>
  </section>
</section>