<!-- Converted by db4-upgrade version 1.1 -->
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="vmod_std">
  <title>vmod_std</title>
  <section xml:id="varnish-standard-module">
    <title>Varnish Standard Module</title>
    <variablelist>
      <varlistentry>
        <term>
          Manual section
        </term>
        <listitem>
          <para>
            3
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <section xml:id="synopsis">
      <title>SYNOPSIS</title>
      <para>
        import std [from "path"] ;
      </para>
    </section>
    <section xml:id="description">
      <title>DESCRIPTION</title>
      <para>
        Vmod_std contains basic functions which are part and parcel of
        Varnish, but which for reasons of architecture fit better in a
        VMOD.
      </para>
      <para>
        One particular class of functions in vmod_std is the conversions
        functions which all have the form:
      </para>
      <programlisting>
TYPE type(STRING, TYPE)
</programlisting>
      <para>
        These functions attempt to convert STRING to the TYPE, and if
        that fails, they return the second argument, which must have the
        given TYPE.
      </para>
    </section>
    <section xml:id="contents">
      <title>CONTENTS</title>
      <itemizedlist>
        <listitem>
          <para>
            func_collect
          </para>
        </listitem>
        <listitem>
          <para>
            func_duration
          </para>
        </listitem>
        <listitem>
          <para>
            func_fileread
          </para>
        </listitem>
        <listitem>
          <para>
            func_healthy
          </para>
        </listitem>
        <listitem>
          <para>
            func_integer
          </para>
        </listitem>
        <listitem>
          <para>
            func_ip
          </para>
        </listitem>
        <listitem>
          <para>
            func_log
          </para>
        </listitem>
        <listitem>
          <para>
            func_port
          </para>
        </listitem>
        <listitem>
          <para>
            func_querysort
          </para>
        </listitem>
        <listitem>
          <para>
            func_random
          </para>
        </listitem>
        <listitem>
          <para>
            func_real
          </para>
        </listitem>
        <listitem>
          <para>
            func_real2time
          </para>
        </listitem>
        <listitem>
          <para>
            func_rollback
          </para>
        </listitem>
        <listitem>
          <para>
            func_set_ip_tos
          </para>
        </listitem>
        <listitem>
          <para>
            func_strstr
          </para>
        </listitem>
        <listitem>
          <para>
            func_syslog
          </para>
        </listitem>
        <listitem>
          <para>
            func_time2integer
          </para>
        </listitem>
        <listitem>
          <para>
            func_time2real
          </para>
        </listitem>
        <listitem>
          <para>
            func_timestamp
          </para>
        </listitem>
        <listitem>
          <para>
            func_tolower
          </para>
        </listitem>
        <listitem>
          <para>
            func_toupper
          </para>
        </listitem>
      </itemizedlist>
      <section xml:id="string-toupperstring_list">
        <title>STRING toupper(STRING_LIST)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                STRING toupper(STRING_LIST)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to upper
                case.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set beresp.http.x-scream =
                std.toupper("yes!");
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="string-tolowerstring_list">
        <title>STRING tolower(STRING_LIST)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                STRING tolower(STRING_LIST)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to lower
                case.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set beresp.http.x-nice = std.tolower("VerY");
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-set_ip_tosint">
        <title>VOID set_ip_tos(INT)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID set_ip_tos(INT)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Sets the Type-of-Service flag for the current session.
                Please note that the TOS flag is not removed by the end
                of the request so probably want to set it on every
                request should you utilize it.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                if (req.url ~ ^/slow/) {<literallayout>
</literallayout>   std.set_ip_tos(0x0);<literallayout>
</literallayout>}
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="real-randomreal-real">
        <title>REAL random(REAL, REAL)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                REAL random(REAL, REAL)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Returns a random REAL number between
                <emphasis>a</emphasis> and <emphasis>b</emphasis>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set beresp.http.x-random-number = std.random(1, 100);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-logstring_list">
        <title>VOID log(STRING_LIST)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID log(STRING_LIST)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Logs <emphasis>string</emphasis> to the shared memory
                log, using VSL tag <emphasis>SLT_VCL_Log</emphasis>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.log("Something fishy is going on with the vhost
                " + req.host);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-syslogint-string_list">
        <title>VOID syslog(INT, STRING_LIST)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID syslog(INT, STRING_LIST)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Logs <emphasis>string</emphasis> to syslog marked with
                <emphasis>priority</emphasis>. See your system's
                syslog.h file for the legal values of
                <emphasis>priority</emphasis>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.syslog(8 + 1, "Something is wrong");
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="string-filereadpriv_call-string">
        <title>STRING fileread(PRIV_CALL, STRING)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                STRING fileread(PRIV_CALL, STRING)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Reads a file and returns a string with the content.
                Please note that it is not recommended to send variables
                to this function the caching in the function doesn't
                take this into account. Also, files are not re-read.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set beresp.http.x-served-by =
                std.fileread("/etc/hostname");
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-collectheader">
        <title>VOID collect(HEADER)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID collect(HEADER)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Collapses the header, joining the headers into one.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.collect(req.http.cookie); This will collapse several
                Cookie: headers into one, long cookie header.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="duration-durationstring-duration">
        <title>DURATION duration(STRING, DURATION)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                DURATION duration(STRING, DURATION)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to seconds.
                <emphasis>s</emphasis> must be quantified with ms
                (milliseconds), s (seconds), m (minutes), h (hours), d
                (days), w (weeks) or y (years) units. If
                <emphasis>s</emphasis> fails to parse,
                <emphasis>fallback</emphasis> will be returned.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set beresp.ttl = std.duration("1w", 3600s);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="int-integerstring-int">
        <title>INT integer(STRING, INT)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                INT integer(STRING, INT)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to an
                integer. If <emphasis>s</emphasis> fails to parse,
                <emphasis>fallback</emphasis> will be returned.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                if (std.integer(beresp.http.x-foo, 0) &gt; 5) { ... }
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="ip-ipstring-ip">
        <title>IP ip(STRING, IP)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                IP ip(STRING, IP)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts string <emphasis>s</emphasis> to the first IP
                number returned by the system library function
                getaddrinfo(3). If conversion fails,
                <emphasis>fallback</emphasis> will be returned.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                if (std.ip(req.http.X-forwarded-for,
                "0.0.0.0") ~ my_acl) { ... }
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="real-realstring-real">
        <title>REAL real(STRING, REAL)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                REAL real(STRING, REAL)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the string <emphasis>s</emphasis> to a real. If
                <emphasis>s</emphasis> fails to parse,
                <emphasis>fallback</emphasis> will be returned.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.http.x-real = std.real(req.http.x-foo, 0.0);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="time-real2timereal">
        <title>TIME real2time(REAL)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                TIME real2time(REAL)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the real <emphasis>r</emphasis> to a time.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.http.x-time = std.real2time(1140618699.00);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="int-time2integertime">
        <title>INT time2integer(TIME)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                INT time2integer(TIME)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the time <emphasis>t</emphasis> to a integer.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.http.x-int = std.time2integer(now);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="real-time2realtime">
        <title>REAL time2real(TIME)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                REAL time2real(TIME)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Converts the time <emphasis>t</emphasis> to a real.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.http.x-real = std.time2real(now);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="bool-healthybackend">
        <title>BOOL healthy(BACKEND)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                BOOL healthy(BACKEND)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Returns true if the backend is healthy.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="int-portip">
        <title>INT port(IP)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                INT port(IP)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Returns the port number of an IP address.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-rollbackhttp">
        <title>VOID rollback(HTTP)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID rollback(HTTP)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Restore <emphasis>h</emphasis> HTTP headers to their
                original state.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.rollback(bereq);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="void-timestampstring">
        <title>VOID timestamp(STRING)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID timestamp(STRING)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Introduces a timestamp in the log with the current time.
                Uses the argument as the timespamp label. This is useful
                to time the execution of lengthy VCL procedures, and
                makes the timestamps inserted automatically by Varnish
                more accurate.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                std.timestamp("curl-request");
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="string-querysortstring">
        <title>STRING querysort(STRING)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                STRING querysort(STRING)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Sorts the querystring for cache normalization purposes.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.url = std.querysort(req.url);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="string-strstrstring-string">
        <title>STRING strstr(STRING, STRING)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                STRING strstr(STRING, STRING)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Returns the substring if the second string is a
                substring of the first string. Note that the comparison
                is case sensitive. You can use the tolower function on
                both strings if you want case insensitivity.
              </para>
              <blockquote>
                <para>
                  If there is no match a NULL pointer is returned which
                  would evaluate to false in an if-test.
                </para>
              </blockquote>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                if (std.strstr(req.url, req.http.x-restrict))
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <section xml:id="see-also">
      <title>SEE ALSO</title>
      <itemizedlist>
        <listitem>
          <para>
            vcl(7)
          </para>
        </listitem>
        <listitem>
          <para>
            varnishd(1)
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="history">
      <title>HISTORY</title>
      <para>
        The Varnish standard module was released along with Varnish
        Cache 3.0. This manual page was written by Per Buer with help
        from Martin Blix Grydeland.
      </para>
    </section>
    <section xml:id="copyright">
      <title>COPYRIGHT</title>
      <para>
        This document is licensed under the same licence as Varnish
        itself. See LICENCE for details.
      </para>
    </section>
  </section>
</section>