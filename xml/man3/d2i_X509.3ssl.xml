<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>d2i_X509.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>d2i_X509, i2d_X509, d2i_X509_bio, d2i_X509_fp, i2d_X509_bio,
i2d_X509_fp</refname>
<refpurpose>X509 encode and decode functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/x509.h&gt;</synopsis>
<synopsis>X509 *d2i_X509(X509 **px, const unsigned char **in, long len);
X509 *d2i_X509_AUX(X509 **px, const unsigned char **in, long len);
int i2d_X509(X509 *x, unsigned char **out);
int i2d_X509_AUX(X509 *x, unsigned char **out);</synopsis>
<synopsis>X509 *d2i_X509_bio(BIO *bp, X509 **x);
X509 *d2i_X509_fp(FILE *fp, X509 **x);</synopsis>
<synopsis>int i2d_X509_bio(BIO *bp, X509 *x);
int i2d_X509_fp(FILE *fp, X509 *x);</synopsis>
<synopsis>int i2d_re_X509_tbs(X509 *x, unsigned char **out);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-e68ecb0344ce15ec4b229f934c70f886"><title>DESCRIPTION</title>
    <para>
      The X509 encode and decode routines encode and parse an <emphasis role="bold">X509</emphasis> structure, which represents an X509
      certificate.
    </para>
    <para>
      d2i_X509() attempts to decode <emphasis role="bold">len</emphasis>
      bytes at <emphasis role="bold">*in</emphasis>. If successful a
      pointer to the <emphasis role="bold">X509</emphasis> structure is
      returned. If an error occurred then <emphasis role="bold">NULL</emphasis> is returned. If <emphasis role="bold">px</emphasis> is not <emphasis role="bold">NULL</emphasis> then the returned structure is written to
      <emphasis role="bold">*px</emphasis>. If <emphasis role="bold">*px</emphasis> is not <emphasis role="bold">NULL</emphasis> then it is assumed that <emphasis role="bold">*px</emphasis> contains a valid <emphasis role="bold">X509</emphasis> structure and an attempt is made to reuse
      it. This "reuse" capability is present for historical compatibility
      but its use is <emphasis role="bold">strongly discouraged</emphasis>
      (see BUGS below, and the discussion in the RETURN VALUES section).
    </para>
    <para>
      If the call is successful <emphasis role="bold">*in</emphasis> is
      incremented to the byte following the parsed data.
    </para>
    <para>
      d2i_X509_AUX() is similar to d2i_X509() but the input is expected to
      consist of an X509 certificate followed by auxiliary trust
      information. This is used by the PEM routines to read "TRUSTED
      CERTIFICATE" objects. This function should not be called on untrusted
      input.
    </para>
    <para>
      i2d_X509() encodes the structure pointed to by <emphasis role="bold">x</emphasis> into DER format. If <emphasis role="bold">out</emphasis> is not <emphasis role="bold">NULL</emphasis> is writes the DER encoded data to the
      buffer at <emphasis role="bold">*out</emphasis>, and increments it to
      point after the data just written. If the return value is negative an
      error occurred, otherwise it returns the length of the encoded data.
    </para>
    <para>
      If <emphasis role="bold">*out</emphasis> is <emphasis role="bold">NULL</emphasis> memory will be allocated for a buffer and
      the encoded data written to it. In this case <emphasis role="bold">*out</emphasis> is not incremented and it points to the
      start of the data just written.
    </para>
    <para>
      i2d_X509_AUX() is similar to i2d_X509(), but the encoded output
      contains both the certificate and any auxiliary trust information.
      This is used by the PEM routines to write "TRUSTED CERTIFICATE"
      objects. Note, this is a non-standard OpenSSL-specific data format.
    </para>
    <para>
      d2i_X509_bio() is similar to d2i_X509() except it attempts to parse
      data from BIO <emphasis role="bold">bp</emphasis>.
    </para>
    <para>
      d2i_X509_fp() is similar to d2i_X509() except it attempts to parse
      data from FILE pointer <emphasis role="bold">fp</emphasis>.
    </para>
    <para>
      i2d_X509_bio() is similar to i2d_X509() except it writes the encoding
      of the structure <emphasis role="bold">x</emphasis> to BIO <emphasis role="bold">bp</emphasis> and it returns 1 for success and 0 for
      failure.
    </para>
    <para>
      i2d_X509_fp() is similar to i2d_X509() except it writes the encoding
      of the structure <emphasis role="bold">x</emphasis> to BIO <emphasis role="bold">bp</emphasis> and it returns 1 for success and 0 for
      failure.
    </para>
    <para>
      i2d_re_X509_tbs() is similar to i2d_X509() except it encodes only the
      TBSCertificate portion of the certificate.
    </para>
  </refsection>
  <refsection xml:id="ID-fa1b4454e082ae030a412e5cc5049f3b"><title>NOTES</title>
    <para>
      The letters <emphasis role="bold">i</emphasis> and <emphasis role="bold">d</emphasis> in for example <emphasis role="bold">i2d_X509</emphasis> stand for "internal" (that is an
      internal C structure) and "DER". So <emphasis role="bold">i2d_X509</emphasis> converts from internal to DER. The
      "re" in <emphasis role="bold">i2d_re_X509_tbs</emphasis> stands for
      "re-encode", and ensures that a fresh encoding is generated in case
      the object has been modified after creation (see the BUGS section).
    </para>
    <para>
      The functions can also understand <emphasis role="bold">BER</emphasis> forms.
    </para>
    <para>
      The actual X509 structure passed to i2d_X509() must be a valid
      populated <emphasis role="bold">X509</emphasis> structure it can
      <emphasis role="bold">not</emphasis> simply be fed with an empty
      structure such as that returned by X509_new().
    </para>
    <para>
      The encoded data is in binary form and may contain embedded zeroes.
      Therefore any FILE pointers or BIOs should be opened in binary mode.
      Functions such as strlen() will <emphasis role="bold">not</emphasis>
      return the correct length of the encoded structure.
    </para>
    <para>
      The ways that <emphasis role="bold">*in</emphasis> and <emphasis role="bold">*out</emphasis> are incremented after the operation can
      trap the unwary. See the <emphasis role="bold">WARNINGS</emphasis>
      section for some common errors.
    </para>
    <para>
      The reason for the auto increment behaviour is to reflect a typical
      usage of ASN1 functions: after one structure is encoded or decoded
      another will processed after it.
    </para>
  </refsection>
  <refsection xml:id="ID-08d58d9de3cfc7fbc1d828cd6f995bf7"><title>EXAMPLES</title>
    <para>
      Allocate and encode the DER encoding of an X509 structure:
    </para>
    <screen>int len;
unsigned char *buf;

buf = NULL;
len = i2d_X509(x, &amp;buf);
if (len &lt; 0)
       /* error */</screen>
    <para>
      Attempt to decode a buffer:
    </para>
    <screen>X509 *x;
unsigned char *buf, *p;
int len;

/* Something to setup buf and len */
p = buf;
x = d2i_X509(NULL, &amp;p, len);

if (x == NULL)
   /* Some error */</screen>
    <para>
      Alternative technique:
    </para>
    <screen>X509 *x;
unsigned char *buf, *p;
int len;

/* Something to setup buf and len */
p = buf;
x = NULL;

if (!d2i_X509(&amp;x, &amp;p, len))
   /* Some error */

</screen>
  </refsection>
  <refsection xml:id="ID-5eec6f053b7ab8c09f6877b9ea1ee53a"><title>WARNINGS</title>
    <para>
      The use of temporary variable is mandatory. A common mistake is to
      attempt to use a buffer directly as follows:
    </para>
    <screen>int len;
unsigned char *buf;

len = i2d_X509(x, NULL);
buf = OPENSSL_malloc(len);
if (buf == NULL)
       /* error */

i2d_X509(x, &amp;buf);
/* Other stuff ... */
OPENSSL_free(buf);</screen>
    <para>
      This code will result in <emphasis role="bold">buf</emphasis>
      apparently containing garbage because it was incremented after the
      call to point after the data just written. Also <emphasis role="bold">buf</emphasis> will no longer contain the pointer
      allocated by OPENSSL_malloc() and the subsequent call to
      OPENSSL_free() may well crash.
    </para>
    <para>
      Another trap to avoid is misuse of the <emphasis role="bold">xp</emphasis> argument to d2i_X509():
    </para>
    <screen>X509 *x;

if (!d2i_X509(&amp;x, &amp;p, len))
       /* Some error */</screen>
    <para>
      This will probably crash somewhere in d2i_X509(). The reason for this
      is that the variable <emphasis role="bold">x</emphasis> is
      uninitialized and an attempt will be made to interpret its (invalid)
      value as an <emphasis role="bold">X509</emphasis> structure,
      typically causing a segmentation violation. If <emphasis role="bold">x</emphasis> is set to NULL first then this will not
      happen.
    </para>
  </refsection>
  <refsection xml:id="ID-ebbb6e8c9d1edb065374e10cfb7d8322"><title>BUGS</title>
    <para>
      In some versions of OpenSSL the "reuse" behaviour of d2i_X509() when
      <emphasis role="bold">*px</emphasis> is valid is broken and some
      parts of the reused structure may persist if they are not present in
      the new one. As a result the use of this "reuse" behaviour is
      strongly discouraged.
    </para>
    <para>
      i2d_X509() will not return an error in many versions of OpenSSL, if
      mandatory fields are not initialized due to a programming error then
      the encoded structure may contain invalid data or omit the fields
      entirely and will not be parsed by d2i_X509(). This may be fixed in
      future so code should not assume that i2d_X509() will always succeed.
    </para>
    <para>
      The encoding of the TBSCertificate portion of a certificate is cached
      in the <emphasis role="bold">X509</emphasis> structure internally to
      improve encoding performance and to ensure certificate signatures are
      verified correctly in some certificates with broken (non-DER)
      encodings.
    </para>
    <para>
      Any function which encodes an X509 structure such as i2d_X509(),
      i2d_X509_fp() or i2d_X509_bio() may return a stale encoding if the
      <emphasis role="bold">X509</emphasis> structure has been modified
      after deserialization or previous serialization.
    </para>
    <para>
      If, after modification, the <emphasis role="bold">X509</emphasis>
      object is re-signed with X509_sign(), the encoding is automatically
      renewed. Otherwise, the encoding of the TBSCertificate portion of the
      <emphasis role="bold">X509</emphasis> can be manually renewed by
      calling i2d_re_X509_tbs().
    </para>
  </refsection>
  <refsection xml:id="ID-c00f86645b31bc1c18323cb6b48277ed"><title>RETURN VALUES</title>
    <para>
      d2i_X509(), d2i_X509_bio() and d2i_X509_fp() return a valid <emphasis role="bold">X509</emphasis> structure or <emphasis role="bold">NULL</emphasis> if an error occurs. The error code that
      can be obtained by <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>. If the "reuse" capability has been used with a valid
      X509 structure being passed in via <emphasis role="bold">px</emphasis> then the object is not freed in the event
      of error but may be in a potentially invalid or inconsistent state.
    </para>
    <para>
      i2d_X509() returns the number of bytes successfully encoded or a
      negative value if an error occurs. The error code can be obtained by
      <citerefentry> <refentrytitle>ERR_get_error</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
    <para>
      i2d_X509_bio() and i2d_X509_fp() return 1 for success and 0 if an
      error occurs The error code can be obtained by <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-f36840e3e6936e20a2bdefa2544580ef"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ERR_get_error</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> <citerefentry>
      <refentrytitle>X509_CRL_get0_by_serial</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get0_signature</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get_ext_d2i</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get_extension_flags</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get_pubkey</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get_subject_name</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_NAME_add_entry_by_txt</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_NAME_ENTRY_get_object</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_NAME_get_index_by_NID</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_NAME_print_ex</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>X509_sign</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>X509V3_get_d2i</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_verify_cert</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-1bda7592d400432e269f80f578584919"><title>COPYRIGHT</title>
    <para>
      Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>