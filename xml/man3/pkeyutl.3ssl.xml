<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>pkeyutl.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>pkeyutl</refname>
<refpurpose>public key algorithm utility</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis><emphasis role="bold">openssl</emphasis> <emphasis role="bold">pkeyutl</emphasis>
[<emphasis role="bold">-in file</emphasis>]
[<emphasis role="bold">-out file</emphasis>]
[<emphasis role="bold">-sigfile file</emphasis>]
[<emphasis role="bold">-inkey file</emphasis>]
[<emphasis role="bold">-keyform PEM|DER|ENGINE</emphasis>]
[<emphasis role="bold">-passin arg</emphasis>]
[<emphasis role="bold">-peerkey file</emphasis>]
[<emphasis role="bold">-peerform PEM|DER|ENGINE</emphasis>]
[<emphasis role="bold">-pubin</emphasis>]
[<emphasis role="bold">-certin</emphasis>]
[<emphasis role="bold">-rev</emphasis>]
[<emphasis role="bold">-sign</emphasis>]
[<emphasis role="bold">-verify</emphasis>]
[<emphasis role="bold">-verifyrecover</emphasis>]
[<emphasis role="bold">-encrypt</emphasis>]
[<emphasis role="bold">-decrypt</emphasis>]
[<emphasis role="bold">-derive</emphasis>]
[<emphasis role="bold">-pkeyopt opt:value</emphasis>]
[<emphasis role="bold">-hexdump</emphasis>]
[<emphasis role="bold">-asn1parse</emphasis>]
[<emphasis role="bold">-engine id</emphasis>]</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-bd5bdd9a190b60630e698ec29abf5547"><title>DESCRIPTION</title>
    <para>
      The <emphasis role="bold">pkeyutl</emphasis> command can be used to
      perform public key operations using any supported algorithm.
    </para>
  </refsection>
  <refsection xml:id="ID-a6e41730c3866e246a3eee25d6fbce8b"><title>COMMAND OPTIONS</title>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">-in filename</emphasis></term>
          <listitem>
            <para>
	      This specifies the input filename to read data from or
	      standard input if this option is not specified.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-out filename</emphasis></term>
          <listitem>
            <para>
	      specifies the output filename to write to or standard output
	      by default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-inkey file</emphasis></term>
          <listitem>
            <para>
	      the input key file, by default it should be a private key.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-keyform PEM|DER|ENGINE</emphasis></term>
          <listitem>
            <para>
	      the key format PEM, DER or ENGINE.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-passin arg</emphasis></term>
          <listitem>
            <para>
	      the input key password source. For more information about the
	      format of <emphasis role="bold">arg</emphasis> see the
	      <emphasis role="bold">PASS PHRASE ARGUMENTS</emphasis>
	      section in <citerefentry>
	      <refentrytitle>openssl</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry>.
            </para>
            <screen></screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-peerkey file</emphasis></term>
          <listitem>
            <para>
	      the peer key file, used by key derivation (agreement)
	      operations.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-peerform PEM|DER|ENGINE</emphasis></term>
          <listitem>
            <para>
	      the peer key format PEM, DER or ENGINE.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-engine id</emphasis></term>
          <listitem>
            <para>
	      specifying an engine (by its unique <emphasis role="bold">id</emphasis> string) will cause <emphasis role="bold">pkeyutl</emphasis> to attempt to obtain a
	      functional reference to the specified engine, thus
	      initialising it if needed. The engine will then be set as the
	      default for all available algorithms.
            </para>
            <screen></screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-pubin</emphasis></term>
          <listitem>
            <para>
	      the input file is a public key.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-certin</emphasis></term>
          <listitem>
            <para>
	      the input is a certificate containing a public key.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-rev</emphasis></term>
          <listitem>
            <para>
	      reverse the order of the input buffer. This is useful for
	      some libraries (such as CryptoAPI) which represent the buffer
	      in little endian format.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-sign</emphasis></term>
          <listitem>
            <para>
	      sign the input data and output the signed result. This
	      requires a private key.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify</emphasis></term>
          <listitem>
            <para>
	      verify the input data against the signature file and indicate
	      if the verification succeeded or failed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verifyrecover</emphasis></term>
          <listitem>
            <para>
	      verify the input data and output the recovered data.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-encrypt</emphasis></term>
          <listitem>
            <para>
	      encrypt the input data using a public key.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-decrypt</emphasis></term>
          <listitem>
            <para>
	      decrypt the input data using a private key.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-derive</emphasis></term>
          <listitem>
            <para>
	      derive a shared secret using the peer key.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-hexdump</emphasis></term>
          <listitem>
            <para>
	      hex dump the output data.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-asn1parse</emphasis></term>
          <listitem>
            <para>
	      asn1parse the output data, this is useful when combined with
	      the <emphasis role="bold">-verifyrecover</emphasis> option
	      when an ASN1 structure is signed.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-5f867125d5764886482fd7c2b57610f5"><title>NOTES</title>
    <para>
      The operations and options supported vary according to the key
      algorithm and its implementation. The OpenSSL operations and options
      are indicated below.
    </para>
    <para>
      Unless otherwise mentioned all algorithms support the <emphasis role="bold">digest:alg</emphasis> option which specifies the digest
      in use for sign, verify and verifyrecover operations. The value
      <emphasis role="bold">alg</emphasis> should represent a digest name
      as used in the EVP_get_digestbyname() function for example <emphasis role="bold">sha1</emphasis>. This value is used only for
      sanity-checking the lengths of data passed in to the <emphasis role="bold">pkeyutl</emphasis> and for creating the structures that
      make up the signature (e.g. <emphasis role="bold">DigestInfo</emphasis> in RSASSA PKCS#1 v1.5 signatures).
      In case of RSA, ECDSA and DSA signatures, this utility will not
      perform hashing on input data but rather use the data directly as
      input of signature algorithm. Depending on key type, signature type
      and mode of padding, the maximum acceptable lengths of input data
      differ. In general, with RSA the signed data can't be longer than the
      key modulus, in case of ECDSA and DSA the data shouldn't be longer
      than field size, otherwise it will be silently truncated to field
      size.
    </para>
    <para>
      In other words, if the value of digest is <emphasis role="bold">sha1</emphasis> the input should be 20 bytes long binary
      encoding of SHA-1 hash function output.
    </para>
  </refsection>
  <refsection xml:id="ID-e9e63ca4806d39aefb3ca0395bcdc01a"><title>RSA ALGORITHM</title>
    <para>
      The RSA algorithm generally supports the encrypt, decrypt, sign,
      verify and verifyrecover operations. However, some padding modes
      support only a subset of these operations. The following additional
      <emphasis role="bold">pkeyopt</emphasis> values are supported:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">rsa_padding_mode:mode</emphasis></term>
          <listitem>
            <para>
	      This sets the RSA padding mode. Acceptable values for
	      <emphasis role="bold">mode</emphasis> are <emphasis role="bold">pkcs1</emphasis> for PKCS#1 padding, <emphasis role="bold">sslv23</emphasis> for SSLv23 padding, <emphasis role="bold">none</emphasis> for no padding, <emphasis role="bold">oaep</emphasis> for <emphasis role="bold">OAEP</emphasis> mode, <emphasis role="bold">x931</emphasis> for X9.31 mode and <emphasis role="bold">pss</emphasis> for PSS.
            </para>
            <para>
	      In PKCS#1 padding if the message digest is not set then the
	      supplied data is signed or verified directly instead of using
	      a <emphasis role="bold">DigestInfo</emphasis> structure. If a
	      digest is set then the a <emphasis role="bold">DigestInfo</emphasis> structure is used and its
	      the length must correspond to the digest type.
            </para>
            <para>
	      For <emphasis role="bold">oaep</emphasis> mode only
	      encryption and decryption is supported.
            </para>
            <para>
	      For <emphasis role="bold">x931</emphasis> if the digest type
	      is set it is used to format the block data otherwise the
	      first byte is used to specify the X9.31 digest ID. Sign,
	      verify and verifyrecover are can be performed in this mode.
            </para>
            <para>
	      For <emphasis role="bold">pss</emphasis> mode only sign and
	      verify are supported and the digest type must be specified.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">rsa_pss_saltlen:len</emphasis></term>
          <listitem>
            <para>
	      For <emphasis role="bold">pss</emphasis> mode only this
	      option specifies the salt length. Two special values are
	      supported: -1 sets the salt length to the digest length. When
	      signing -2 sets the salt length to the maximum permissible
	      value. When verifying -2 causes the salt length to be
	      automatically determined based on the <emphasis role="bold">PSS</emphasis> block structure.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-28b733b0217effac0d3009920dfebed4"><title>DSA ALGORITHM</title>
    <para>
      The DSA algorithm supports signing and verification operations only.
      Currently there are no additional options other than <emphasis role="bold">digest</emphasis>. Only the SHA1 digest can be used and
      this digest is assumed by default.
    </para>
  </refsection>
  <refsection xml:id="ID-74b744e74c9aec4371805220b77d0605"><title>DH ALGORITHM</title>
    <para>
      The DH algorithm only supports the derivation operation and no
      additional options.
    </para>
  </refsection>
  <refsection xml:id="ID-7d4645bd79aef6bc9e34346989d8f5f4"><title>EC ALGORITHM</title>
    <para>
      The EC algorithm supports sign, verify and derive operations. The
      sign and verify operations use ECDSA and derive uses ECDH. Currently
      there are no additional options other than <emphasis role="bold">digest</emphasis>. Only the SHA1 digest can be used and
      this digest is assumed by default.
    </para>
  </refsection>
  <refsection xml:id="ID-87da6eb0dca2baf17ab1451937080767"><title>EXAMPLES</title>
    <para>
      Sign some data using a private key:
    </para>
    <screen>openssl pkeyutl -sign -in file -inkey key.pem -out sig</screen>
    <para>
      Recover the signed data (e.g. if an RSA key is used):
    </para>
    <screen>openssl pkeyutl -verifyrecover -in sig -inkey key.pem</screen>
    <para>
      Verify the signature (e.g. a DSA key):
    </para>
    <screen>openssl pkeyutl -verify -in file -sigfile sig -inkey key.pem</screen>
    <para>
      Sign data using a message digest value (this is currently only valid
      for RSA):
    </para>
    <screen>openssl pkeyutl -sign -in file -inkey key.pem -out sig -pkeyopt digest:sha256</screen>
    <para>
      Derive a shared secret value:
    </para>
    <screen>openssl pkeyutl -derive -inkey key.pem -peerkey pubkey.pem -out secret</screen>
  </refsection>
  <refsection xml:id="ID-63501e09b12ddd92b55147f481f68edd"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>genpkey</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>pkey</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>rsautl</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry> <citerefentry>
      <refentrytitle>dgst</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>rsa</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>genrsa</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>
    </para>
  </refsection>
</refentry>