<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EVP_DigestInit.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EVP_MD_CTX_new, EVP_MD_CTX_reset, EVP_MD_CTX_free, EVP_MD_CTX_copy_ex,
EVP_DigestInit_ex, EVP_DigestUpdate, EVP_DigestFinal_ex,
EVP_DigestInit, EVP_DigestFinal, EVP_MD_CTX_copy, EVP_MD_type,
EVP_MD_pkey_type, EVP_MD_size, EVP_MD_block_size, EVP_MD_CTX_md, EVP_MD_CTX_size,
EVP_MD_CTX_block_size, EVP_MD_CTX_type, EVP_md_null, EVP_md2, EVP_md5, EVP_sha1,
EVP_sha224, EVP_sha256, EVP_sha384, EVP_sha512, EVP_mdc2,
EVP_ripemd160, EVP_blake2b_512, EVP_blake2s_256, EVP_get_digestbyname,
EVP_get_digestbynid, EVP_get_digestbyobj</refname>
<refpurpose>EVP digest routines</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis>EVP_MD_CTX *EVP_MD_CTX_new(void);
int EVP_MD_CTX_reset(EVP_MD_CTX *ctx);
void EVP_MD_CTX_free(EVP_MD_CTX *ctx);</synopsis>
<synopsis>int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt);
int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md,
       unsigned int *s);</synopsis>
<synopsis>int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out,const EVP_MD_CTX *in);</synopsis>
<synopsis>int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type);
int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md,
       unsigned int *s);</synopsis>
<synopsis>int EVP_MD_CTX_copy(EVP_MD_CTX *out,EVP_MD_CTX *in);</synopsis>
<synopsis>int EVP_MD_type(const EVP_MD *md);
int EVP_MD_pkey_type(const EVP_MD *md);
int EVP_MD_size(const EVP_MD *md);
int EVP_MD_block_size(const EVP_MD *md);</synopsis>
<synopsis>const EVP_MD *EVP_MD_CTX_md(const EVP_MD_CTX *ctx);
int EVP_MD_CTX_size(const EVP_MD *ctx);
int EVP_MD_CTX_block_size(const EVP_MD *ctx);
int EVP_MD_CTX_type(const EVP_MD *ctx);</synopsis>
<synopsis>const EVP_MD *EVP_md_null(void);
const EVP_MD *EVP_md2(void);
const EVP_MD *EVP_md5(void);
const EVP_MD *EVP_sha1(void);
const EVP_MD *EVP_mdc2(void);
const EVP_MD *EVP_ripemd160(void);
const EVP_MD *EVP_blake2b_512(void);
const EVP_MD *EVP_blake2s_256(void);</synopsis>
<synopsis>const EVP_MD *EVP_sha224(void);
const EVP_MD *EVP_sha256(void);
const EVP_MD *EVP_sha384(void);
const EVP_MD *EVP_sha512(void);</synopsis>
<synopsis>const EVP_MD *EVP_get_digestbyname(const char *name);
const EVP_MD *EVP_get_digestbynid(int type);
const EVP_MD *EVP_get_digestbyobj(const ASN1_OBJECT *o);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-1e44a918862b854d3d121576e8992b74"><title>DESCRIPTION</title>
    <para>
      The EVP digest routines are a high level interface to message
      digests, and should be used instead of the cipher-specific functions.
    </para>
    <para>
      EVP_MD_CTX_new() allocates, initializes and returns a digest context.
    </para>
    <para>
      EVP_MD_CTX_reset() resets the digest context <emphasis role="bold">ctx</emphasis>.  This can be used to reuse an already
      existing context.
    </para>
    <para>
      EVP_MD_CTX_free() cleans up digest context <emphasis role="bold">ctx</emphasis> and frees up the space allocated to it.
    </para>
    <para>
      EVP_DigestInit_ex() sets up digest context <emphasis role="bold">ctx</emphasis> to use a digest <emphasis role="bold">type</emphasis> from ENGINE <emphasis role="bold">impl</emphasis>. <emphasis role="bold">ctx</emphasis>
      must be initialized before calling this function. <emphasis role="bold">type</emphasis> will typically be supplied by a function
      such as EVP_sha1(). If <emphasis role="bold">impl</emphasis> is NULL
      then the default implementation of digest <emphasis role="bold">type</emphasis> is used.
    </para>
    <para>
      EVP_DigestUpdate() hashes <emphasis role="bold">cnt</emphasis> bytes
      of data at <emphasis role="bold">d</emphasis> into the digest context
      <emphasis role="bold">ctx</emphasis>. This function can be called
      several times on the same <emphasis role="bold">ctx</emphasis> to
      hash additional data.
    </para>
    <para>
      EVP_DigestFinal_ex() retrieves the digest value from <emphasis role="bold">ctx</emphasis> and places it in <emphasis role="bold">md</emphasis>. If the <emphasis role="bold">s</emphasis>
      parameter is not NULL then the number of bytes of data written (i.e.
      the length of the digest) will be written to the integer at <emphasis role="bold">s</emphasis>, at most <emphasis role="bold">EVP_MAX_MD_SIZE</emphasis> bytes will be written. After
      calling EVP_DigestFinal_ex() no additional calls to
      EVP_DigestUpdate() can be made, but EVP_DigestInit_ex() can be called
      to initialize a new digest operation.
    </para>
    <para>
      EVP_MD_CTX_copy_ex() can be used to copy the message digest state
      from <emphasis role="bold">in</emphasis> to <emphasis role="bold">out</emphasis>. This is useful if large amounts of data
      are to be hashed which only differ in the last few bytes. <emphasis role="bold">out</emphasis> must be initialized before calling this
      function.
    </para>
    <para>
      EVP_DigestInit() behaves in the same way as EVP_DigestInit_ex()
      except the passed context <emphasis role="bold">ctx</emphasis> does
      not have to be initialized, and it always uses the default digest
      implementation.
    </para>
    <para>
      EVP_DigestFinal() is similar to EVP_DigestFinal_ex() except the
      digest context <emphasis role="bold">ctx</emphasis> is automatically
      cleaned up.
    </para>
    <para>
      EVP_MD_CTX_copy() is similar to EVP_MD_CTX_copy_ex() except the
      destination <emphasis role="bold">out</emphasis> does not have to be
      initialized.
    </para>
    <para>
      EVP_MD_size() and EVP_MD_CTX_size() return the size of the message
      digest when passed an <emphasis role="bold">EVP_MD</emphasis> or an
      <emphasis role="bold">EVP_MD_CTX</emphasis> structure, i.e. the size
      of the hash.
    </para>
    <para>
      EVP_MD_block_size() and EVP_MD_CTX_block_size() return the block size
      of the message digest when passed an <emphasis role="bold">EVP_MD</emphasis> or an <emphasis role="bold">EVP_MD_CTX</emphasis> structure.
    </para>
    <para>
      EVP_MD_type() and EVP_MD_CTX_type() return the NID of the OBJECT
      IDENTIFIER representing the given message digest when passed an
      <emphasis role="bold">EVP_MD</emphasis> structure. For example
      EVP_MD_type(EVP_sha1()) returns <emphasis role="bold">NID_sha1</emphasis>. This function is normally used when
      setting ASN1 OIDs.
    </para>
    <para>
      EVP_MD_CTX_md() returns the <emphasis role="bold">EVP_MD</emphasis>
      structure corresponding to the passed <emphasis role="bold">EVP_MD_CTX</emphasis>.
    </para>
    <para>
      EVP_MD_pkey_type() returns the NID of the public key signing
      algorithm associated with this digest. For example EVP_sha1() is
      associated with RSA so this will return <emphasis role="bold">NID_sha1WithRSAEncryption</emphasis>. Since digests and
      signature algorithms are no longer linked this function is only
      retained for compatibility reasons.
    </para>
    <para>
      EVP_md2(), EVP_md5(), EVP_sha1(), EVP_sha224(), EVP_sha256(),
      EVP_sha384(), EVP_sha512(), EVP_mdc2(), EVP_ripemd160(),
      EVP_blake2b_512(), and EVP_blake2s_256() return <emphasis role="bold">EVP_MD</emphasis> structures for the MD2, MD5, SHA1,
      SHA224, SHA256, SHA384, SHA512, MDC2, RIPEMD160, BLAKE2b-512, and
      BLAKE2s-256 digest algorithms respectively.
    </para>
    <para>
      EVP_md_null() is a "null" message digest that does nothing: i.e. the
      hash it returns is of zero length.
    </para>
    <para>
      EVP_get_digestbyname(), EVP_get_digestbynid() and
      EVP_get_digestbyobj() return an <emphasis role="bold">EVP_MD</emphasis> structure when passed a digest name, a
      digest NID or an ASN1_OBJECT structure respectively.
    </para>
  </refsection>
  <refsection xml:id="ID-591dcf0dc0c7a9d77e3f69025687e5c8"><title>RETURN VALUES</title>
    <para>
      EVP_DigestInit_ex(), EVP_DigestUpdate() and EVP_DigestFinal_ex()
      return 1 for success and 0 for failure.
    </para>
    <para>
      EVP_MD_CTX_copy_ex() returns 1 if successful or 0 for failure.
    </para>
    <para>
      EVP_MD_type(), EVP_MD_pkey_type() and EVP_MD_type() return the NID of
      the corresponding OBJECT IDENTIFIER or NID_undef if none exists.
    </para>
    <para>
      EVP_MD_size(), EVP_MD_block_size(), EVP_MD_CTX_size() and
      EVP_MD_CTX_block_size() return the digest or block size in bytes.
    </para>
    <para>
      EVP_md_null(), EVP_md2(), EVP_md5(), EVP_sha1(), EVP_mdc2(),
      EVP_ripemd160(), EVP_blake2b_512(), and EVP_blake2s_256() return
      pointers to the corresponding EVP_MD structures.
    </para>
    <para>
      EVP_get_digestbyname(), EVP_get_digestbynid() and
      EVP_get_digestbyobj() return either an <emphasis role="bold">EVP_MD</emphasis> structure or NULL if an error occurs.
    </para>
  </refsection>
  <refsection xml:id="ID-d4dc832f03ba9180e606aaff21defb9e"><title>NOTES</title>
    <para>
      The <emphasis role="bold">EVP</emphasis> interface to message digests
      should almost always be used in preference to the low level
      interfaces. This is because the code then becomes transparent to the
      digest used and much more flexible.
    </para>
    <para>
      New applications should use the SHA2 digest algorithms such as
      SHA256. The other digest algorithms are still in common use.
    </para>
    <para>
      For most applications the <emphasis role="bold">impl</emphasis>
      parameter to EVP_DigestInit_ex() will be set to NULL to use the
      default digest implementation.
    </para>
    <para>
      The functions EVP_DigestInit(), EVP_DigestFinal() and
      EVP_MD_CTX_copy() are obsolete but are retained to maintain
      compatibility with existing code. New applications should use
      EVP_DigestInit_ex(), EVP_DigestFinal_ex() and EVP_MD_CTX_copy_ex()
      because they can efficiently reuse a digest context instead of
      initializing and cleaning it up on each call and allow non default
      implementations of digests to be specified.
    </para>
    <para>
      If digest contexts are not cleaned up after use memory leaks will
      occur.
    </para>
    <para>
      EVP_MD_CTX_size(), EVP_MD_CTX_block_size(), EVP_MD_CTX_type(),
      EVP_get_digestbynid() and EVP_get_digestbyobj() are defined as
      macros.
    </para>
    <screen></screen>
  </refsection>
  <refsection xml:id="ID-e88165902db138d8dd16e9dbd586f8ac"><title>EXAMPLE</title>
    <para>
      This example digests the data "Test Message\n" and "Hello World\n",
      using the digest name passed on the command line.
    </para>
    <screen>#include &lt;stdio.h&amp;gt;
#include &amp;lt;openssl/evp.h&amp;gt;

main(int argc, char *argv[])
{
EVP_MD_CTX *mdctx;
const EVP_MD *md;
char mess1[] = "Test Message\n";
char mess2[] = "Hello World\n";
unsigned char md_value[EVP_MAX_MD_SIZE];
int md_len, i;

if(!argv[1]) {
       printf("Usage: mdtest digestname\n");
       exit(1);
}

md = EVP_get_digestbyname(argv[1]);

if(!md) {
       printf("Unknown message digest %s\n", argv[1]);
       exit(1);
}

mdctx = EVP_MD_CTX_new();
EVP_DigestInit_ex(mdctx, md, NULL);
EVP_DigestUpdate(mdctx, mess1, strlen(mess1));
EVP_DigestUpdate(mdctx, mess2, strlen(mess2));
EVP_DigestFinal_ex(mdctx, md_value, &amp;md_len);
EVP_MD_CTX_free(mdctx);

printf("Digest is: ");
for(i = 0; i &lt; md_len; i++)
       printf("%02x", md_value[i]);
printf("\n");

exit(0);
}</screen>
  </refsection>
  <refsection xml:id="ID-2541c638e67b7e620ff5bed817b628d7"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>dgst</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>evp</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-ae89e0931b0e8204b37da86d036a55cc"><title>HISTORY</title>
    <para>
      <emphasis role="bold">EVP_MD_CTX</emphasis> became opaque in OpenSSL
      1.1.  Consequently, stack allocated <emphasis role="bold">EVP_MD_CTX</emphasis>s are no longer supported.
    </para>
    <para>
      EVP_MD_CTX_create() and EVP_MD_CTX_destroy() were renamed to
      EVP_MD_CTX_new() and EVP_MD_CTX_free() in OpenSSL 1.1.
    </para>
    <para>
      The link between digests and signing algorithms was fixed in OpenSSL
      1.0 and later, so now EVP_sha1() can be used with RSA and DSA. The
      legacy EVP_dss1() was removed in OpenSSL 1.1.0
    </para>
  </refsection>
  <refsection xml:id="ID-ab0c22eef03b7c1e80e3b3cbe5600c27"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>