<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>X509_check_host.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>X509_check_host, X509_check_email, X509_check_ip, X509_check_ip_asc</refname>
<refpurpose>X.509 certificate matching</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/x509.h&gt;</synopsis>
<synopsis>int X509_check_host(X509 *, const char *name, size_t namelen,
                    unsigned int flags, char **peername);
int X509_check_email(X509 *, const char *address, size_t addresslen,
                     unsigned int flags);
int X509_check_ip(X509 *, const unsigned char *address, size_t addresslen,
                  unsigned int flags);
int X509_check_ip_asc(X509 *, const char *address, unsigned int flags);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-06927de909ad5c2efeb8d01ed452832d"><title>DESCRIPTION</title>
    <para>
      The certificate matching functions are used to check whether a
      certificate matches a given host name, email address, or IP address.
      The validity of the certificate and its trust level has to be checked
      by other means.
    </para>
    <para>
      X509_check_host() checks if the certificate Subject Alternative Name
      (SAN) or Subject CommonName (CN) matches the specified host name,
      which must be encoded in the preferred name syntax described in
      section 3.5 of RFC 1034.	By default, wildcards are supported and
      they match  only in the left-most label; but they may match part of
      that label with an explicit prefix or suffix.  For example, by
      default, the host <emphasis role="bold">name</emphasis>
      "www.example.com" would match a certificate with a SAN or CN value of
      "*.example.com", "w*.example.com" or "*w.example.com".
    </para>
    <para>
      Per section 6.4.2 of RFC 6125, <emphasis role="bold">name</emphasis>
      values representing international domain names must be given in
      A-label form.  The <emphasis role="bold">namelen</emphasis> argument
      must be the number of characters in the name string or zero in which
      case the length is calculated with strlen(<emphasis role="bold">name</emphasis>).  When <emphasis role="bold">name</emphasis> starts with a dot (e.g ".example.com"),
      it will be matched by a certificate valid for any sub-domain of
      <emphasis role="bold">name</emphasis>, (see also <emphasis role="bold">X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS</emphasis>
      below).
    </para>
    <para>
      When the certificate is matched, and <emphasis role="bold">peername</emphasis> is not NULL, a pointer to a copy of
      the matching SAN or CN from the peer certificate is stored at the
      address passed in <emphasis role="bold">peername</emphasis>.  The
      application is responsible for freeing the peername via
      OPENSSL_free() when it is no longer needed.
    </para>
    <para>
      X509_check_email() checks if the certificate matches the specified
      email <emphasis role="bold">address</emphasis>.  Only the mailbox
      syntax of RFC 822 is supported, comments are not allowed, and no
      attempt is made to normalize quoted characters.  The <emphasis role="bold">addresslen</emphasis> argument must be the number of
      characters in the address string or zero in which case the length is
      calculated with strlen(<emphasis role="bold">address</emphasis>).
    </para>
    <para>
      X509_check_ip() checks if the certificate matches a specified IPv4 or
      IPv6 address.  The <emphasis role="bold">address</emphasis> array is
      in binary format, in network byte order.	The length is either 4
      (IPv4) or 16 (IPv6).  Only explicitly marked addresses in the
      certificates are considered; IP addresses stored in DNS names and
      Common Names are ignored.
    </para>
    <para>
      X509_check_ip_asc() is similar, except that the NUL-terminated string
      <emphasis role="bold">address</emphasis> is first converted to the
      internal representation.
    </para>
    <para>
      The <emphasis role="bold">flags</emphasis> argument is usually 0.  It
      can be the bitwise OR of the flags:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT</emphasis>,</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_CHECK_FLAG_NEVER_CHECK_SUBJECT</emphasis>,</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_CHECK_FLAG_NO_WILDCARDS</emphasis>,</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS</emphasis>,</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS</emphasis>.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS</emphasis>.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      The <emphasis role="bold">X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT</emphasis> flag
      causes the function to consider the subject DN even if the
      certificate contains at least one subject alternative name of the
      right type (DNS name or email address as appropriate); the default is
      to ignore the subject DN when at least one corresponding subject
      alternative names is present.
    </para>
    <para>
      The <emphasis role="bold">X509_CHECK_FLAG_NEVER_CHECK_SUBJECT</emphasis> flag
      causes the function to never consider the subject DN even if the
      certificate contains no subject alternative names of the right type
      (DNS name or email address as appropriate); the default is to use the
      subject DN when no corresponding subject alternative names are
      present.
    </para>
    <para>
      If set, <emphasis role="bold">X509_CHECK_FLAG_NO_WILDCARDS</emphasis>
      disables wildcard expansion; this only applies to <emphasis role="bold">X509_check_host</emphasis>.
    </para>
    <para>
      If set, <emphasis role="bold">X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS</emphasis>
      suppresses support for "*" as wildcard pattern in labels that have a
      prefix or suffix, such as: "www*" or "*www"; this only applies to
      <emphasis role="bold">X509_check_host</emphasis>.
    </para>
    <para>
      If set, <emphasis role="bold">X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS</emphasis> allows a
      "*" that constitutes the complete label of a DNS name (e.g.
      "*.example.com") to match more than one label in <emphasis role="bold">name</emphasis>; this flag only applies to <emphasis role="bold">X509_check_host</emphasis>.
    </para>
    <para>
      If set, <emphasis role="bold">X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS</emphasis>
      restricts <emphasis role="bold">name</emphasis> values which start
      with ".", that would otherwise match any sub-domain in the peer
      certificate, to only match direct child sub-domains. Thus, for
      instance, with this flag set a <emphasis role="bold">name</emphasis>
      of ".example.com" would match a peer certificate with a DNS name of
      "www.example.com", but would not match a peer certificate with a DNS
      name of "www.sub.example.com"; this flag only applies to <emphasis role="bold">X509_check_host</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-abea7083e347013cce98fb95200ad278"><title>RETURN VALUES</title>
    <para>
      The functions return 1 for a successful match, 0 for a failed match
      and -1 for an internal error: typically a memory allocation failure
      or an ASN.1 decoding error.
    </para>
    <para>
      All functions can also return -2 if the input is malformed. For
      example, X509_check_host() returns -2 if the provided <emphasis role="bold">name</emphasis> contains embedded NULs.
    </para>
  </refsection>
  <refsection xml:id="ID-f0e85c76ba686121663bc2a70dbcf16b"><title>NOTES</title>
    <para>
      Applications are encouraged to use X509_VERIFY_PARAM_set1_host()
      rather than explicitly calling <citerefentry>
      <refentrytitle>X509_check_host</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>. Host name checks are out of
      scope with the DANE-EE(3) certificate usage, and the internal checks
      will be suppressed as appropriate when DANE support is added to
      OpenSSL.
    </para>
  </refsection>
  <refsection xml:id="ID-d2cbd5237125d602cf515836762c00df"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>SSL_get_verify_result</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_VERIFY_PARAM_set1_host</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_VERIFY_PARAM_add1_host</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_VERIFY_PARAM_set1_email</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_VERIFY_PARAM_set1_ip</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_VERIFY_PARAM_set1_ipasc</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-986b7eb39f73ca27e9c307faa4da0e5d"><title>HISTORY</title>
    <para>
      These functions were added in OpenSSL 1.0.2.
    </para>
  </refsection>
</refentry>