<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>pkcs8.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>pkcs8</refname>
<refpurpose>PKCS#8 format private key conversion tool</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific"><emphasis role="bold">openssl</emphasis> <emphasis role="bold">pkcs8</emphasis>
[<emphasis role="bold">-topk8</emphasis>]
[<emphasis role="bold">-inform PEM|DER</emphasis>]
[<emphasis role="bold">-outform PEM|DER</emphasis>]
[<emphasis role="bold">-in filename</emphasis>]
[<emphasis role="bold">-passin arg</emphasis>]
[<emphasis role="bold">-out filename</emphasis>]
[<emphasis role="bold">-passout arg</emphasis>]
[<emphasis role="bold">-iter count</emphasis>]
[<emphasis role="bold">-noiter</emphasis>]
[<emphasis role="bold">-nocrypt</emphasis>]
[<emphasis role="bold">-nooct</emphasis>]
[<emphasis role="bold">-embed</emphasis>]
[<emphasis role="bold">-nsdb</emphasis>]
[<emphasis role="bold">-v2 alg</emphasis>]
[<emphasis role="bold">-v2prf alg</emphasis>]
[<emphasis role="bold">-v1 alg</emphasis>]
[<emphasis role="bold">-engine id</emphasis>]
[<emphasis role="bold">-scrypt</emphasis>]
[<emphasis role="bold">-scrypt_N N</emphasis>]
[<emphasis role="bold">-scrypt_r r</emphasis>]
[<emphasis role="bold">-scrypt_p p</emphasis>]</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.apps.pkcs8.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      The <emphasis role="bold">pkcs8</emphasis> command processes private
      keys in PKCS#8 format. It can handle both unencrypted PKCS#8
      PrivateKeyInfo format and EncryptedPrivateKeyInfo format with a
      variety of PKCS#5 (v1.5 and v2.0) and PKCS#12 algorithms.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs8.pod:COMMAND_OPTIONS"><title>COMMAND OPTIONS</title>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-topk8"/><emphasis role="bold">-topk8</emphasis></term>
          <listitem>
            <para>
	      Normally a PKCS#8 private key is expected on input and a
	      traditional format private key will be written. With the
	      <emphasis role="bold">-topk8</emphasis> option the situation
	      is reversed: it reads a traditional format private key and
	      writes a PKCS#8 format key.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-inform_DERPEM"/><emphasis role="bold">-inform DER|PEM</emphasis></term>
          <listitem>
            <para>
	      This specifies the input format. If a PKCS#8 format key is
	      expected on input then either a <emphasis role="bold">DER</emphasis> or <emphasis role="bold">PEM</emphasis> encoded version of a PKCS#8 key
	      will be expected. Otherwise the <emphasis role="bold">DER</emphasis> or <emphasis role="bold">PEM</emphasis> format of the traditional format
	      private key is used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-outform_DERPEM"/><emphasis role="bold">-outform DER|PEM</emphasis></term>
          <listitem>
            <para>
	      This specifies the output format, the options have the same
	      meaning as the <emphasis role="bold">-inform</emphasis>
	      option. 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-in_filename"/><emphasis role="bold">-in filename</emphasis></term>
          <listitem>
            <para>
	      This specifies the input filename to read a key from or
	      standard input if this option is not specified. If the key is
	      encrypted a pass phrase will be prompted for.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-passin_arg"/><emphasis role="bold">-passin arg</emphasis></term>
          <listitem>
            <para>
	      the input file password source. For more information about
	      the format of <emphasis role="bold">arg</emphasis> see the
	      <emphasis role="bold">PASS PHRASE ARGUMENTS</emphasis>
	      section in openssl(1).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-out_filename"/><emphasis role="bold">-out filename</emphasis></term>
          <listitem>
            <para>
	      This specifies the output filename to write a key to or
	      standard output by default. If any encryption options are set
	      then a pass phrase will be prompted for. The output filename
	      should <emphasis role="bold">not</emphasis> be the same as
	      the input filename.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-passout_arg"/><emphasis role="bold">-passout arg</emphasis></term>
          <listitem>
            <para>
	      the output file password source. For more information about
	      the format of <emphasis role="bold">arg</emphasis> see the
	      <emphasis role="bold">PASS PHRASE ARGUMENTS</emphasis>
	      section in openssl(1).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-iter_count"/><emphasis role="bold">-iter count</emphasis></term>
          <listitem>
            <para>
	      When creating new PKCS#8 containers, use a given number of
	      iterations on the password in deriving the encryption key for
	      the PKCS#8 output. High values increase the time required to
	      brute-force a PKCS#8 container.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-nocrypt"/><emphasis role="bold">-nocrypt</emphasis></term>
          <listitem>
            <para>
	      PKCS#8 keys generated or input are normally PKCS#8
	      EncryptedPrivateKeyInfo structures using an appropriate
	      password based encryption algorithm. With this option an
	      unencrypted PrivateKeyInfo structure is expected or output.
	      This option does not encrypt private keys at all and should
	      only be used when absolutely necessary. Certain software such
	      as some versions of Java code signing software used
	      unencrypted private keys.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-nooct"/><emphasis role="bold">-nooct</emphasis></term>
          <listitem>
            <para>
	      This option generates RSA private keys in a broken format
	      that some software uses. Specifically the private key should
	      be enclosed in a OCTET STRING but some software just includes
	      the structure itself without the surrounding OCTET STRING.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-embed"/><emphasis role="bold">-embed</emphasis></term>
          <listitem>
            <para>
	      This option generates DSA keys in a broken format. The DSA
	      parameters are embedded inside the PrivateKey structure. In
	      this form the OCTET STRING contains an ASN1 SEQUENCE
	      consisting of two structures: a SEQUENCE containing the
	      parameters and an ASN1 INTEGER containing the private key.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-nsdb"/><emphasis role="bold">-nsdb</emphasis></term>
          <listitem>
            <para>
	      This option generates DSA keys in a broken format compatible
	      with Netscape private key databases. The PrivateKey contains
	      a SEQUENCE consisting of the public and private keys
	      respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-v2_alg"/><emphasis role="bold">-v2 alg</emphasis></term>
          <listitem>
            <para>
	      This option enables the use of PKCS#5 v2.0 algorithms.
	      Normally PKCS#8 private keys are encrypted with the password
	      based encryption algorithm called <emphasis role="bold">pbeWithMD5AndDES-CBC</emphasis> this uses 56 bit
	      DES encryption but it was the strongest encryption algorithm
	      supported in PKCS#5 v1.5. Using the <emphasis role="bold">-v2</emphasis> option PKCS#5 v2.0 algorithms are
	      used which can use any encryption algorithm such as 168 bit
	      triple DES or 128 bit RC2 however not many implementations
	      support PKCS#5 v2.0 yet. If you are just using private keys
	      with OpenSSL then this doesn't matter. 
            </para>
            <para>
	      The <emphasis role="bold">alg</emphasis> argument is the
	      encryption algorithm to use, valid values include <emphasis role="bold">des</emphasis>, <emphasis role="bold">des3</emphasis> and <emphasis role="bold">rc2</emphasis>. It is recommended that <emphasis role="bold">des3</emphasis> is used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-v2prf_alg"/><emphasis role="bold">-v2prf alg</emphasis></term>
          <listitem>
            <para>
	      This option sets the PRF algorithm to use with PKCS#5 v2.0. A
	      typical value values would be <emphasis role="bold">hmacWithSHA256</emphasis>. If this option isn't
	      set then the default for the cipher is used or <emphasis role="bold">hmacWithSHA1</emphasis> if there is no default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-v1_alg"/><emphasis role="bold">-v1 alg</emphasis></term>
          <listitem>
            <para>
	      This option specifies a PKCS#5 v1.5 or PKCS#12 algorithm to
	      use. A complete list of possible algorithms is included
	      below.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-engine_id"/><emphasis role="bold">-engine id</emphasis></term>
          <listitem>
            <para>
	      specifying an engine (by its unique <emphasis role="bold">id</emphasis> string) will cause <emphasis role="bold">pkcs8</emphasis> to attempt to obtain a
	      functional reference to the specified engine, thus
	      initialising it if needed. The engine will then be set as the
	      default for all available algorithms.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:-scrypt"/><emphasis role="bold">-scrypt</emphasis></term>
          <listitem>
            <para>
	      uses the <emphasis role="bold">scrypt</emphasis> algorithm
	      for private key encryption using default parameters:
	      currently N=1024, r=8 and p=16 and AES in CBC mode with a 256
	      bit key. These parameters can be modified using the <emphasis role="bold">-scrypt_N</emphasis>, <emphasis role="bold">-scrypt_r</emphasis>, <emphasis role="bold">-scrypt_p</emphasis> and <emphasis role="bold">-v2</emphasis> options.
            </para>
            <para>
	      <emphasis role="bold">-scrypt_N N</emphasis> <emphasis role="bold">-scrypt_r r</emphasis> <emphasis role="bold">-scrypt_p p</emphasis>
            </para>
            <para>
	      sets the scrypt <emphasis role="bold">N</emphasis>, <emphasis role="bold">r</emphasis> or <emphasis role="bold">p</emphasis> parameters.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs8.pod:NOTES"><title>NOTES</title>
    <para>
      The encrypted form of a PEM encode PKCS#8 files uses the following
      headers and footers:
    </para>
    <screen>-----BEGIN ENCRYPTED PRIVATE KEY-----
-----END ENCRYPTED PRIVATE KEY-----</screen>
    <para>
      The unencrypted form uses:
    </para>
    <screen>-----BEGIN PRIVATE KEY-----
-----END PRIVATE KEY-----</screen>
    <para>
      Private keys encrypted using PKCS#5 v2.0 algorithms and high
      iteration counts are more secure that those encrypted using the
      traditional SSLeay compatible formats. So if additional security is
      considered important the keys should be converted.
    </para>
    <para>
      The default encryption is only 56 bits because this is the encryption
      that most current implementations of PKCS#8 will support.
    </para>
    <para>
      Some software may use PKCS#12 password based encryption algorithms
      with PKCS#8 format private keys: these are handled automatically but
      there is no option to produce them.
    </para>
    <para>
      It is possible to write out DER encoded encrypted private keys in
      PKCS#8 format because the encryption details are included at an ASN1
      level whereas the traditional format includes them at a PEM level.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs8.pod:PKCS5_v1.5_and_PKCS12_algorithms."><title>PKCS#5 v1.5 and PKCS#12 algorithms.</title>
    <para>
      Various algorithms can be used with the <emphasis role="bold">-v1</emphasis> command line option, including PKCS#5 v1.5
      and PKCS#12. These are described in more detail below.
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:PBE-MD2-DES_PBE-MD5-DES"/><emphasis role="bold">PBE-MD2-DES PBE-MD5-DES</emphasis></term>
          <listitem>
            <para>
	      These algorithms were included in the original PKCS#5 v1.5
	      specification. They only offer 56 bits of protection since
	      they both use DES.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:PBE-SHA1-RC2-64_PBE-MD2-RC2-64_PBE-MD5-RC2-64_PBE-SHA1-DES"/><emphasis role="bold">PBE-SHA1-RC2-64 PBE-MD2-RC2-64 PBE-MD5-RC2-64 PBE-SHA1-DES</emphasis></term>
          <listitem>
            <para>
	      These algorithms are not mentioned in the original PKCS#5
	      v1.5 specification but they use the same key derivation
	      algorithm and are supported by some software. They are
	      mentioned in PKCS#5 v2.0. They use either 64 bit RC2 or 56
	      bit DES.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs8.pod:PBE-SHA1-RC4-128_PBE-SHA1-RC4-40_PBE-SHA1-3DES_PBE-SHA1-2DES_PBE-SHA1-RC2-128_PBE-SHA1-RC2-40"/><emphasis role="bold">PBE-SHA1-RC4-128 PBE-SHA1-RC4-40 PBE-SHA1-3DES PBE-SHA1-2DES PBE-SHA1-RC2-128 PBE-SHA1-RC2-40</emphasis></term>
          <listitem>
            <para>
	      These algorithms use the PKCS#12 password based encryption
	      algorithm and allow strong encryption algorithms like triple
	      DES or 128 bit RC2 to be used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs8.pod:EXAMPLES"><title>EXAMPLES</title>
    <para>
      Convert a private from traditional to PKCS#5 v2.0 format using triple
      DES:
    </para>
    <screen>openssl pkcs8 -in key.pem -topk8 -v2 des3 -out enckey.pem</screen>
    <para>
      Convert a private from traditional to PKCS#5 v2.0 format using AES
      with 256 bits in CBC mode and <emphasis role="bold">hmacWithSHA256</emphasis> PRF:
    </para>
    <screen>openssl pkcs8 -in key.pem -topk8 -v2 aes-256-cbc -v2prf hmacWithSHA256 -out enckey.pem</screen>
    <para>
      Convert a private key to PKCS#8 using a PKCS#5 1.5 compatible
      algorithm (DES):
    </para>
    <screen>openssl pkcs8 -in key.pem -topk8 -out enckey.pem</screen>
    <para>
      Convert a private key to PKCS#8 using a PKCS#12 compatible algorithm
      (3DES):
    </para>
    <screen>openssl pkcs8 -in key.pem -topk8 -out enckey.pem -v1 PBE-SHA1-3DES</screen>
    <para>
      Read a DER unencrypted PKCS#8 format private key:
    </para>
    <screen>openssl pkcs8 -inform DER -nocrypt -in key.der -out key.pem</screen>
    <para>
      Convert a private key from any PKCS#8 format to traditional format:
    </para>
    <screen>openssl pkcs8 -in pk8.pem -out key.pem</screen>
    <para>
      Convert a private key to PKCS#8 format, encrypting with AES-256 and
      with one million iterations of the password: 
    </para>
    <screen>openssl pkcs8 -in raw.pem -topk8 -v2 aes-256-cbc -iter 1000000 -out pk8.pem</screen>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs8.pod:STANDARDS"><title>STANDARDS</title>
    <para>
      Test vectors from this PKCS#5 v2.0 implementation were posted to the
      pkcs-tng mailing list using triple DES, DES and RC2 with high
      iteration counts, several people confirmed that they could decrypt
      the private keys produced and Therefore it can be assumed that the
      PKCS#5 v2.0 implementation is reasonably accurate at least as far as
      these algorithms are concerned.
    </para>
    <para>
      The format of PKCS#8 DSA (and other) private keys is not well
      documented: it is hidden away in PKCS#11 v2.01, section 11.9.
      OpenSSL's default DSA PKCS#8 private key format complies with this
      standard.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs8.pod:BUGS"><title>BUGS</title>
    <para>
      There should be an option that prints out the encryption algorithm in
      use and other details such as the iteration count.
    </para>
    <para>
      PKCS#8 using triple DES and PKCS#5 v2.0 should be the default private
      key format for OpenSSL: for compatibility several of the utilities
      use the old format at present.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs8.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      dsa(1), rsa(1), genrsa(1), gendsa(1)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs8.pod:HISTORY"><title>HISTORY</title>
    <para>
      The <emphasis role="bold">-iter</emphasis> option was added to
      OpenSSL 1.1.0.
    </para>
  </refsection>
</refentry>