<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_add1_chain_cert.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_set0_chain, SSL_CTX_set1_chain, SSL_CTX_add0_chain_cert,
SSL_CTX_add1_chain_cert, SSL_CTX_get0_chain_certs, SSL_CTX_clear_chain_certs,
SSL_set0_chain, SSL_set1_chain, SSL_add0_chain_cert, SSL_add1_chain_cert,
SSL_get0_chain_certs, SSL_clear_chain_certs, SSL_CTX_build_cert_chain,
SSL_build_cert_chain, SSL_CTX_select_current_cert,
SSL_select_current_cert, SSL_CTX_set_current_cert, SSL_set_current_cert</refname>
<refpurpose>extra
chain certificate processing</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>int SSL_CTX_set0_chain(SSL_CTX *ctx, STACK_OF(X509) *sk);
int SSL_CTX_set1_chain(SSL_CTX *ctx, STACK_OF(X509) *sk);
int SSL_CTX_add0_chain_cert(SSL_CTX *ctx, X509 *x509);
int SSL_CTX_add1_chain_cert(SSL_CTX *ctx, X509 *x509);
int SSL_CTX_get0_chain_certs(SSL_CTX *ctx, STACK_OF(X509) **sk);
int SSL_CTX_clear_chain_certs(SSL_CTX *ctx);</synopsis>
<synopsis>int SSL_set0_chain(SSL *ssl, STACK_OF(X509) *sk);
int SSL_set1_chain(SSL *ssl, STACK_OF(X509) *sk);
int SSL_add0_chain_cert(SSL *ssl, X509 *x509);
int SSL_add1_chain_cert(SSL *ssl, X509 *x509);
int SSL_get0_chain_certs(SSL *ssl, STACK_OF(X509) **sk);
int SSL_clear_chain_certs(SSL *ssl);</synopsis>
<synopsis>int SSL_CTX_build_cert_chain(SSL_CTX *ctx, flags);
int SSL_build_cert_chain(SSL *ssl, flags);</synopsis>
<synopsis>int SSL_CTX_select_current_cert(SSL_CTX *ctx, X509 *x509);
int SSL_select_current_cert(SSL *ssl, X509 *x509);
int SSL_CTX_set_current_cert(SSL_CTX *ctx, long op);
int SSL_set_current_cert(SSL *ssl, long op);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-e9f215b83079a619d1f288eae834ab8f"><title>DESCRIPTION</title>
    <para>
      SSL_CTX_set0_chain() and SSL_CTX_set1_chain() set the certificate
      chain associated with the current certificate of <emphasis role="bold">ctx</emphasis> to <emphasis role="bold">sk</emphasis>.
    </para>
    <para>
      SSL_CTX_add0_chain_cert() and SSL_CTX_add1_chain_cert() append the
      single certificate <emphasis role="bold">x509</emphasis> to the chain
      associated with the current certificate of <emphasis role="bold">ctx</emphasis>.
    </para>
    <para>
      SSL_CTX_get0_chain_certs() retrieves the chain associated with the
      current certificate of <emphasis role="bold">ctx</emphasis>.
    </para>
    <para>
      SSL_CTX_clear_chain_certs() clears any existing chain associated with
      the current certificate of <emphasis role="bold">ctx</emphasis>. 
      (This is implemented by calling SSL_CTX_set0_chain() with <emphasis role="bold">sk</emphasis> set to <emphasis role="bold">NULL</emphasis>).
    </para>
    <para>
      SSL_CTX_build_cert_chain() builds the certificate chain for <emphasis role="bold">ctx</emphasis> normally this uses the chain store or the
      verify store if the chain store is not set. If the function is
      successful the built chain will replace any existing chain. The
      <emphasis role="bold">flags</emphasis> parameter can be set to
      <emphasis role="bold">SSL_BUILD_CHAIN_FLAG_UNTRUSTED</emphasis> to
      use existing chain certificates as untrusted CAs, <emphasis role="bold">SSL_BUILD_CHAIN_FLAG_NO_ROOT</emphasis> to omit the root
      CA from the built chain, <emphasis role="bold">SSL_BUILD_CHAIN_FLAG_CHECK</emphasis> to use all existing
      chain certificates only to build the chain (effectively sanity
      checking and rearranging them if necessary), the flag <emphasis role="bold">SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR</emphasis> ignores any
      errors during verification: if flag <emphasis role="bold">SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR</emphasis> is also set
      verification errors are cleared from the error queue.
    </para>
    <para>
      Each of these functions operates on the <emphasis role="italic">current</emphasis> end entity (i.e. server or client)
      certificate. This is the last certificate loaded or selected on the
      corresponding <emphasis role="bold">ctx</emphasis> structure.
    </para>
    <para>
      SSL_CTX_select_current_cert() selects <emphasis role="bold">x509</emphasis> as the current end entity certificate,
      but only if <emphasis role="bold">x509</emphasis> has already been
      loaded into <emphasis role="bold">ctx</emphasis> using a function
      such as SSL_CTX_use_certificate().
    </para>
    <para>
      SSL_set0_chain(), SSL_set1_chain(), SSL_add0_chain_cert(),
      SSL_add1_chain_cert(), SSL_get0_chain_certs(),
      SSL_clear_chain_certs(), SSL_build_cert_chain(),
      SSL_select_current_cert() and SSL_set_current_cert() are similar
      except they apply to SSL structure <emphasis role="bold">ssl</emphasis>.
    </para>
    <para>
      SSL_CTX_set_current_cert() changes the current certificate to a value
      based on the <emphasis role="bold">op</emphasis> argument. Currently
      <emphasis role="bold">op</emphasis> can be <emphasis role="bold">SSL_CERT_SET_FIRST</emphasis> to use the first valid
      certificate or <emphasis role="bold">SSL_CERT_SET_NEXT</emphasis> to
      set the next valid certificate after the current certificate. These
      two operations can be used to iterate over all certificates in an
      <emphasis role="bold">SSL_CTX</emphasis> structure.
    </para>
    <para>
      SSL_set_current_cert() also supports the option <emphasis role="bold">SSL_CERT_SET_SERVER</emphasis>. If <emphasis role="bold">ssl</emphasis> is a server and has sent a certificate to
      a connected client this option sets that certificate to the current
      certificate and returns 1. If the negotiated ciphersuite is anonymous
      (and thus no certificate will be sent) 2 is returned and the current
      certificate is unchanged. If <emphasis role="bold">ssl</emphasis> is
      not a server or a certificate has not been sent 0 is returned and the
      current certificate is unchanged.
    </para>
    <para>
      All these functions are implemented as macros. Those containing a
      <emphasis role="bold">1</emphasis> increment the reference count of
      the supplied certificate or chain so it must be freed at some point
      after the operation. Those containing a <emphasis role="bold">0</emphasis> do not increment reference counts and the
      supplied certificate or chain <emphasis role="bold">MUST
      NOT</emphasis> be freed after the operation.
    </para>
  </refsection>
  <refsection xml:id="ID-4960a95a0ab9166be07431cd06d3dae4"><title>NOTES</title>
    <para>
      The chains associate with an SSL_CTX structure are copied to any SSL
      structures when SSL_new() is called. SSL structures will not be
      affected by any chains subsequently changed in the parent SSL_CTX.
    </para>
    <para>
      One chain can be set for each key type supported by a server. So, for
      example, an RSA and a DSA certificate can (and often will) have
      different chains.
    </para>
    <para>
      The functions SSL_CTX_build_cert_chain() and SSL_build_cert_chain()
      can be used to check application configuration and to ensure any
      necessary subordinate CAs are sent in the correct order.
      Misconfigured applications sending incorrect certificate chains often
      cause problems with peers.
    </para>
    <para>
      For example an application can add any set of certificates using
      SSL_CTX_use_certificate_chain_file() then call
      SSL_CTX_build_cert_chain() with the option <emphasis role="bold">SSL_BUILD_CHAIN_FLAG_CHECK</emphasis> to check and
      reorder them.
    </para>
    <para>
      Applications can issue non fatal warnings when checking chains by
      setting the flag <emphasis role="bold">SSL_BUILD_CHAIN_FLAG_IGNORE_ERRORS</emphasis> and
      checking the return value.
    </para>
    <para>
      Calling SSL_CTX_build_cert_chain() or SSL_build_cert_chain() is more
      efficient than the automatic chain building as it is only performed
      once. Automatic chain building is performed on each new session.
    </para>
    <para>
      If any certificates are added using these functions no certificates
      added using SSL_CTX_add_extra_chain_cert() will be used.
    </para>
  </refsection>
  <refsection xml:id="ID-aed017b207c01a23452ec20f18805d37"><title>RETURN VALUES</title>
    <para>
      SSL_set_current_cert() with <emphasis role="bold">SSL_CERT_SET_SERVER</emphasis> return 1 for success, 2 if
      no server certificate is used because the ciphersuites is anonymous
      and 0 for failure.
    </para>
    <para>
      SSL_CTX_build_cert_chain() and SSL_build_cert_chain() return 1 for
      success and 0 for failure. If the flag <emphasis role="bold">SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR</emphasis> and a
      verification error occurs then 2 is returned.
    </para>
    <para>
      All other functions return 1 for success and 0 for failure.
    </para>
  </refsection>
  <refsection xml:id="ID-16973d4078502dab131be6a3f3b27afa"><title>SEE ALSO</title>
    <para>
      <citerefentry>
      <refentrytitle>SSL_CTX_add_extra_chain_cert</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-11b4e530b4c5ad902f80a53a9fb557bc"><title>HISTORY</title>
    <para>
      These functions were first added to OpenSSL 1.0.2.
    </para>
  </refsection>
  <refsection xml:id="ID-95309b52826611c9d2c6291f3f8fd140"><title>COPYRIGHT</title>
    <para>
      Copyright 2013-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>