<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BN_rand.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BN_rand, BN_pseudo_rand, BN_rand_range, BN_pseudo_rand_range</refname>
<refpurpose>generate pseudo-random number</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis format="linespecific">int BN_rand(BIGNUM *rnd, int bits, int top, int bottom);</synopsis>
<synopsis format="linespecific">int BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom);</synopsis>
<synopsis format="linespecific">int BN_rand_range(BIGNUM *rnd, BIGNUM *range);</synopsis>
<synopsis format="linespecific">int BN_pseudo_rand_range(BIGNUM *rnd, BIGNUM *range);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.BN_rand.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      BN_rand() generates a cryptographically strong pseudo-random number
      of <emphasis role="bold">bits</emphasis> bits in length and stores it
      in <emphasis role="bold">rnd</emphasis>. If <emphasis role="bold">top</emphasis> is -1, the most significant bit of the
      random number can be zero. If <emphasis role="bold">top</emphasis> is
      0, it is set to 1, and if <emphasis role="bold">top</emphasis> is 1,
      the two most significant bits of the number will be set to 1, so that
      the product of two such random numbers will always have 2*<emphasis role="bold">bits</emphasis> length.  If <emphasis role="bold">bottom</emphasis> is true, the number will be odd.
    </para>
    <para>
      BN_pseudo_rand() does the same, but pseudo-random numbers generated
      by this function are not necessarily unpredictable. They can be used
      for non-cryptographic purposes and for certain purposes in
      cryptographic protocols, but usually not for key generation etc.
    </para>
    <para>
      BN_rand_range() generates a cryptographically strong pseudo-random
      number <emphasis role="bold">rnd</emphasis> in the range 0
      &lt;lt&gt;= <emphasis role="bold">rnd</emphasis> &lt; <emphasis role="bold">range</emphasis>. BN_pseudo_rand_range() does the same,
      but is based on BN_pseudo_rand(), and hence numbers generated by it
      are not necessarily unpredictable.
    </para>
    <para>
      The PRNG must be seeded prior to calling BN_rand() or
      BN_rand_range().
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BN_rand.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      The functions return 1 on success, 0 on error. The error codes can be
      obtained by ERR_get_error(3).
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BN_rand.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      bn(3), ERR_get_error(3), rand(3), RAND_add(3), RAND_bytes(3)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BN_rand.pod:HISTORY"><title>HISTORY</title>
    <para>
      BN_rand() is available in all versions of SSLeay and OpenSSL.
      BN_pseudo_rand() was added in OpenSSL 0.9.5. The <emphasis role="bold">top</emphasis> == -1 case and the function
      BN_rand_range() were added in OpenSSL 0.9.6a. BN_pseudo_rand_range()
      was added in OpenSSL 0.9.6c.
    </para>
  </refsection>
</refentry>