<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BN_rand.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BN_rand, BN_pseudo_rand, BN_rand_range, BN_pseudo_rand_range</refname>
<refpurpose>generate pseudo-random number</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis>int BN_rand(BIGNUM *rnd, int bits, int top, int bottom);</synopsis>
<synopsis>int BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom);</synopsis>
<synopsis>int BN_rand_range(BIGNUM *rnd, BIGNUM *range);</synopsis>
<synopsis>int BN_pseudo_rand_range(BIGNUM *rnd, BIGNUM *range);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-7b2fdc0b5d368c6e7b5e275ca8c031a7"><title>DESCRIPTION</title>
    <para>
      BN_rand() generates a cryptographically strong pseudo-random number
      of <emphasis role="bold">bits</emphasis> in length and stores it in
      <emphasis role="bold">rnd</emphasis>. If <emphasis role="bold">top</emphasis> is -1, the most significant bit of the
      random number can be zero. If <emphasis role="bold">top</emphasis> is
      0, it is set to 1, and if <emphasis role="bold">top</emphasis> is 1,
      the two most significant bits of the number will be set to 1, so that
      the product of two such random numbers will always have 2*<emphasis role="bold">bits</emphasis> length.  If <emphasis role="bold">bottom</emphasis> is true, the number will be odd. The
      value of <emphasis role="bold">bits</emphasis> must be zero or
      greater. If <emphasis role="bold">bits</emphasis> is 1 then <emphasis role="bold">top</emphasis> cannot also be 1.
    </para>
    <para>
      BN_pseudo_rand() does the same, but pseudo-random numbers generated
      by this function are not necessarily unpredictable. They can be used
      for non-cryptographic purposes and for certain purposes in
      cryptographic protocols, but usually not for key generation etc.
    </para>
    <para>
      BN_rand_range() generates a cryptographically strong pseudo-random
      number <emphasis role="bold">rnd</emphasis> in the range 0 &lt;=
      <emphasis role="bold">rnd</emphasis> &lt; <emphasis role="bold">range</emphasis>. BN_pseudo_rand_range() does the same,
      but is based on BN_pseudo_rand(), and hence numbers generated by it
      are not necessarily unpredictable.
    </para>
    <para>
      The PRNG must be seeded prior to calling BN_rand() or
      BN_rand_range().
    </para>
  </refsection>
  <refsection xml:id="ID-1f1f2c61fb261bed3951c9b2133e100c"><title>RETURN VALUES</title>
    <para>
      The functions return 1 on success, 0 on error. The error codes can be
      obtained by <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-7edc2ee267054b511a5c315e28bc9f88"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>bn</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>rand</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>RAND_add</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>RAND_bytes</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
</refentry>