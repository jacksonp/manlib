<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>RSA_set_method.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>RSA_set_default_method, RSA_get_default_method, RSA_set_method,
RSA_get_method, RSA_PKCS1_SSLeay, RSA_null_method, RSA_flags,
RSA_new_method</refname>
<refpurpose>select RSA method</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/rsa.h&gt;</synopsis>
<synopsis>void RSA_set_default_method(const RSA_METHOD *meth);</synopsis>
<synopsis>RSA_METHOD *RSA_get_default_method(void);</synopsis>
<synopsis>int RSA_set_method(RSA *rsa, const RSA_METHOD *meth);</synopsis>
<synopsis>RSA_METHOD *RSA_get_method(const RSA *rsa);</synopsis>
<synopsis>RSA_METHOD *RSA_PKCS1_SSLeay(void);</synopsis>
<synopsis>RSA_METHOD *RSA_null_method(void);</synopsis>
<synopsis>int RSA_flags(const RSA *rsa);</synopsis>
<synopsis>RSA *RSA_new_method(RSA_METHOD *method);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-af912409aa943f93e0553e85b7c0cd8a"><title>DESCRIPTION</title>
    <para>
      An <emphasis role="bold">RSA_METHOD</emphasis> specifies the
      functions that OpenSSL uses for RSA operations. By modifying the
      method, alternative implementations such as hardware accelerators may
      be used. IMPORTANT: See the NOTES section for important information
      about how these RSA API functions are affected by the use of
      <emphasis role="bold">ENGINE</emphasis> API calls.
    </para>
    <para>
      Initially, the default RSA_METHOD is the OpenSSL internal
      implementation, as returned by RSA_PKCS1_SSLeay().
    </para>
    <para>
      RSA_set_default_method() makes <emphasis role="bold">meth</emphasis>
      the default method for all RSA structures created later. <emphasis role="bold">NB</emphasis>: This is true only whilst no ENGINE has
      been set as a default for RSA, so this function is no longer
      recommended.
    </para>
    <para>
      RSA_get_default_method() returns a pointer to the current default
      RSA_METHOD. However, the meaningfulness of this result is dependent
      on whether the ENGINE API is being used, so this function is no
      longer recommended.
    </para>
    <para>
      RSA_set_method() selects <emphasis role="bold">meth</emphasis> to
      perform all operations using the key <emphasis role="bold">rsa</emphasis>. This will replace the RSA_METHOD used by
      the RSA key and if the previous method was supplied by an ENGINE, the
      handle to that ENGINE will be released during the change. It is
      possible to have RSA keys that only work with certain RSA_METHOD
      implementations (eg. from an ENGINE module that supports embedded
      hardware-protected keys), and in such cases attempting to change the
      RSA_METHOD for the key can have unexpected results.
    </para>
    <para>
      RSA_get_method() returns a pointer to the RSA_METHOD being used by
      <emphasis role="bold">rsa</emphasis>. This method may or may not be
      supplied by an ENGINE implementation, but if it is, the return value
      can only be guaranteed to be valid as long as the RSA key itself is
      valid and does not have its implementation changed by
      RSA_set_method().
    </para>
    <para>
      RSA_flags() returns the <emphasis role="bold">flags</emphasis> that
      are set for <emphasis role="bold">rsa</emphasis>'s current
      RSA_METHOD. See the BUGS section.
    </para>
    <para>
      RSA_new_method() allocates and initializes an RSA structure so that
      <emphasis role="bold">engine</emphasis> will be used for the RSA
      operations. If <emphasis role="bold">engine</emphasis> is NULL, the
      default ENGINE for RSA operations is used, and if no default ENGINE
      is set, the RSA_METHOD controlled by RSA_set_default_method() is
      used.
    </para>
    <para>
      RSA_flags() returns the <emphasis role="bold">flags</emphasis> that
      are set for <emphasis role="bold">rsa</emphasis>'s current method.
    </para>
    <para>
      RSA_new_method() allocates and initializes an <emphasis role="bold">RSA</emphasis> structure so that <emphasis role="bold">method</emphasis> will be used for the RSA operations. If
      <emphasis role="bold">method</emphasis> is <emphasis role="bold">NULL</emphasis>, the default method is used.
    </para>
  </refsection>
  <refsection xml:id="ID-6783d73225427a454c355f6aace43d18"><title>THE RSA_METHOD STRUCTURE</title>
    <screen>typedef struct rsa_meth_st
{
    /* name of the implementation */
       const char *name;

/* encrypt */
   int (*rsa_pub_enc)(int flen, unsigned char *from,
     unsigned char *to, RSA *rsa, int padding);

/* verify arbitrary data */
   int (*rsa_pub_dec)(int flen, unsigned char *from,
     unsigned char *to, RSA *rsa, int padding);

/* sign arbitrary data */
   int (*rsa_priv_enc)(int flen, unsigned char *from,
     unsigned char *to, RSA *rsa, int padding);

/* decrypt */
   int (*rsa_priv_dec)(int flen, unsigned char *from,
     unsigned char *to, RSA *rsa, int padding);

/* compute r0 = r0 ^ I mod rsa-&gt;n (May be NULL for some
                                   implementations) */
   int (*rsa_mod_exp)(BIGNUM *r0, BIGNUM *I, RSA *rsa);

/* compute r = a ^ p mod m (May be NULL for some implementations) */
   int (*bn_mod_exp)(BIGNUM *r, BIGNUM *a, const BIGNUM *p,
     const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);

/* called at RSA_new */
   int (*init)(RSA *rsa);

/* called at RSA_free */
   int (*finish)(RSA *rsa);

/* RSA_FLAG_EXT_PKEY        - rsa_mod_exp is called for private key
 *                            operations, even if p,q,dmp1,dmq1,iqmp
 *                            are NULL
 * RSA_FLAG_SIGN_VER        - enable rsa_sign and rsa_verify
 * RSA_METHOD_FLAG_NO_CHECK - don't check pub/private match
 */
   int flags;

char *app_data; /* ?? */

/* sign. For backward compatibility, this is used only
 * if (flags &amp; RSA_FLAG_SIGN_VER)
 */
   int (*rsa_sign)(int type,
           const unsigned char *m, unsigned int m_length,
           unsigned char *sigret, unsigned int *siglen, const RSA *rsa);
/* verify. For backward compatibility, this is used only
 * if (flags &amp; RSA_FLAG_SIGN_VER)
 */
   int (*rsa_verify)(int dtype,
           const unsigned char *m, unsigned int m_length,
           const unsigned char *sigbuf, unsigned int siglen,
                                                           const RSA *rsa);
/* keygen. If NULL builtin RSA key generation will be used */
   int (*rsa_keygen)(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);

} RSA_METHOD;</screen>
  </refsection>
  <refsection xml:id="ID-a0db8b49c5118522b1cac262c4137c55"><title>RETURN VALUES</title>
    <para>
      RSA_PKCS1_SSLeay(), RSA_PKCS1_null_method(), RSA_get_default_method()
      and RSA_get_method() return pointers to the respective RSA_METHODs.
    </para>
    <para>
      RSA_set_default_method() returns no value.
    </para>
    <para>
      RSA_set_method() returns a pointer to the old RSA_METHOD
      implementation that was replaced. However, this return value should
      probably be ignored because if it was supplied by an ENGINE, the
      pointer could be invalidated at any time if the ENGINE is unloaded
      (in fact it could be unloaded as a result of the RSA_set_method()
      function releasing its handle to the ENGINE). For this reason, the
      return type may be replaced with a <emphasis role="bold">void</emphasis> declaration in a future release.
    </para>
    <para>
      RSA_new_method() returns NULL and sets an error code that can be
      obtained by <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> if the allocation fails. Otherwise it returns a
      pointer to the newly allocated structure.
    </para>
  </refsection>
  <refsection xml:id="ID-eb2a0c132d45e6e0ee0f7bd7c36b65df"><title>BUGS</title>
    <para>
      The behaviour of RSA_flags() is a mis-feature that is left as-is for
      now to avoid creating compatibility problems. RSA functionality, such
      as the encryption functions, are controlled by the <emphasis role="bold">flags</emphasis> value in the RSA key itself, not by the
      <emphasis role="bold">flags</emphasis> value in the RSA_METHOD
      attached to the RSA key (which is what this function returns). If the
      flags element of an RSA key is changed, the changes will be honoured
      by RSA functionality but will not be reflected in the return value of
      the RSA_flags() function - in effect RSA_flags() behaves more like an
      RSA_default_flags() function (which does not currently exist).
    </para>
  </refsection>
  <refsection xml:id="ID-f72dd5d93ce6ff223ce40723e617a8ce"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>rsa</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>RSA_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
</refentry>