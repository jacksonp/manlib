<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BN_add.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BN_add, BN_sub, BN_mul, BN_sqr, BN_div, BN_mod, BN_nnmod, BN_mod_add,
BN_mod_sub, BN_mod_mul, BN_mod_sqr, BN_exp, BN_mod_exp, BN_gcd</refname>
<refpurpose>arithmetic operations on BIGNUMs</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis>int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);</synopsis>
<synopsis>int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);</synopsis>
<synopsis>int BN_mul(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);</synopsis>
<synopsis>int BN_sqr(BIGNUM *r, BIGNUM *a, BN_CTX *ctx);</synopsis>
<synopsis>int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *a, const BIGNUM *d,
        BN_CTX *ctx);</synopsis>
<synopsis>int BN_mod(BIGNUM *rem, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);</synopsis>
<synopsis>int BN_nnmod(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);</synopsis>
<synopsis>int BN_mod_add(BIGNUM *r, BIGNUM *a, BIGNUM *b, const BIGNUM *m,
        BN_CTX *ctx);</synopsis>
<synopsis>int BN_mod_sub(BIGNUM *r, BIGNUM *a, BIGNUM *b, const BIGNUM *m,
        BN_CTX *ctx);</synopsis>
<synopsis>int BN_mod_mul(BIGNUM *r, BIGNUM *a, BIGNUM *b, const BIGNUM *m,
        BN_CTX *ctx);</synopsis>
<synopsis>int BN_mod_sqr(BIGNUM *r, BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);</synopsis>
<synopsis>int BN_exp(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);</synopsis>
<synopsis>int BN_mod_exp(BIGNUM *r, BIGNUM *a, const BIGNUM *p,
        const BIGNUM *m, BN_CTX *ctx);</synopsis>
<synopsis>int BN_gcd(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-22e269c7f01a8f1de674b9da36c9ec45"><title>DESCRIPTION</title>
    <para>
      BN_add() adds <emphasis role="italic">a</emphasis> and <emphasis role="italic">b</emphasis> and places the result in <emphasis role="italic">r</emphasis> (<literal role="code">r=a+b</literal>). <emphasis role="italic">r</emphasis> may be the same <emphasis role="bold">BIGNUM</emphasis> as <emphasis role="italic">a</emphasis>
      or <emphasis role="italic">b</emphasis>.
    </para>
    <para>
      BN_sub() subtracts <emphasis role="italic">b</emphasis> from
      <emphasis role="italic">a</emphasis> and places the result in
      <emphasis role="italic">r</emphasis> (<literal role="code">r=a-b</literal>). <emphasis role="italic">r</emphasis> may be the same <emphasis role="bold">BIGNUM</emphasis> as <emphasis role="italic">a</emphasis>
      or <emphasis role="italic">b</emphasis>.
    </para>
    <para>
      BN_mul() multiplies <emphasis role="italic">a</emphasis> and
      <emphasis role="italic">b</emphasis> and places the result in
      <emphasis role="italic">r</emphasis> (<literal role="code">r=a*b</literal>). <emphasis role="italic">r</emphasis> may be the same <emphasis role="bold">BIGNUM</emphasis> as <emphasis role="italic">a</emphasis>
      or <emphasis role="italic">b</emphasis>. For multiplication by powers
      of 2, use <citerefentry> <refentrytitle>BN_lshift</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
    <para>
      BN_sqr() takes the square of <emphasis role="italic">a</emphasis> and
      places the result in <emphasis role="italic">r</emphasis> (<literal role="code">r=a^2</literal>). <emphasis role="italic">r</emphasis> and <emphasis role="italic">a</emphasis>
      may be the same <emphasis role="bold">BIGNUM</emphasis>. This
      function is faster than BN_mul(r,a,a).
    </para>
    <para>
      BN_div() divides <emphasis role="italic">a</emphasis> by <emphasis role="italic">d</emphasis> and places the result in <emphasis role="italic">dv</emphasis> and the remainder in <emphasis role="italic">rem</emphasis> (<literal role="code">dv=a/d,
      rem=a%d</literal>). Either of <emphasis role="italic">dv</emphasis> and <emphasis role="italic">rem</emphasis> may be <emphasis role="bold">NULL</emphasis>, in which case the respective value is
      not returned. The result is rounded towards zero; thus if <emphasis role="italic">a</emphasis> is negative, the remainder will be zero or
      negative. For division by powers of 2, use BN_rshift(3).
    </para>
    <para>
      BN_mod() corresponds to BN_div() with <emphasis role="italic">dv</emphasis> set to <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      BN_nnmod() reduces <emphasis role="italic">a</emphasis> modulo
      <emphasis role="italic">m</emphasis> and places the non-negative
      remainder in <emphasis role="italic">r</emphasis>.
    </para>
    <para>
      BN_mod_add() adds <emphasis role="italic">a</emphasis> to <emphasis role="italic">b</emphasis> modulo <emphasis role="italic">m</emphasis> and places the non-negative result in
      <emphasis role="italic">r</emphasis>.
    </para>
    <para>
      BN_mod_sub() subtracts <emphasis role="italic">b</emphasis> from
      <emphasis role="italic">a</emphasis> modulo <emphasis role="italic">m</emphasis> and places the non-negative result in
      <emphasis role="italic">r</emphasis>.
    </para>
    <para>
      BN_mod_mul() multiplies <emphasis role="italic">a</emphasis> by
      <emphasis role="italic">b</emphasis> and finds the non-negative
      remainder respective to modulus <emphasis role="italic">m</emphasis>
      (<literal role="code">r=(a*b) mod m</literal>). <emphasis role="italic">r</emphasis> may be the same <emphasis role="bold">BIGNUM</emphasis> as <emphasis role="italic">a</emphasis>
      or <emphasis role="italic">b</emphasis>. For more efficient
      algorithms for repeated computations using the same modulus, see
      <citerefentry> <refentrytitle>BN_mod_mul_montgomery</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> and <citerefentry>
      <refentrytitle>BN_mod_mul_reciprocal</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
    <para>
      BN_mod_sqr() takes the square of <emphasis role="italic">a</emphasis>
      modulo <emphasis role="bold">m</emphasis> and places the result in
      <emphasis role="italic">r</emphasis>.
    </para>
    <para>
      BN_exp() raises <emphasis role="italic">a</emphasis> to the <emphasis role="italic">p</emphasis>-th power and places the result in
      <emphasis role="italic">r</emphasis> (<literal role="code">r=a^p</literal>). This function is faster
      than repeated applications of BN_mul().
    </para>
    <para>
      BN_mod_exp() computes <emphasis role="italic">a</emphasis> to the
      <emphasis role="italic">p</emphasis>-th power modulo <emphasis role="italic">m</emphasis> (<literal role="code">r=a^p %
      m</literal>). This function uses less time and space than
      BN_exp().
    </para>
    <para>
      BN_gcd() computes the greatest common divisor of <emphasis role="italic">a</emphasis> and <emphasis role="italic">b</emphasis>
      and places the result in <emphasis role="italic">r</emphasis>.
      <emphasis role="italic">r</emphasis> may be the same <emphasis role="bold">BIGNUM</emphasis> as <emphasis role="italic">a</emphasis>
      or <emphasis role="italic">b</emphasis>.
    </para>
    <para>
      For all functions, <emphasis role="italic">ctx</emphasis> is a
      previously allocated <emphasis role="bold">BN_CTX</emphasis> used for
      temporary variables; see <citerefentry>
      <refentrytitle>BN_CTX_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
    <para>
      Unless noted otherwise, the result <emphasis role="bold">BIGNUM</emphasis> must be different from the arguments.
    </para>
  </refsection>
  <refsection xml:id="ID-e227db04493fbd7b275585498a580e65"><title>RETURN VALUES</title>
    <para>
      For all functions, 1 is returned for success, 0 on error. The return
      value should always be checked (e.g., <literal role="code">if (!BN_add(r,a,b)) goto err;</literal>). The
      error codes can be obtained by <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-66b5cd5b1ab65ca9e72b9d8d1d784a32"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>bn</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BN_CTX_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BN_add_word</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BN_set_bit</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
</refentry>