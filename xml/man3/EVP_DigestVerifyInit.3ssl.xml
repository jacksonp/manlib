<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EVP_DigestVerifyInit.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EVP_DigestVerifyInit, EVP_DigestVerifyUpdate, EVP_DigestVerifyFinal</refname>
<refpurpose>EVP signature verification functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis>int EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
                       const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey);
int EVP_DigestVerifyUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt);
int EVP_DigestVerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-81ad3f78dd5be94833f32cf7f0d30508"><title>DESCRIPTION</title>
    <para>
      The EVP signature routines are a high level interface to digital
      signatures.
    </para>
    <para>
      EVP_DigestVerifyInit() sets up verification context <emphasis role="bold">ctx</emphasis> to use digest <emphasis role="bold">type</emphasis> from ENGINE <emphasis role="bold">impl</emphasis> and public key <emphasis role="bold">pkey</emphasis>. <emphasis role="bold">ctx</emphasis>
      must be created with EVP_MD_CTX_new() before calling this function.
      If <emphasis role="bold">pctx</emphasis> is not NULL the EVP_PKEY_CTX
      of the verification operation will be written to <emphasis role="bold">*pctx</emphasis>: this can be used to set alternative
      verification options.
    </para>
    <para>
      EVP_DigestVerifyUpdate() hashes <emphasis role="bold">cnt</emphasis>
      bytes of data at <emphasis role="bold">d</emphasis> into the
      verification context <emphasis role="bold">ctx</emphasis>. This
      function can be called several times on the same <emphasis role="bold">ctx</emphasis> to include additional data. This function
      is currently implemented using a macro.
    </para>
    <para>
      EVP_DigestVerifyFinal() verifies the data in <emphasis role="bold">ctx</emphasis> against the signature in <emphasis role="bold">sig</emphasis> of length <emphasis role="bold">siglen</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-b68db085a001733ee0cde1e88125d1c0"><title>RETURN VALUES</title>
    <para>
      EVP_DigestVerifyInit() and EVP_DigestVerifyUpdate() return 1 for
      success and 0 for failure.
    </para>
    <para>
      EVP_DigestVerifyFinal() returns 1 for success; any other value
      indicates failure.  A return value of zero indicates that the
      signature did not verify successfully (that is, tbs did not match the
      original data or the signature had an invalid form), while other
      values indicate a more serious error (and sometimes also indicate an
      invalid signature form).
    </para>
    <para>
      The error codes can be obtained from <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-2a1bcec2cfb387ea1cb9ee08c273cb3e"><title>NOTES</title>
    <para>
      The <emphasis role="bold">EVP</emphasis> interface to digital
      signatures should almost always be used in preference to the low
      level interfaces. This is because the code then becomes transparent
      to the algorithm used and much more flexible.
    </para>
    <para>
      In previous versions of OpenSSL there was a link between message
      digest types and public key algorithms. This meant that "clone"
      digests such as EVP_dss1() needed to be used to sign using SHA1 and
      DSA. This is no longer necessary and the use of clone digest is now
      discouraged.
    </para>
    <para>
      For some key types and parameters the random number generator must be
      seeded or the operation will fail.
    </para>
    <para>
      The call to EVP_DigestVerifyFinal() internally finalizes a copy of
      the digest context. This means that EVP_VerifyUpdate() and
      EVP_VerifyFinal() can be called later to digest and verify additional
      data.
    </para>
    <para>
      Since only a copy of the digest context is ever finalized the context
      must be cleaned up after use by calling EVP_MD_CTX_cleanup() or a
      memory leak will occur.
    </para>
  </refsection>
  <refsection xml:id="ID-ea5e50fb68983bc452254c2ae4c789d1"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>EVP_DigestSignInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_DigestInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>err</refentrytitle> <manvolnum>7</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>evp</refentrytitle>
      <manvolnum>7</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>HMAC</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>MD2</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>MD5</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>MDC2</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>RIPEMD160</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>SHA1</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>dgst</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-851186b0cb7ebcc1ccdece288c07eee2"><title>HISTORY</title>
    <para>
      EVP_DigestVerifyInit(), EVP_DigestVerifyUpdate() and
      EVP_DigestVerifyFinal() were first added to OpenSSL 1.0.0.
    </para>
  </refsection>
  <refsection xml:id="ID-c15ac940c7de2dcd03792f0c8e9ed3ba"><title>COPYRIGHT</title>
    <para>
      Copyright 2006-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>