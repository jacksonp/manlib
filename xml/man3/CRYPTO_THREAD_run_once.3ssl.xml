<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>CRYPTO_THREAD_run_once.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>CRYPTO_THREAD_run_once,
CRYPTO_THREAD_lock_new, CRYPTO_THREAD_read_lock, CRYPTO_THREAD_write_lock,
CRYPTO_THREAD_unlock, CRYPTO_THREAD_lock_free, CRYPTO_atomic_add</refname>
<refpurpose>OpenSSL thread support</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/crypto.h&gt;</synopsis>
<synopsis>CRYPTO_ONCE CRYPTO_ONCE_STATIC_INIT;
int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void));</synopsis>
<synopsis>CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void);
int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock);
int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock);
int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock);
void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock);</synopsis>
<synopsis>int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-d041fb6b0f4457aedbcc1f53dba8d5e3"><title>DESCRIPTION</title>
    <para>
      OpenSSL can be safely used in multi-threaded applications provided
      that support for the underlying OS threading API is built-in.
      Currently, OpenSSL supports the pthread and Windows APIs. OpenSSL can
      also be built without any multi-threading support, for example on
      platforms that don't provide any threading support or that provide a
      threading API that is not yet supported by OpenSSL.
    </para>
    <para>
      The following multi-threading function are provided:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>*
CRYPTO_THREAD_run_once() can be used to perform one-time initialization.
The <emphasis role="bold">once</emphasis> argument must be a pointer to a static object of type
<emphasis role="bold">CRYPTO_ONCE</emphasis> that was statically initialized to the value
<emphasis role="bold">CRYPTO_ONCE_STATIC_INIT</emphasis>.
The <emphasis role="bold">init</emphasis> argument is a pointer to a function that performs the desired
exactly once initialization.
In particular, this can be used to allocate locks in a thread-safe manner,
which can then be used with the locking functions below.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_THREAD_lock_new() allocates, initializes and returns a new read/write
lock.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_THREAD_read_lock() locks the provided <emphasis role="bold">lock</emphasis> for reading.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_THREAD_write_lock() locks the provided <emphasis role="bold">lock</emphasis> for writing.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_THREAD_unlock() unlocks the previously locked <emphasis role="bold">lock</emphasis>.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_THREAD_lock_frees() frees the provided <emphasis role="bold">lock</emphasis>.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_atomic_add() atomically adds <emphasis role="bold">amount</emphasis> to <emphasis role="bold">val</emphasis> and returns the
result of the operation in <emphasis role="bold">ret</emphasis>. <emphasis role="bold">lock</emphasis> will be locked, unless atomic
operations are supported on the specific platform. Because of this, if a
variable is modified by CRYPTO_atomic_add() then CRYPTO_atomic_add() must
be the only way that the variable is modified.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-e5181ba427ab7cf3307e811ce505bac3"><title>RETURN VALUES</title>
    <para>
      CRYPTO_THREAD_run_once() returns 1 on success, or 0 on error.
    </para>
    <para>
      CRYPTO_THREAD_lock_new() returns the allocated lock, or NULL on
      error.
    </para>
    <para>
      CRYPTO_THREAD_lock_frees() returns no value.
    </para>
    <para>
      The other functions return 1 on success or 0 on error.
    </para>
  </refsection>
  <refsection xml:id="ID-cdd753dd5b27ad8fbe1ebb71c41456b4"><title>NOTES</title>
    <para>
      On Windows platforms the CRYPTO_THREAD_* types and functions in the
      openssl/crypto.h header are dependent on some of the types
      customarily made available by including windows.h. The application
      developer is likely to require control over when the latter is
      included, commonly as one of the first included headers. Therefore it
      is defined as an application developer's responsibility to include
      windows.h prior to crypto.h where use of CRYPTO_THREAD_* types and
      functions is required.
    </para>
  </refsection>
  <refsection xml:id="ID-f479ac47260147786b8a58c777d45bfa"><title>EXAMPLE</title>
    <para>
      This example safely initializes and uses a lock.
    </para>
    <screen>#ifdef _WIN32
# include &lt;windows.h&amp;gt;
#endif
#include &amp;lt;openssl/crypto.h&amp;gt;

static CRYPTO_ONCE once = CRYPTO_ONCE_STATIC_INIT;
static CRYPTO_RWLOCK *lock;

static void myinit(void)
{
    lock = CRYPTO_THREAD_lock_new();
}

static int mylock(void)
{
    if (!CRYPTO_THREAD_run_once(&amp;once, void init) || lock == NULL)
        return 0;
    return CRYPTO_THREAD_write_lock(lock);
}

static int myunlock(void)
{
    return CRYPTO_THREAD_unlock(lock);
}

int serialized(void)
{
    int ret = 0;

    if (mylock()) {
        /* Your code here, do not return without releasing the lock! */
        ret = ... ;
    }
    myunlock();
    return ret;
}</screen>
    <para>
      Finalization of locks is an advanced topic, not covered in this
      example. This can only be done at process exit or when a dynamically
      loaded library is no longer in use and is unloaded. The simplest
      solution is to just "leak" the lock in applications and not
      repeatedly load/unload shared libraries that allocate locks.
    </para>
  </refsection>
  <refsection xml:id="ID-cdd753dd5b27ad8fbe1ebb71c41456b4"><title>NOTES</title>
    <para>
      You can find out if OpenSSL was configured with thread support:
    </para>
    <screen>#include &amp;lt;openssl/opensslconf.h&amp;gt;
#if defined(OPENSSL_THREADS)
  // thread support enabled
#else
  // no thread support
#endif</screen>
  </refsection>
  <refsection xml:id="ID-b2967aa1ee2de0a6b0531f2bc8f1e01a"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>crypto</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-78fdb5c77791ef70ac9dbebf803b20f3"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>