<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_set_options.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_set_options, SSL_set_options, SSL_CTX_clear_options,
SSL_clear_options, SSL_CTX_get_options, SSL_get_options,
SSL_get_secure_renegotiation_support</refname>
<refpurpose>manipulate SSL options</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>long SSL_CTX_set_options(SSL_CTX *ctx, long options);
long SSL_set_options(SSL *ssl, long options);</synopsis>
<synopsis>long SSL_CTX_clear_options(SSL_CTX *ctx, long options);
long SSL_clear_options(SSL *ssl, long options);</synopsis>
<synopsis>long SSL_CTX_get_options(SSL_CTX *ctx);
long SSL_get_options(SSL *ssl);</synopsis>
<synopsis>long SSL_get_secure_renegotiation_support(SSL *ssl);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-a0acb4d6f5afd45baaa6771d9ab30aa0"><title>DESCRIPTION</title>
    <para>
      SSL_CTX_set_options() adds the options set via bitmask in <emphasis role="bold">options</emphasis> to <emphasis role="bold">ctx</emphasis>. Options already set before are not
      cleared!
    </para>
    <para>
      SSL_set_options() adds the options set via bitmask in <emphasis role="bold">options</emphasis> to <emphasis role="bold">ssl</emphasis>. Options already set before are not
      cleared!
    </para>
    <para>
      SSL_CTX_clear_options() clears the options set via bitmask in
      <emphasis role="bold">options</emphasis> to <emphasis role="bold">ctx</emphasis>.
    </para>
    <para>
      SSL_clear_options() clears the options set via bitmask in <emphasis role="bold">options</emphasis> to <emphasis role="bold">ssl</emphasis>.
    </para>
    <para>
      SSL_CTX_get_options() returns the options set for <emphasis role="bold">ctx</emphasis>.
    </para>
    <para>
      SSL_get_options() returns the options set for <emphasis role="bold">ssl</emphasis>.
    </para>
    <para>
      SSL_get_secure_renegotiation_support() indicates whether the peer
      supports secure renegotiation. Note, this is implemented via a macro.
    </para>
  </refsection>
  <refsection xml:id="ID-99ac20b4ec3b9fc36ed11d369f9aba27"><title>NOTES</title>
    <para>
      The behaviour of the SSL library can be changed by setting several
      options. The options are coded as bitmasks and can be combined by a
      bitwise <emphasis role="bold">or</emphasis> operation (|).
    </para>
    <para>
      SSL_CTX_set_options() and SSL_set_options() affect the (external)
      protocol behaviour of the SSL library. The (internal) behaviour of
      the API can be changed by using the similar <citerefentry>
      <refentrytitle>SSL_CTX_set_mode</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> and SSL_set_mode()
      functions.
    </para>
    <para>
      During a handshake, the option settings of the SSL object are used.
      When a new SSL object is created from a context using SSL_new(), the
      current option setting is copied. Changes to <emphasis role="bold">ctx</emphasis> do not affect already created SSL objects.
      SSL_clear() does not affect the settings.
    </para>
    <para>
      The following <emphasis role="bold">bug workaround</emphasis> options
      are available:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG</term>
          <listitem>
            <para>
	      ...
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER</term>
          <listitem>
            <para>
	      ...
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_SAFARI_ECDHE_ECDSA_BUG</term>
          <listitem>
            <para>
	      Don't prefer ECDHE-ECDSA ciphers when the client appears to
	      be Safari on OS X. OS X 10.8..10.8.3 has broken support for
	      ECDHE-ECDSA ciphers.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_SSLEAY_080_CLIENT_DH_BUG</term>
          <listitem>
            <para>
	      ...
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_TLS_D5_BUG</term>
          <listitem>
            <para>
	      ...
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</term>
          <listitem>
            <para>
	      Disables a countermeasure against a SSL 3.0/TLS 1.0 protocol
	      vulnerability affecting CBC ciphers, which cannot be handled
	      by some broken SSL implementations.  This option has no
	      effect for connections using other ciphers.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_TLSEXT_PADDING</term>
          <listitem>
            <para>
	      Adds a padding extension to ensure the ClientHello size is
	      never between 256 and 511 bytes in length. This is needed as
	      a workaround for some implementations.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_ALL</term>
          <listitem>
            <para>
	      All of the above bug workarounds.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      It is usually safe to use <emphasis role="bold">SSL_OP_ALL</emphasis>
      to enable the bug workaround options if compatibility with somewhat
      broken implementations is desired.
    </para>
    <para>
      The following <emphasis role="bold">modifying</emphasis> options are
      available:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>SSL_OP_TLS_ROLLBACK_BUG</term>
          <listitem>
            <para>
	      Disable version rollback attack detection.
            </para>
            <para>
	      During the client key exchange, the client must send the same
	      information about acceptable SSL/TLS protocol levels as
	      during the first hello. Some clients violate this rule by
	      adapting to the server's answer. (Example: the client sends a
	      SSLv2 hello and accepts up to SSLv3.1=TLSv1, the server only
	      understands up to SSLv3. In this case the client must still
	      use the same SSLv3.1=TLSv1 announcement. Some clients step
	      down to SSLv3 with respect to the server's answer and violate
	      the version rollback protection.)
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_SINGLE_DH_USE</term>
          <listitem>
            <para>
	      Always create a new key when using temporary/ephemeral DH
	      parameters (see <citerefentry>
	      <refentrytitle>SSL_CTX_set_tmp_dh_callback</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry>). This option must
	      be used to prevent small subgroup attacks, when the DH
	      parameters were not generated using "strong" primes (e.g.
	      when using DSA-parameters, see <citerefentry>
	      <refentrytitle>dhparam</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry>). If "strong" primes
	      were used, it is not strictly necessary to generate a new DH
	      key during each handshake but it is also recommended.
	      <emphasis role="bold">SSL_OP_SINGLE_DH_USE</emphasis> should
	      therefore be enabled whenever temporary/ephemeral DH
	      parameters are used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_EPHEMERAL_RSA</term>
          <listitem>
            <para>
	      This option is no longer implemented and is treated as no op.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_CIPHER_SERVER_PREFERENCE</term>
          <listitem>
            <para>
	      When choosing a cipher, use the server's preferences instead
	      of the client preferences. When not set, the SSL server will
	      always follow the clients preferences. When set, the SSL/TLS
	      server will choose following its own preferences.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_PKCS1_CHECK_1</term>
          <listitem>
            <para>
	      ...
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_PKCS1_CHECK_2</term>
          <listitem>
            <para>
	      ...
            </para>
            <screen></screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_NO_SSLv3, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1,
SSL_OP_NO_TLSv1_2, SSL_OP_NO_DTLSv1, SSL_OP_NO_DTLSv1_2</term>
          <listitem>
            <para>
	      These options turn off the SSLv3, TLSv1, TLSv1.1 or TLSv1.2
	      protocol versions with TLS or the DTLSv1, DTLSv1.2 versions
	      with DTLS, respectively. As of OpenSSL 1.1.0, these options
	      are deprecated, use <citerefentry>
	      <refentrytitle>SSL_CTX_set_min_proto_version</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> and <citerefentry>
	      <refentrytitle>SSL_CTX_set_max_proto_version</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> instead.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION</term>
          <listitem>
            <para>
	      When performing renegotiation as a server, always start a new
	      session (i.e., session resumption requests are only accepted
	      in the initial handshake). This option is not needed for
	      clients.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_NO_TICKET</term>
          <listitem>
            <para>
	      Normally clients and servers will, where possible,
	      transparently make use of RFC4507bis tickets for stateless
	      session resumption.
            </para>
            <para>
	      If this option is set this functionality is disabled and
	      tickets will not be used by clients or servers.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</term>
          <listitem>
            <para>
	      Allow legacy insecure renegotiation between OpenSSL and
	      unpatched clients or servers. See the <emphasis role="bold">SECURE RENEGOTIATION</emphasis> section for more
	      details.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_OP_LEGACY_SERVER_CONNECT</term>
          <listitem>
            <para>
	      Allow legacy insecure renegotiation between OpenSSL and
	      unpatched servers <emphasis role="bold">only</emphasis>: this
	      option is currently set by default. See the <emphasis role="bold">SECURE RENEGOTIATION</emphasis> section for more
	      details.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-785aefe48b1cc3bb09a9f1dacd77285d"><title>SECURE RENEGOTIATION</title>
    <para>
      OpenSSL always attempts to use secure renegotiation as described in
      RFC5746. This counters the prefix attack described in CVE-2009-3555
      and elsewhere.
    </para>
    <para>
      This attack has far reaching consequences which application writers
      should be aware of. In the description below an implementation
      supporting secure renegotiation is referred to as <emphasis role="italic">patched</emphasis>. A server not supporting secure
      renegotiation is referred to as <emphasis role="italic">unpatched</emphasis>.
    </para>
    <para>
      The following sections describe the operations permitted by OpenSSL's
      secure renegotiation implementation.
    </para>
    <refsection xml:id="ID-56e1ee2da10a0471860e0bca822fb5d7"><title>Patched client and server</title>
      <para>
	Connections and renegotiation are always permitted by OpenSSL
	implementations.
      </para>
    </refsection>
    <refsection xml:id="ID-ff39d1af5e3e40d5d21deb81f32f0ce3"><title>Unpatched client and patched OpenSSL server</title>
      <para>
	The initial connection succeeds but client renegotiation is denied
	by the server with a <emphasis role="bold">no_renegotiation</emphasis> warning alert if TLS v1.0
	is used or a fatal <emphasis role="bold">handshake_failure</emphasis> alert in SSL v3.0.
      </para>
      <para>
	If the patched OpenSSL server attempts to renegotiate a fatal
	<emphasis role="bold">handshake_failure</emphasis> alert is sent.
	This is because the server code may be unaware of the unpatched
	nature of the client.
      </para>
      <para>
	If the option <emphasis role="bold">SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</emphasis> is
	set then renegotiation <emphasis role="bold">always</emphasis>
	succeeds.
      </para>
    </refsection>
    <refsection xml:id="ID-26cbb96d83bf53f6b7f7a89ec1050ae3"><title>Patched OpenSSL client and unpatched server.</title>
      <para>
	If the option <emphasis role="bold">SSL_OP_LEGACY_SERVER_CONNECT</emphasis> or <emphasis role="bold">SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</emphasis> is
	set then initial connections and renegotiation between patched
	OpenSSL clients and unpatched servers succeeds. If neither option
	is set then initial connections to unpatched servers will fail.
      </para>
      <para>
	The option <emphasis role="bold">SSL_OP_LEGACY_SERVER_CONNECT</emphasis> is currently
	set by default even though it has security implications: otherwise
	it would be impossible to connect to unpatched servers (i.e. all of
	them initially) and this is clearly not acceptable. Renegotiation
	is permitted because this does not add any additional security
	issues: during an attack clients do not see any renegotiations
	anyway.
      </para>
      <para>
	As more servers become patched the option <emphasis role="bold">SSL_OP_LEGACY_SERVER_CONNECT</emphasis> will <emphasis role="bold">not</emphasis> be set by default in a future version of
	OpenSSL.
      </para>
      <para>
	OpenSSL client applications wishing to ensure they can connect to
	unpatched servers should always <emphasis role="bold">set</emphasis> <emphasis role="bold">SSL_OP_LEGACY_SERVER_CONNECT</emphasis>
      </para>
      <para>
	OpenSSL client applications that want to ensure they can <emphasis role="bold">not</emphasis> connect to unpatched servers (and thus
	avoid any security issues) should always <emphasis role="bold">clear</emphasis> <emphasis role="bold">SSL_OP_LEGACY_SERVER_CONNECT</emphasis> using
	SSL_CTX_clear_options() or SSL_clear_options().
      </para>
      <para>
	The difference between the <emphasis role="bold">SSL_OP_LEGACY_SERVER_CONNECT</emphasis> and <emphasis role="bold">SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</emphasis>
	options is that <emphasis role="bold">SSL_OP_LEGACY_SERVER_CONNECT</emphasis> enables initial
	connections and secure renegotiation between OpenSSL clients and
	unpatched servers <emphasis role="bold">only</emphasis>, while
	<emphasis role="bold">SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</emphasis>
	allows initial connections and renegotiation between OpenSSL and
	unpatched clients or servers.
      </para>
    </refsection>
  </refsection>
  <refsection xml:id="ID-4b94f8cf1a390c1ad811784e9590a3ad"><title>RETURN VALUES</title>
    <para>
      SSL_CTX_set_options() and SSL_set_options() return the new options
      bitmask after adding <emphasis role="bold">options</emphasis>.
    </para>
    <para>
      SSL_CTX_clear_options() and SSL_clear_options() return the new
      options bitmask after clearing <emphasis role="bold">options</emphasis>.
    </para>
    <para>
      SSL_CTX_get_options() and SSL_get_options() return the current
      bitmask.
    </para>
    <para>
      SSL_get_secure_renegotiation_support() returns 1 is the peer supports
      secure renegotiation and 0 if it does not.
    </para>
  </refsection>
  <refsection xml:id="ID-1e81f780633ed25522bbf2b81a6e14e6"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_clear</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_tmp_dh_callback</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_min_proto_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>dhparam</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-0e560b9eb227d07587c0d75ff15dbe89"><title>HISTORY</title>
    <para>
      The attempt to always try to use secure renegotiation was added in
      Openssl 0.9.8m.
    </para>
  </refsection>
</refentry>