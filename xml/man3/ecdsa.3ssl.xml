<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>ecdsa.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>ECDSA_SIG_new, ECDSA_SIG_free, i2d_ECDSA_SIG, d2i_ECDSA_SIG, ECDSA_size,
ECDSA_sign, ECDSA_do_sign, ECDSA_verify, ECDSA_do_verify, ECDSA_sign_setup,
ECDSA_sign_ex, ECDSA_do_sign_ex</refname>
<refpurpose>low level elliptic curve digital signature
algorithm (ECDSA) functions.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ecdsa.h&gt;</synopsis>
<synopsis>ECDSA_SIG *ECDSA_SIG_new(void);
void ECDSA_SIG_free(ECDSA_SIG *sig);
void ECDSA_SIG_get0(BIGNUM **pr, BIGNUM **ps, const ECDSA_SIG *sig);
int i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);
ECDSA_SIG *d2i_ECDSA_SIG(ECDSA_SIG **sig, const unsigned char **pp, long len);
int ECDSA_size(const EC_KEY *eckey);</synopsis>
<synopsis>int ECDSA_sign(int type, const unsigned char *dgst, int dgstlen,
               unsigned char *sig, unsigned int *siglen, EC_KEY *eckey);
ECDSA_SIG *ECDSA_do_sign(const unsigned char *dgst, int dgst_len,
                         EC_KEY *eckey);</synopsis>
<synopsis>int ECDSA_verify(int type, const unsigned char *dgst, int dgstlen,
                 const unsigned char *sig, int siglen, EC_KEY *eckey);
int ECDSA_do_verify(const unsigned char *dgst, int dgst_len,
                    const ECDSA_SIG *sig, EC_KEY* eckey);</synopsis>
<synopsis>ECDSA_SIG *ECDSA_do_sign_ex(const unsigned char *dgst, int dgstlen,
                            const BIGNUM *kinv, const BIGNUM *rp,
                            EC_KEY *eckey);
int ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **rp);
int ECDSA_sign_ex(int type, const unsigned char *dgst, int dgstlen,
                  unsigned char *sig, unsigned int *siglen,
                  const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-f5de99d2d42109357e354a95a7f258e4"><title>DESCRIPTION</title>
    <para>
      Note: these functions provide a low level interface to ECDSA. Most
      applications should use the higher level <emphasis role="bold">EVP</emphasis> interface such as <citerefentry>
      <refentrytitle>EVP_DigestSignInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> or <citerefentry>
      <refentrytitle>EVP_DigestVerifyInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> instead.
    </para>
    <para>
      <emphasis role="bold">ECDSA_SIG</emphasis> is an opaque structure
      consisting of two BIGNUMs for the <emphasis role="bold">r</emphasis>
      and <emphasis role="bold">s</emphasis> value of an ECDSA signature
      (see X9.62 or FIPS 186-2).
    </para>
    <para>
      ECDSA_SIG_new() allocates a new <emphasis role="bold">ECDSA_SIG</emphasis> structure (note: this function also
      allocates the BIGNUMs) and initializes it.
    </para>
    <para>
      ECDSA_SIG_free() frees the <emphasis role="bold">ECDSA_SIG</emphasis>
      structure <emphasis role="bold">sig</emphasis>.
    </para>
    <para>
      ECDSA_SIG_get0() returns internal pointers the <emphasis role="bold">r</emphasis> and <emphasis role="bold">s</emphasis>
      values contained in <emphasis role="bold">sig</emphasis>. The values
      can then be examined or initialised.
    </para>
    <para>
      i2d_ECDSA_SIG() creates the DER encoding of the ECDSA signature
      <emphasis role="bold">sig</emphasis> and writes the encoded signature
      to <emphasis role="bold">*pp</emphasis> (note: if <emphasis role="bold">pp</emphasis> is NULL i2d_ECDSA_SIG() returns the
      expected length in bytes of the DER encoded signature).
      i2d_ECDSA_SIG() returns the length of the DER encoded signature (or 0
      on error).
    </para>
    <para>
      d2i_ECDSA_SIG() decodes a DER encoded ECDSA signature and returns the
      decoded signature in a newly allocated <emphasis role="bold">ECDSA_SIG</emphasis> structure. <emphasis role="bold">*sig</emphasis> points to the buffer containing the DER
      encoded signature of size <emphasis role="bold">len</emphasis>.
    </para>
    <para>
      ECDSA_size() returns the maximum length of a DER encoded ECDSA
      signature created with the private EC key <emphasis role="bold">eckey</emphasis>.
    </para>
    <para>
      ECDSA_sign() computes a digital signature of the <emphasis role="bold">dgstlen</emphasis> bytes hash value <emphasis role="bold">dgst</emphasis> using the private EC key <emphasis role="bold">eckey</emphasis>. The DER encoded signatures is stored in
      <emphasis role="bold">sig</emphasis> and it's length is returned in
      <emphasis role="bold">sig_len</emphasis>. Note: <emphasis role="bold">sig</emphasis> must point to ECDSA_size(eckey) bytes of
      memory. The parameter <emphasis role="bold">type</emphasis> is
      currently ignored. ECDSA_sign() is wrapper function for
      ECDSA_sign_ex() with <emphasis role="bold">kinv</emphasis> and
      <emphasis role="bold">rp</emphasis> set to NULL.
    </para>
    <para>
      ECDSA_do_sign() is similar to ECDSA_sign() except the signature is
      returned as a newly allocated <emphasis role="bold">ECDSA_SIG</emphasis> structure (or NULL on error).
      ECDSA_do_sign() is a wrapper function for ECDSA_do_sign_ex() with
      <emphasis role="bold">kinv</emphasis> and <emphasis role="bold">rp</emphasis> set to NULL.
    </para>
    <para>
      ECDSA_verify() verifies that the signature in <emphasis role="bold">sig</emphasis> of size <emphasis role="bold">siglen</emphasis> is a valid ECDSA signature of the hash
      value <emphasis role="bold">dgst</emphasis> of size <emphasis role="bold">dgstlen</emphasis> using the public key <emphasis role="bold">eckey</emphasis>.  The parameter <emphasis role="bold">type</emphasis> is ignored.
    </para>
    <para>
      ECDSA_do_verify() is similar to ECDSA_verify() except the signature
      is presented in the form of a pointer to an <emphasis role="bold">ECDSA_SIG</emphasis> structure.
    </para>
    <para>
      The remaining functions utilise the internal <emphasis role="bold">kinv</emphasis> and <emphasis role="bold">r</emphasis>
      values used during signature computation. Most applications will
      never need to call these and some external ECDSA ENGINE
      implementations may not support them at all if either <emphasis role="bold">kinv</emphasis> or <emphasis role="bold">r</emphasis> is
      not <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      ECDSA_sign_setup() may be used to precompute parts of the signing
      operation. <emphasis role="bold">eckey</emphasis> is the private EC
      key and <emphasis role="bold">ctx</emphasis> is a pointer to
      <emphasis role="bold">BN_CTX</emphasis> structure (or NULL). The
      precomputed values or returned in <emphasis role="bold">kinv</emphasis> and <emphasis role="bold">rp</emphasis>
      and can be used in a later call to ECDSA_sign_ex() or
      ECDSA_do_sign_ex().
    </para>
    <para>
      ECDSA_sign_ex() computes a digital signature of the <emphasis role="bold">dgstlen</emphasis> bytes hash value <emphasis role="bold">dgst</emphasis> using the private EC key <emphasis role="bold">eckey</emphasis> and the optional pre-computed values
      <emphasis role="bold">kinv</emphasis> and <emphasis role="bold">rp</emphasis>. The DER encoded signatures is stored in
      <emphasis role="bold">sig</emphasis> and it's length is returned in
      <emphasis role="bold">sig_len</emphasis>. Note: <emphasis role="bold">sig</emphasis> must point to ECDSA_size(eckey) bytes of
      memory. The parameter <emphasis role="bold">type</emphasis> is
      ignored.
    </para>
    <para>
      ECDSA_do_sign_ex() is similar to ECDSA_sign_ex() except the signature
      is returned as a newly allocated <emphasis role="bold">ECDSA_SIG</emphasis> structure (or NULL on error).
    </para>
  </refsection>
  <refsection xml:id="ID-3b27086a2b185d44b00cd19d0d0d6fa0"><title>RETURN VALUES</title>
    <para>
      ECDSA_size() returns the maximum length signature or 0 on error.
    </para>
    <para>
      ECDSA_sign(), ECDSA_sign_ex() and ECDSA_sign_setup() return 1 if
      successful or 0 on error.
    </para>
    <para>
      ECDSA_do_sign() and ECDSA_do_sign_ex() return a pointer to an
      allocated <emphasis role="bold">ECDSA_SIG</emphasis> structure or
      NULL on error.
    </para>
    <para>
      ECDSA_verify() and ECDSA_do_verify() return 1 for a valid signature,
      0 for an invalid signature and -1 on error. The error codes can be
      obtained by <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-b1d50c90af1ffccf6ab2099364409ece"><title>EXAMPLES</title>
    <para>
      Creating an ECDSA signature of a given SHA-256 hash value using the
      named curve prime256v1 (aka P-256).
    </para>
    <para>
      First step: create an EC_KEY object (note: this part is <emphasis role="bold">not</emphasis> ECDSA specific)
    </para>
    <screen>int        ret;
ECDSA_SIG *sig;
EC_KEY    *eckey;
eckey = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
if (eckey == NULL) {
   /* error */
}
if (EC_KEY_generate_key(eckey) == 0) {
   /* error */
}</screen>
    <para>
      Second step: compute the ECDSA signature of a SHA-256 hash value
      using ECDSA_do_sign():
    </para>
    <screen>sig = ECDSA_do_sign(digest, 32, eckey);
if (sig == NULL) {
   /* error */
}</screen>
    <para>
      or using ECDSA_sign():
    </para>
    <screen>unsigned char *buffer, *pp;
int            buf_len;
buf_len = ECDSA_size(eckey);
buffer  = OPENSSL_malloc(buf_len);
pp = buffer;
if (ECDSA_sign(0, dgst, dgstlen, pp, &amp;buf_len, eckey) == 0) {
   /* error */
}</screen>
    <para>
      Third step: verify the created ECDSA signature using
      ECDSA_do_verify():
    </para>
    <screen>ret = ECDSA_do_verify(digest, 32, sig, eckey);</screen>
    <para>
      or using ECDSA_verify():
    </para>
    <screen>ret = ECDSA_verify(0, digest, 32, buffer, buf_len, eckey);</screen>
    <para>
      and finally evaluate the return value:
    </para>
    <screen>if (ret == 1) {
   /* signature ok */
} else if (ret == 0) {
   /* incorrect signature */
} else {
   /* error */
}</screen>
  </refsection>
  <refsection xml:id="ID-62bdd5621d2e39f691408d712b6fa0a0"><title>CONFORMING TO</title>
    <para>
      ANSI X9.62, US Federal Information Processing Standard FIPS 186-2
      (Digital Signature Standard, DSS)
    </para>
  </refsection>
  <refsection xml:id="ID-b60b85cac98c8705827076cb52509b16"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>dsa</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>rsa</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EVP_DigestSignInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_DigestVerifyInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
</refentry>