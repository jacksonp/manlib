<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>threads.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>CRYPTO_THREAD_run_once,
CRYPTO_THREAD_lock_new, CRYPTO_THREAD_read_lock, CRYPTO_THREAD_write_lock,
CRYPTO_THREAD_unlock, CRYPTO_THREAD_lock_free, CRYPTO_atomic_add</refname>
<refpurpose>OpenSSL thread support</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/crypto.h&gt;</synopsis>
<synopsis>CRYPTO_ONCE CRYPTO_ONCE_STATIC_INIT;
int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void));</synopsis>
<synopsis>CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void);
int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock);
int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock);
int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock);
void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock);</synopsis>
<synopsis>int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-4832e5555a82cf28b6726657f755f239"><title>DESCRIPTION</title>
    <para>
      OpenSSL can be safely used in multi-threaded applications provided
      that support for the underlying OS threading API is built-in.
      Currently, OpenSSL supports the pthread and Windows APIs. OpenSSL can
      also be built without any multi-threading support, for example on
      platforms that don't provide any threading support or that provide a
      threading API that is not yet supported by OpenSSL.
    </para>
    <para>
      The following multi-threading function are provided:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>*
CRYPTO_THREAD_run_once() can be used to perform one-time initialization.
The <emphasis role="bold">once</emphasis> argument must be a pointer to a static object of type
<emphasis role="bold">CRYPTO_ONCE</emphasis> that was statically initialized to the value
<emphasis role="bold">CRYPTO_ONCE_STATIC_INIT</emphasis>.
The <emphasis role="bold">init</emphasis> argument is a pointer to a function that performs the desired
exactly once initialization.
In particular, this can be used to allocate locks in a thread-safe manner,
which can then be used with the locking functions below.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_THREAD_lock_new() allocates, initializes and returns a new read/write
lock.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_THREAD_read_lock() locks the provided <emphasis role="bold">lock</emphasis> for reading.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_THREAD_write_lock() locks the provided <emphasis role="bold">lock</emphasis> for writing.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_THREAD_unlock() unlocks the previously locked <emphasis role="bold">lock</emphasis>.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_THREAD_lock_frees() frees the provided <emphasis role="bold">lock</emphasis>.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>*
CRYPTO_atomic_add() atomically adds <emphasis role="bold">amount</emphasis> to <emphasis role="bold">val</emphasis> and returns the
result of the operation in <emphasis role="bold">ret</emphasis>. <emphasis role="bold">lock</emphasis> will be locked, unless atomic
operations are supported on the specific platform. Because of this, if a
variable is modified by CRYPTO_atomic_add() then CRYPTO_atomic_add() must
be the only way that the variable is modified.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-07448e80b23e5c45dc6e6d63b54558c4"><title>RETURN VALUES</title>
    <para>
      CRYPTO_THREAD_run_once() returns 1 on success, or 0 on error.
    </para>
    <para>
      CRYPTO_THREAD_lock_new() returns the allocated lock, or NULL on
      error.
    </para>
    <para>
      CRYPTO_THREAD_lock_frees() returns no value.
    </para>
    <para>
      The other functions return 1 on success or 0 on error.
    </para>
  </refsection>
  <refsection xml:id="ID-d6f0739d2f48167d145e03aeaac3805d"><title>EXAMPLE</title>
    <para>
      This example safely initializes and uses a lock.
    </para>
    <screen>#include &amp;lt;openssl/crypto.h&amp;gt;

static CRYPTO_ONCE once = CRYPTO_ONCE_STATIC_INIT;
static CRYPTO_RWLOCK *lock;

static void myinit(void)
{
    lock = CRYPTO_THREAD_lock_new();
}

static int mylock(void)
{
    if (!CRYPTO_THREAD_run_once(&amp;once, void init) || lock == NULL)
        return 0;
    return CRYPTO_THREAD_write_lock(lock);
}

static int myunlock(void)
{
    return CRYPTO_THREAD_unlock(lock);
}

int serialized(void)
{
    int ret = 0;

    if (mylock()) {
        /* Your code here, do not return without releasing the lock! */
        ret = ... ;
    }
    myunlock();
    return ret;
}</screen>
    <para>
      Finalization of locks is an advanced topic, not covered in this
      example. This can only be done at process exit or when a dynamically
      loaded library is no longer in use and is unloaded. The simplest
      solution is to just "leak" the lock in applications and not
      repeatedly load/unload shared libraries that allocate locks.
    </para>
  </refsection>
  <refsection xml:id="ID-e18741d3b03aa44ee100c74b5baa6f79"><title>NOTES</title>
    <para>
      You can find out if OpenSSL was configured with thread support:
    </para>
    <screen>#include &amp;lt;openssl/opensslconf.h&amp;gt;
#if defined(OPENSSL_THREADS)
  // thread support enabled
#else
  // no thread support
#endif</screen>
  </refsection>
  <refsection xml:id="ID-e5da1df2008cab4d97cc66790431c8a2"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>crypto</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
</refentry>