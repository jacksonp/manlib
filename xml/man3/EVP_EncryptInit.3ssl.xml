<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EVP_EncryptInit.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EVP_CIPHER_CTX_new, EVP_CIPHER_CTX_reset, EVP_CIPHER_CTX_free,
EVP_EncryptInit_ex, EVP_EncryptUpdate, EVP_EncryptFinal_ex,
EVP_DecryptInit_ex, EVP_DecryptUpdate, EVP_DecryptFinal_ex,
EVP_CipherInit_ex, EVP_CipherUpdate, EVP_CipherFinal_ex,
EVP_CIPHER_CTX_set_key_length, EVP_CIPHER_CTX_ctrl, EVP_EncryptInit,
EVP_EncryptFinal, EVP_DecryptInit, EVP_DecryptFinal,
EVP_CipherInit, EVP_CipherFinal, EVP_get_cipherbyname,
EVP_get_cipherbynid, EVP_get_cipherbyobj, EVP_CIPHER_nid,
EVP_CIPHER_block_size, EVP_CIPHER_key_length, EVP_CIPHER_iv_length,
EVP_CIPHER_flags, EVP_CIPHER_mode, EVP_CIPHER_type, EVP_CIPHER_CTX_cipher,
EVP_CIPHER_CTX_nid, EVP_CIPHER_CTX_block_size, EVP_CIPHER_CTX_key_length,
EVP_CIPHER_CTX_iv_length, EVP_CIPHER_CTX_get_app_data,
EVP_CIPHER_CTX_set_app_data, EVP_CIPHER_CTX_type, EVP_CIPHER_CTX_flags,
EVP_CIPHER_CTX_mode, EVP_CIPHER_param_to_asn1, EVP_CIPHER_asn1_to_param,
EVP_CIPHER_CTX_set_padding, EVP_enc_null, EVP_des_cbc, EVP_des_ecb,
EVP_des_cfb, EVP_des_ofb, EVP_des_ede_cbc, EVP_des_ede, EVP_des_ede_ofb,
EVP_des_ede_cfb, EVP_des_ede3_cbc, EVP_des_ede3, EVP_des_ede3_ofb,
EVP_des_ede3_cfb, EVP_desx_cbc, EVP_rc4, EVP_rc4_40, EVP_idea_cbc,
EVP_idea_ecb, EVP_idea_cfb, EVP_idea_ofb, EVP_rc2_cbc,
EVP_rc2_ecb, EVP_rc2_cfb, EVP_rc2_ofb, EVP_rc2_40_cbc, EVP_rc2_64_cbc,
EVP_bf_cbc, EVP_bf_ecb, EVP_bf_cfb, EVP_bf_ofb, EVP_cast5_cbc,
EVP_cast5_ecb, EVP_cast5_cfb, EVP_cast5_ofb, EVP_rc5_32_12_16_cbc,
EVP_rc5_32_12_16_ecb, EVP_rc5_32_12_16_cfb, EVP_rc5_32_12_16_ofb,
EVP_aes_128_cbc, EVP_aes_128_ecb, EVP_aes_128_cfb, EVP_aes_128_ofb,
EVP_aes_192_cbc, EVP_aes_192_ecb, EVP_aes_192_cfb, EVP_aes_192_ofb,
EVP_aes_256_cbc, EVP_aes_256_ecb, EVP_aes_256_cfb, EVP_aes_256_ofb,
EVP_aes_128_gcm, EVP_aes_192_gcm, EVP_aes_256_gcm,
EVP_aes_128_ccm, EVP_aes_192_ccm, EVP_aes_256_ccm</refname>
<refpurpose>EVP cipher routines</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis>EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void);
int EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX *ctx);
void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *ctx);</synopsis>
<synopsis>int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
        ENGINE *impl, unsigned char *key, unsigned char *iv);
int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
        int *outl, unsigned char *in, int inl);
int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out,
        int *outl);</synopsis>
<synopsis>int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
        ENGINE *impl, unsigned char *key, unsigned char *iv);
int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
        int *outl, unsigned char *in, int inl);
int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm,
        int *outl);</synopsis>
<synopsis>int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
        ENGINE *impl, unsigned char *key, unsigned char *iv, int enc);
int EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
        int *outl, unsigned char *in, int inl);
int EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm,
        int *outl);</synopsis>
<synopsis>int EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
        unsigned char *key, unsigned char *iv);
int EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
        int *outl);</synopsis>
<synopsis>int EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
        unsigned char *key, unsigned char *iv);
int EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm,
        int *outl);</synopsis>
<synopsis>int EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
        unsigned char *key, unsigned char *iv, int enc);
int EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm,
        int *outl);</synopsis>
<synopsis>int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *x, int padding);
int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen);
int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);</synopsis>
<synopsis>const EVP_CIPHER *EVP_get_cipherbyname(const char *name);
const EVP_CIPHER *EVP_get_cipherbynid(int nid);
const EVP_CIPHER *EVP_get_cipherbyobj(const ASN1_OBJECT *a);</synopsis>
<synopsis>int EVP_CIPHER_nid(const EVP_CIPHER *e);
int EVP_CIPHER_block_size(const EVP_CIPHER *e);
int EVP_CIPHER_key_length(const EVP_CIPHER *e)
int EVP_CIPHER_key_length(const EVP_CIPHER *e);
int EVP_CIPHER_iv_length(const EVP_CIPHER *e);
unsigned long EVP_CIPHER_flags(const EVP_CIPHER *e);
unsigned long EVP_CIPHER_mode(const EVP_CIPHER *e);
int EVP_CIPHER_type(const EVP_CIPHER *ctx);</synopsis>
<synopsis>const EVP_CIPHER *EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx);
int EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx);
int EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx);
int EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx);
int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx);
void *EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx);
void EVP_CIPHER_CTX_set_app_data(const EVP_CIPHER_CTX *ctx, void *data);
int EVP_CIPHER_CTX_type(const EVP_CIPHER_CTX *ctx);
int EVP_CIPHER_CTX_mode(const EVP_CIPHER_CTX *ctx);</synopsis>
<synopsis>int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-1317de2f247afd368169aaa87865b4b4"><title>DESCRIPTION</title>
    <para>
      The EVP cipher routines are a high level interface to certain
      symmetric ciphers.
    </para>
    <para>
      EVP_CIPHER_CTX_new() creates a cipher context.
    </para>
    <para>
      EVP_CIPHER_CTX_free() clears all information from a cipher context
      and free up any allocated memory associate with it, including
      <emphasis role="bold">ctx</emphasis> itself. This function should be
      called after all operations using a cipher are complete so sensitive
      information does not remain in memory.
    </para>
    <para>
      EVP_EncryptInit_ex() sets up cipher context <emphasis role="bold">ctx</emphasis> for encryption with cipher <emphasis role="bold">type</emphasis> from ENGINE <emphasis role="bold">impl</emphasis>. <emphasis role="bold">ctx</emphasis>
      must be created before calling this function. <emphasis role="bold">type</emphasis> is normally supplied by a function such
      as EVP_aes_256_cbc(). If <emphasis role="bold">impl</emphasis> is
      NULL then the default implementation is used. <emphasis role="bold">key</emphasis> is the symmetric key to use and <emphasis role="bold">iv</emphasis> is the IV to use (if necessary), the actual
      number of bytes used for the key and IV depends on the cipher. It is
      possible to set all parameters to NULL except <emphasis role="bold">type</emphasis> in an initial call and supply the
      remaining parameters in subsequent calls, all of which have <emphasis role="bold">type</emphasis> set to NULL. This is done when the
      default cipher parameters are not appropriate.
    </para>
    <para>
      EVP_EncryptUpdate() encrypts <emphasis role="bold">inl</emphasis>
      bytes from the buffer <emphasis role="bold">in</emphasis> and writes
      the encrypted version to <emphasis role="bold">out</emphasis>. This
      function can be called multiple times to encrypt successive blocks of
      data. The amount of data written depends on the block alignment of
      the encrypted data: as a result the amount of data written may be
      anything from zero bytes to (inl + cipher_block_size - 1) so
      <emphasis role="bold">out</emphasis> should contain sufficient room.
      The actual number of bytes written is placed in <emphasis role="bold">outl</emphasis>. It also checks if <emphasis role="bold">in</emphasis> and <emphasis role="bold">out</emphasis>
      are partially overlapping, and if they are 0 is returned to indicate
      failure.
    </para>
    <para>
      If padding is enabled (the default) then EVP_EncryptFinal_ex()
      encrypts the "final" data, that is any data that remains in a partial
      block. It uses standard block padding (aka PKCS padding) as described
      in the NOTES section, below. The encrypted final data is written to
      <emphasis role="bold">out</emphasis> which should have sufficient
      space for one cipher block. The number of bytes written is placed in
      <emphasis role="bold">outl</emphasis>. After this function is called
      the encryption operation is finished and no further calls to
      EVP_EncryptUpdate() should be made.
    </para>
    <para>
      If padding is disabled then EVP_EncryptFinal_ex() will not encrypt
      any more data and it will return an error if any data remains in a
      partial block: that is if the total data length is not a multiple of
      the block size.
    </para>
    <para>
      EVP_DecryptInit_ex(), EVP_DecryptUpdate() and EVP_DecryptFinal_ex()
      are the corresponding decryption operations. EVP_DecryptFinal() will
      return an error code if padding is enabled and the final block is not
      correctly formatted. The parameters and restrictions are identical to
      the encryption operations except that if padding is enabled the
      decrypted data buffer <emphasis role="bold">out</emphasis> passed to
      EVP_DecryptUpdate() should have sufficient room for (<emphasis role="bold">inl</emphasis> + cipher_block_size) bytes unless the
      cipher block size is 1 in which case <emphasis role="bold">inl</emphasis> bytes is sufficient.
    </para>
    <para>
      EVP_CipherInit_ex(), EVP_CipherUpdate() and EVP_CipherFinal_ex() are
      functions that can be used for decryption or encryption. The
      operation performed depends on the value of the <emphasis role="bold">enc</emphasis> parameter. It should be set to 1 for
      encryption, 0 for decryption and -1 to leave the value unchanged (the
      actual value of 'enc' being supplied in a previous call).
    </para>
    <para>
      EVP_CIPHER_CTX_reset() clears all information from a cipher context
      and free up any allocated memory associate with it, except the
      <emphasis role="bold">ctx</emphasis> itself. This function should be
      called anytime <emphasis role="bold">ctx</emphasis> is to be reused
      for another EVP_CipherInit() / EVP_CipherUpdate() / EVP_CipherFinal()
      series of calls.
    </para>
    <para>
      EVP_EncryptInit(), EVP_DecryptInit() and EVP_CipherInit() behave in a
      similar way to EVP_EncryptInit_ex(), EVP_DecryptInit_ex() and
      EVP_CipherInit_ex() except the <emphasis role="bold">ctx</emphasis>
      parameter does not need to be initialized and they always use the
      default cipher implementation.
    </para>
    <para>
      EVP_EncryptFinal(), EVP_DecryptFinal() and EVP_CipherFinal() are
      identical to EVP_EncryptFinal_ex(), EVP_DecryptFinal_ex() and
      EVP_CipherFinal_ex(). In previous releases they also cleaned up the
      <emphasis role="bold">ctx</emphasis>, but this is no longer done and
      EVP_CIPHER_CTX_clean() must be called to free any context resources.
    </para>
    <para>
      EVP_get_cipherbyname(), EVP_get_cipherbynid() and
      EVP_get_cipherbyobj() return an EVP_CIPHER structure when passed a
      cipher name, a NID or an ASN1_OBJECT structure.
    </para>
    <para>
      EVP_CIPHER_nid() and EVP_CIPHER_CTX_nid() return the NID of a cipher
      when passed an <emphasis role="bold">EVP_CIPHER</emphasis> or
      <emphasis role="bold">EVP_CIPHER_CTX</emphasis> structure.  The
      actual NID value is an internal value which may not have a
      corresponding OBJECT IDENTIFIER.
    </para>
    <para>
      EVP_CIPHER_CTX_set_padding() enables or disables padding. This
      function should be called after the context is set up for encryption
      or decryption with EVP_EncryptInit_ex(), EVP_DecryptInit_ex() or
      EVP_CipherInit_ex(). By default encryption operations are padded
      using standard block padding and the padding is checked and removed
      when decrypting. If the <emphasis role="bold">pad</emphasis>
      parameter is zero then no padding is performed, the total amount of
      data encrypted or decrypted must then be a multiple of the block size
      or an error will occur.
    </para>
    <para>
      EVP_CIPHER_key_length() and EVP_CIPHER_CTX_key_length() return the
      key length of a cipher when passed an <emphasis role="bold">EVP_CIPHER</emphasis> or <emphasis role="bold">EVP_CIPHER_CTX</emphasis> structure. The constant
      <emphasis role="bold">EVP_MAX_KEY_LENGTH</emphasis> is the maximum
      key length for all ciphers. Note: although EVP_CIPHER_key_length() is
      fixed for a given cipher, the value of EVP_CIPHER_CTX_key_length()
      may be different for variable key length ciphers.
    </para>
    <para>
      EVP_CIPHER_CTX_set_key_length() sets the key length of the cipher
      ctx. If the cipher is a fixed length cipher then attempting to set
      the key length to any value other than the fixed value is an error.
    </para>
    <para>
      EVP_CIPHER_iv_length() and EVP_CIPHER_CTX_iv_length() return the IV
      length of a cipher when passed an <emphasis role="bold">EVP_CIPHER</emphasis> or <emphasis role="bold">EVP_CIPHER_CTX</emphasis>. It will return zero if the
      cipher does not use an IV.  The constant <emphasis role="bold">EVP_MAX_IV_LENGTH</emphasis> is the maximum IV length for
      all ciphers.
    </para>
    <para>
      EVP_CIPHER_block_size() and EVP_CIPHER_CTX_block_size() return the
      block size of a cipher when passed an <emphasis role="bold">EVP_CIPHER</emphasis> or <emphasis role="bold">EVP_CIPHER_CTX</emphasis> structure. The constant
      <emphasis role="bold">EVP_MAX_BLOCK_LENGTH</emphasis> is also the
      maximum block length for all ciphers.
    </para>
    <para>
      EVP_CIPHER_type() and EVP_CIPHER_CTX_type() return the type of the
      passed cipher or context. This "type" is the actual NID of the cipher
      OBJECT IDENTIFIER as such it ignores the cipher parameters and 40 bit
      RC2 and 128 bit RC2 have the same NID. If the cipher does not have an
      object identifier or does not have ASN1 support this function will
      return <emphasis role="bold">NID_undef</emphasis>.
    </para>
    <para>
      EVP_CIPHER_CTX_cipher() returns the <emphasis role="bold">EVP_CIPHER</emphasis> structure when passed an <emphasis role="bold">EVP_CIPHER_CTX</emphasis> structure.
    </para>
    <para>
      EVP_CIPHER_mode() and EVP_CIPHER_CTX_mode() return the block cipher
      mode: EVP_CIPH_ECB_MODE, EVP_CIPH_CBC_MODE, EVP_CIPH_CFB_MODE or
      EVP_CIPH_OFB_MODE. If the cipher is a stream cipher then
      EVP_CIPH_STREAM_CIPHER is returned.
    </para>
    <para>
      EVP_CIPHER_param_to_asn1() sets the AlgorithmIdentifier "parameter"
      based on the passed cipher. This will typically include any
      parameters and an IV. The cipher IV (if any) must be set when this
      call is made. This call should be made before the cipher is actually
      "used" (before any EVP_EncryptUpdate(), EVP_DecryptUpdate() calls for
      example). This function may fail if the cipher does not have any ASN1
      support.
    </para>
    <para>
      EVP_CIPHER_asn1_to_param() sets the cipher parameters based on an
      ASN1 AlgorithmIdentifier "parameter". The precise effect depends on
      the cipher In the case of RC2, for example, it will set the IV and
      effective key length. This function should be called after the base
      cipher type is set but before the key is set. For example
      EVP_CipherInit() will be called with the IV and key set to NULL,
      EVP_CIPHER_asn1_to_param() will be called and finally
      EVP_CipherInit() again with all parameters except the key set to
      NULL. It is possible for this function to fail if the cipher does not
      have any ASN1 support or the parameters cannot be set (for example
      the RC2 effective key length is not supported.
    </para>
    <para>
      EVP_CIPHER_CTX_ctrl() allows various cipher specific parameters to be
      determined and set.
    </para>
  </refsection>
  <refsection xml:id="ID-9231fdf81ccb5f36a1e06ec7ed0f4757"><title>RETURN VALUES</title>
    <para>
      EVP_CIPHER_CTX_new() returns a pointer to a newly created <emphasis role="bold">EVP_CIPHER_CTX</emphasis> for success and <emphasis role="bold">NULL</emphasis> for failure.
    </para>
    <para>
      EVP_EncryptInit_ex(), EVP_EncryptUpdate() and EVP_EncryptFinal_ex()
      return 1 for success and 0 for failure.
    </para>
    <para>
      EVP_DecryptInit_ex() and EVP_DecryptUpdate() return 1 for success and
      0 for failure. EVP_DecryptFinal_ex() returns 0 if the decrypt failed
      or 1 for success.
    </para>
    <para>
      EVP_CipherInit_ex() and EVP_CipherUpdate() return 1 for success and 0
      for failure. EVP_CipherFinal_ex() returns 0 for a decryption failure
      or 1 for success.
    </para>
    <para>
      EVP_CIPHER_CTX_reset() returns 1 for success and 0 for failure.
    </para>
    <para>
      EVP_get_cipherbyname(), EVP_get_cipherbynid() and
      EVP_get_cipherbyobj() return an <emphasis role="bold">EVP_CIPHER</emphasis> structure or NULL on error.
    </para>
    <para>
      EVP_CIPHER_nid() and EVP_CIPHER_CTX_nid() return a NID.
    </para>
    <para>
      EVP_CIPHER_block_size() and EVP_CIPHER_CTX_block_size() return the
      block size.
    </para>
    <para>
      EVP_CIPHER_key_length() and EVP_CIPHER_CTX_key_length() return the
      key length.
    </para>
    <para>
      EVP_CIPHER_CTX_set_padding() always returns 1.
    </para>
    <para>
      EVP_CIPHER_iv_length() and EVP_CIPHER_CTX_iv_length() return the IV
      length or zero if the cipher does not use an IV.
    </para>
    <para>
      EVP_CIPHER_type() and EVP_CIPHER_CTX_type() return the NID of the
      cipher's OBJECT IDENTIFIER or NID_undef if it has no defined OBJECT
      IDENTIFIER.
    </para>
    <para>
      EVP_CIPHER_CTX_cipher() returns an <emphasis role="bold">EVP_CIPHER</emphasis> structure.
    </para>
    <para>
      EVP_CIPHER_param_to_asn1() and EVP_CIPHER_asn1_to_param() return
      greater than zero for success and zero or a negative number.
    </para>
  </refsection>
  <refsection xml:id="ID-ad56e4234404851949339ad070e99342"><title>CIPHER LISTING</title>
    <para>
      All algorithms have a fixed key length unless otherwise stated.
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>EVP_enc_null()</term>
          <listitem>
            <para>
	      Null cipher: does nothing.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_aes_128_cbc(), EVP_aes_128_ecb(), EVP_aes_128_cfb(), EVP_aes_128_ofb()</term>
          <listitem>
            <para>
	      AES with a 128-bit key in CBC, ECB, CFB and OFB modes
	      respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_aes_192_cbc(), EVP_aes_192_ecb(), EVP_aes_192_cfb(), EVP_aes_192_ofb()</term>
          <listitem>
            <para>
	      AES with a 192-bit key in CBC, ECB, CFB and OFB modes
	      respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_aes_256_cbc(), EVP_aes_256_ecb(), EVP_aes_256_cfb(), EVP_aes_256_ofb()</term>
          <listitem>
            <para>
	      AES with a 256-bit key in CBC, ECB, CFB and OFB modes
	      respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_des_cbc(), EVP_des_ecb(), EVP_des_cfb(), EVP_des_ofb()</term>
          <listitem>
            <para>
	      DES in CBC, ECB, CFB and OFB modes respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_des_ede_cbc(), EVP_des_ede(), EVP_des_ede_ofb(), EVP_des_ede_cfb()</term>
          <listitem>
            <para>
	      Two key triple DES in CBC, ECB, CFB and OFB modes
	      respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_des_ede3_cbc(), EVP_des_ede3(), EVP_des_ede3_ofb(), EVP_des_ede3_cfb()</term>
          <listitem>
            <para>
	      Three key triple DES in CBC, ECB, CFB and OFB modes
	      respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_desx_cbc()</term>
          <listitem>
            <para>
	      DESX algorithm in CBC mode.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_rc4()</term>
          <listitem>
            <para>
	      RC4 stream cipher. This is a variable key length cipher with
	      default key length 128 bits.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_rc4_40()</term>
          <listitem>
            <para>
	      RC4 stream cipher with 40 bit key length. This is obsolete
	      and new code should use EVP_rc4() and the
	      EVP_CIPHER_CTX_set_key_length() function.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_idea_cbc() EVP_idea_ecb(), EVP_idea_cfb(), EVP_idea_ofb()</term>
          <listitem>
            <para>
	      IDEA encryption algorithm in CBC, ECB, CFB and OFB modes
	      respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_rc2_cbc(), EVP_rc2_ecb(), EVP_rc2_cfb(), EVP_rc2_ofb()</term>
          <listitem>
            <para>
	      RC2 encryption algorithm in CBC, ECB, CFB and OFB modes
	      respectively. This is a variable key length cipher with an
	      additional parameter called "effective key bits" or
	      "effective key length". By default both are set to 128 bits.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_rc2_40_cbc(), EVP_rc2_64_cbc()</term>
          <listitem>
            <para>
	      RC2 algorithm in CBC mode with a default key length and
	      effective key length of 40 and 64 bits. These are obsolete
	      and new code should use EVP_rc2_cbc(),
	      EVP_CIPHER_CTX_set_key_length() and EVP_CIPHER_CTX_ctrl() to
	      set the key length and effective key length.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_bf_cbc(), EVP_bf_ecb(), EVP_bf_cfb(), EVP_bf_ofb()</term>
          <listitem>
            <para>
	      Blowfish encryption algorithm in CBC, ECB, CFB and OFB modes
	      respectively. This is a variable key length cipher.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_cast5_cbc(), EVP_cast5_ecb(), EVP_cast5_cfb(), EVP_cast5_ofb()</term>
          <listitem>
            <para>
	      CAST encryption algorithm in CBC, ECB, CFB and OFB modes
	      respectively. This is a variable key length cipher.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_rc5_32_12_16_cbc(), EVP_rc5_32_12_16_ecb(), EVP_rc5_32_12_16_cfb(), EVP_rc5_32_12_16_ofb()</term>
          <listitem>
            <para>
	      RC5 encryption algorithm in CBC, ECB, CFB and OFB modes
	      respectively. This is a variable key length cipher with an
	      additional "number of rounds" parameter. By default the key
	      length is set to 128 bits and 12 rounds.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_aes_128_gcm(), EVP_aes_192_gcm(), EVP_aes_256_gcm()</term>
          <listitem>
            <para>
	      AES Galois Counter Mode (GCM) for 128, 192 and 256 bit keys
	      respectively. These ciphers require additional control
	      operations to function correctly: see the <link linkend="ID-cc7611aa254027fa1cb05be962d7ae1d"><quote>GCM and
	      OCB Modes</quote></link> section below for details.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_aes_128_ocb(void), EVP_aes_192_ocb(void), EVP_aes_256_ocb(void)</term>
          <listitem>
            <para>
	      Offset Codebook Mode (OCB) for 128, 192 and 256 bit keys
	      respectively. These ciphers require additional control
	      operations to function correctly: see the <link linkend="ID-cc7611aa254027fa1cb05be962d7ae1d"><quote>GCM and
	      OCB Modes</quote></link> section below for details.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EVP_aes_128_ccm(), EVP_aes_192_ccm(), EVP_aes_256_ccm()</term>
          <listitem>
            <para>
	      AES Counter with CBC-MAC Mode (CCM) for 128, 192 and 256 bit
	      keys respectively. These ciphers require additional control
	      operations to function correctly: see CCM mode section below
	      for details.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-cc7611aa254027fa1cb05be962d7ae1d"><title>GCM and OCB Modes</title>
    <para>
      For GCM and OCB mode ciphers the behaviour of the EVP interface is
      subtly altered and several additional ctrl operations are supported.
    </para>
    <para>
      To specify any additional authenticated data (AAD) a call to
      EVP_CipherUpdate(), EVP_EncryptUpdate() or EVP_DecryptUpdate() should
      be made with the output parameter <emphasis role="bold">out</emphasis> set to <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      When decrypting the return value of EVP_DecryptFinal() or
      EVP_CipherFinal() indicates if the operation was successful. If it
      does not indicate success the authentication operation has failed and
      any output data <emphasis role="bold">MUST NOT</emphasis> be used as
      it is corrupted.
    </para>
    <para>
      The following ctrls are supported in both GCM and OCB modes:
    </para>
    <screen>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_IVLEN, ivlen, NULL);</screen>
    <para>
      Sets the IV length: this call can only be made before specifying an
      IV. If not called a default IV length is used. For GCM AES and OCB
      AES the default is 12 (i.e. 96 bits). For OCB mode the maximum is 15.
    </para>
    <screen>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_GET_TAG, taglen, tag);</screen>
    <para>
      Writes <emphasis role="bold">taglen</emphasis> bytes of the tag value
      to the buffer indicated by <emphasis role="bold">tag</emphasis>. This
      call can only be made when encrypting data and <emphasis role="bold">after</emphasis> all data has been processed (e.g. after
      an EVP_EncryptFinal() call). For OCB mode the taglen must either be
      16 or the value previously set via EVP_CTRL_OCB_SET_TAGLEN.
    </para>
    <screen>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_TAG, taglen, tag);</screen>
    <para>
      Sets the expected tag to <emphasis role="bold">taglen</emphasis>
      bytes from <emphasis role="bold">tag</emphasis>. This call is only
      legal when decrypting data and must be made <emphasis role="bold">before</emphasis> any data is processed (e.g. before any
      EVP_DecryptUpdate() call). For OCB mode the taglen must either be 16
      or the value previously set via EVP_CTRL_AEAD_SET_TAG.
    </para>
    <para>
      In OCB mode calling this with <emphasis role="bold">tag</emphasis>
      set to NULL sets the tag length. The tag length can only be set
      before specifying an IV. If not called a default tag length is used.
      For OCB AES the default is 16 (i.e. 128 bits). This is also the
      maximum tag length for OCB.
    </para>
    <para>
      See <link linkend="ID-3cf3441e9c2e6c993352eae121439e60"><quote>EXAMPLES</quote></link>
      below for an example of the use of GCM mode.
    </para>
  </refsection>
  <refsection xml:id="ID-671bfb1b8ff255e3dd316ce56a3c4f69"><title>CCM Mode</title>
    <para>
      The behaviour of CCM mode ciphers is similar to GCM mode but with a
      few additional requirements and different ctrl values.
    </para>
    <para>
      Like GCM and OCB modes any additional authenticated data (AAD) is
      passed by calling EVP_CipherUpdate(), EVP_EncryptUpdate() or
      EVP_DecryptUpdate() with the output parameter <emphasis role="bold">out</emphasis> set to <emphasis role="bold">NULL</emphasis>. Additionally the total plaintext or
      ciphertext length <emphasis role="bold">MUST</emphasis> be passed to
      EVP_CipherUpdate(), EVP_EncryptUpdate() or EVP_DecryptUpdate() with
      the output and input parameters (<emphasis role="bold">in</emphasis>
      and <emphasis role="bold">out</emphasis>) set to <emphasis role="bold">NULL</emphasis> and the length passed in the <emphasis role="bold">inl</emphasis> parameter.
    </para>
    <para>
      The following ctrls are supported in CCM mode:
    </para>
    <screen>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_TAG, taglen, tag);</screen>
    <para>
      This call is made to set the expected <emphasis role="bold">CCM</emphasis> tag value when decrypting or the length of
      the tag (with the <emphasis role="bold">tag</emphasis> parameter set
      to NULL) when encrypting. The tag length is often referred to as
      <emphasis role="bold">M</emphasis>. If not set a default value is
      used (12 for AES).
    </para>
    <screen>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_L, ivlen, NULL);</screen>
    <para>
      Sets the CCM <emphasis role="bold">L</emphasis> value. If not set a
      default is used (8 for AES).
    </para>
    <screen>EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_IVLEN, ivlen, NULL);</screen>
    <para>
      Sets the CCM nonce (IV) length: this call can only be made before
      specifying an nonce value. The nonce length is given by <emphasis role="bold">15 - L</emphasis> so it is 7 by default for AES.
    </para>
  </refsection>
  <refsection xml:id="ID-13a2aea00b64d07b0138c58c3803dd33"><title>NOTES</title>
    <para>
      Where possible the <emphasis role="bold">EVP</emphasis> interface to
      symmetric ciphers should be used in preference to the low level
      interfaces. This is because the code then becomes transparent to the
      cipher used and much more flexible. Additionally, the <emphasis role="bold">EVP</emphasis> interface will ensure the use of platform
      specific cryptographic acceleration such as AES-NI (the low level
      interfaces do not provide the guarantee).
    </para>
    <para>
      PKCS padding works by adding <emphasis role="bold">n</emphasis>
      padding bytes of value <emphasis role="bold">n</emphasis> to make the
      total length of the encrypted data a multiple of the block size.
      Padding is always added so if the data is already a multiple of the
      block size <emphasis role="bold">n</emphasis> will equal the block
      size. For example if the block size is 8 and 11 bytes are to be
      encrypted then 5 padding bytes of value 5 will be added.
    </para>
    <para>
      When decrypting the final block is checked to see if it has the
      correct form.
    </para>
    <para>
      Although the decryption operation can produce an error if padding is
      enabled, it is not a strong test that the input data or key is
      correct. A random block has better than 1 in 256 chance of being of
      the correct format and problems with the input data earlier on will
      not produce a final decrypt error.
    </para>
    <para>
      If padding is disabled then the decryption operation will always
      succeed if the total amount of data decrypted is a multiple of the
      block size.
    </para>
    <para>
      The functions EVP_EncryptInit(), EVP_EncryptFinal(),
      EVP_DecryptInit(), EVP_CipherInit() and EVP_CipherFinal() are
      obsolete but are retained for compatibility with existing code. New
      code should use EVP_EncryptInit_ex(), EVP_EncryptFinal_ex(),
      EVP_DecryptInit_ex(), EVP_DecryptFinal_ex(), EVP_CipherInit_ex() and
      EVP_CipherFinal_ex() because they can reuse an existing context
      without allocating and freeing it up on each call.
    </para>
    <para>
      EVP_get_cipherbynid(), and EVP_get_cipherbyobj() are implemented as
      macros.
    </para>
  </refsection>
  <refsection xml:id="ID-283f1556001a97fa171a9a3a71d6b0d6"><title>BUGS</title>
    <para>
      For RC5 the number of rounds can currently only be set to 8, 12 or
      16. This is a limitation of the current RC5 code rather than the EVP
      interface.
    </para>
    <para>
      EVP_MAX_KEY_LENGTH and EVP_MAX_IV_LENGTH only refer to the internal
      ciphers with default key lengths. If custom ciphers exceed these
      values the results are unpredictable. This is because it has become
      standard practice to define a generic key as a fixed unsigned char
      array containing EVP_MAX_KEY_LENGTH bytes.
    </para>
    <para>
      The ASN1 code is incomplete (and sometimes inaccurate) it has only
      been tested for certain common S/MIME ciphers (RC2, DES, triple DES)
      in CBC mode.
    </para>
  </refsection>
  <refsection xml:id="ID-3cf3441e9c2e6c993352eae121439e60"><title>EXAMPLES</title>
    <para>
      Encrypt a string using IDEA:
    </para>
    <screen>int do_crypt(char *outfile)
       {
       unsigned char outbuf[1024];
       int outlen, tmplen;
       /* Bogus key and IV: we'd normally set these from
        * another source.
        */
       unsigned char key[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
       unsigned char iv[] = {1,2,3,4,5,6,7,8};
       char intext[] = "Some Crypto Text";
       EVP_CIPHER_CTX ctx;
       FILE *out;

ctx = EVP_CIPHER_CTX_new();
EVP_EncryptInit_ex(ctx, EVP_idea_cbc(), NULL, key, iv);

if(!EVP_EncryptUpdate(ctx, outbuf, &amp;outlen, intext, strlen(intext)))
        {
        /* Error */
        return 0;
        }
/* Buffer passed to EVP_EncryptFinal() must be after data just
 * encrypted to avoid overwriting it.
 */
if(!EVP_EncryptFinal_ex(ctx, outbuf + outlen, &amp;tmplen))
        {
        /* Error */
        return 0;
        }
outlen += tmplen;
EVP_CIPHER_CTX_free(ctx);
/* Need binary mode for fopen because encrypted data is
 * binary data. Also cannot use strlen() on it because
 * it wont be null terminated and may contain embedded
 * nulls.
 */
out = fopen(outfile, "wb");
fwrite(outbuf, 1, outlen, out);
fclose(out);
return 1;
}</screen>
    <para>
      The ciphertext from the above example can be decrypted using the
      <emphasis role="bold">openssl</emphasis> utility with the command
      line (shown on two lines for clarity):
    </para>
    <screen>openssl idea -d &lt;filename
         -K 000102030405060708090A0B0C0D0E0F -iv 0102030405060708</screen>
    <para>
      General encryption and decryption function example using FILE I/O and
      AES128 with a 128-bit key:
    </para>
    <screen>int do_crypt(FILE *in, FILE *out, int do_encrypt)
       {
       /* Allow enough space in output buffer for additional block */
       unsigned char inbuf[1024], outbuf[1024 + EVP_MAX_BLOCK_LENGTH];
       int inlen, outlen;
       EVP_CIPHER_CTX *ctx;
       /* Bogus key and IV: we'd normally set these from
        * another source.
        */
       unsigned char key[] = "0123456789abcdeF";
       unsigned char iv[] = "1234567887654321";

/* Don't set key or IV right away; we want to check lengths */
ctx = EVP_CIPHER_CTX_new();
EVP_CipherInit_ex(&amp;ctx, EVP_aes_128_cbc(), NULL, NULL, NULL,
        do_encrypt);
OPENSSL_assert(EVP_CIPHER_CTX_key_length(ctx) == 16);
OPENSSL_assert(EVP_CIPHER_CTX_iv_length(ctx) == 16);

/* Now we can set key and IV */
EVP_CipherInit_ex(ctx, NULL, NULL, key, iv, do_encrypt);

for(;;)
        {
        inlen = fread(inbuf, 1, 1024, in);
        if(inlen &lt;= 0) break;
        if(!EVP_CipherUpdate(ctx, outbuf, &amp;outlen, inbuf, inlen))
                {
                /* Error */
                EVP_CIPHER_CTX_free(ctx);
                return 0;
                }
        fwrite(outbuf, 1, outlen, out);
        }
if(!EVP_CipherFinal_ex(ctx, outbuf, &amp;outlen))
        {
        /* Error */
        EVP_CIPHER_CTX_free(ctx);
        return 0;
        }
fwrite(outbuf, 1, outlen, out);

EVP_CIPHER_CTX_free(ctx);
return 1;
}

</screen>
  </refsection>
  <refsection xml:id="ID-fbb555b59d0c3d5b9ec79c34da526333"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>evp</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-2039e21476d760a3fcc49414ffc1a39b"><title>HISTORY</title>
    <para>
      Support for OCB mode was added in OpenSSL 1.1.0
    </para>
    <para>
      <emphasis role="bold">EVP_CIPHER_CTX</emphasis> was made opaque in
      OpenSSL 1.1.0.  As a result, EVP_CIPHER_CTX_reset() appeared and
      EVP_CIPHER_CTX_cleanup() disappeared.  EVP_CIPHER_CTX_init() remains
      as an alias for EVP_CIPHER_CTX_reset().
    </para>
  </refsection>
  <refsection xml:id="ID-d8c50534d1fe46f8f02411465c995517"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>