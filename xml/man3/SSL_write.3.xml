<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_write.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_write</refname>
<refpurpose>write bytes to a TLS/SSL connection.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis format="linespecific">int SSL_write(SSL *ssl, const void *buf, int num);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_write.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      SSL_write() writes <emphasis role="bold">num</emphasis> bytes from
      the buffer <emphasis role="bold">buf</emphasis> into the specified
      <emphasis role="bold">ssl</emphasis> connection.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_write.pod:NOTES"><title>NOTES</title>
    <para>
      If necessary, SSL_write() will negotiate a TLS/SSL session, if not
      already explicitly performed by SSL_connect(3) or SSL_accept(3). If
      the peer requests a re-negotiation, it will be performed
      transparently during the SSL_write() operation. The behaviour of
      SSL_write() depends on the underlying BIO.
    </para>
    <para>
      For the transparent negotiation to succeed, the <emphasis role="bold">ssl</emphasis> must have been initialized to client or
      server mode. This is being done by calling SSL_set_connect_state(3)
      or SSL_set_accept_state() before the first call to an SSL_read(3) or
      SSL_write() function.
    </para>
    <para>
      If the underlying BIO is <emphasis role="bold">blocking</emphasis>,
      SSL_write() will only return, once the write operation has been
      finished or an error occurred, except when a renegotiation take
      place, in which case a SSL_ERROR_WANT_READ may occur. This behaviour
      can be controlled with the SSL_MODE_AUTO_RETRY flag of the
      SSL_CTX_set_mode(3) call. 
    </para>
    <para>
      If the underlying BIO is <emphasis role="bold">non-blocking</emphasis>, SSL_write() will also return,
      when the underlying BIO could not satisfy the needs of SSL_write() to
      continue the operation. In this case a call to SSL_get_error(3) with
      the return value of SSL_write() will yield <emphasis role="bold">SSL_ERROR_WANT_READ</emphasis> or <emphasis role="bold">SSL_ERROR_WANT_WRITE</emphasis>. As at any time a
      re-negotiation is possible, a call to SSL_write() can also cause read
      operations! The calling process then must repeat the call after
      taking appropriate action to satisfy the needs of SSL_write(). The
      action depends on the underlying BIO. When using a non-blocking
      socket, nothing is to be done, but select() can be used to check for
      the required condition. When using a buffering BIO, like a BIO pair,
      data must be written into or retrieved out of the BIO before being
      able to continue.
    </para>
    <para>
      SSL_write() will only return with success, when the complete contents
      of <emphasis role="bold">buf</emphasis> of length <emphasis role="bold">num</emphasis> has been written. This default behaviour
      can be changed with the SSL_MODE_ENABLE_PARTIAL_WRITE option of
      SSL_CTX_set_mode(3). When this flag is set, SSL_write() will also
      return with success, when a partial write has been successfully
      completed. In this case the SSL_write() operation is considered
      completed. The bytes are sent and a new SSL_write() operation with a
      new buffer (with the already sent bytes removed) must be started. A
      partial write is performed with the size of a message block, which is
      16kB for SSLv3/TLSv1.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_write.pod:WARNING"><title>WARNING</title>
    <para>
      When an SSL_write() operation has to be repeated because of <emphasis role="bold">SSL_ERROR_WANT_READ</emphasis> or <emphasis role="bold">SSL_ERROR_WANT_WRITE</emphasis>, it must be repeated with
      the same arguments.
    </para>
    <para>
      When calling SSL_write() with num=0 bytes to be sent the behaviour is
      undefined.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_write.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      The following return values can occur:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_write.pod:gt0"/>&gt;0</term>
          <listitem>
            <para>
	      The write operation was successful, the return value is the
	      number of bytes actually written to the TLS/SSL connection.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_write.pod:0"/>0</term>
          <listitem>
            <para>
	      The write operation was not successful. Probably the
	      underlying connection was closed. Call SSL_get_error() with
	      the return value <emphasis role="bold">ret</emphasis> to find
	      out, whether an error occurred or the connection was shut
	      down cleanly (SSL_ERROR_ZERO_RETURN).
            </para>
            <para>
	      SSLv2 (deprecated) does not support a shutdown alert
	      protocol, so it can only be detected, whether the underlying
	      connection was closed. It cannot be checked, why the closure
	      happened.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_write.pod:lt0"/>&lt;0</term>
          <listitem>
            <para>
	      The write operation was not successful, because either an
	      error occurred or action must be taken by the calling
	      process. Call SSL_get_error() with the return value <emphasis role="bold">ret</emphasis> to find out the reason.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_write.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      SSL_get_error(3), SSL_read(3), SSL_CTX_set_mode(3), SSL_CTX_new(3),
      SSL_connect(3), SSL_accept(3) SSL_set_connect_state(3), ssl(3),
      bio(3)
    </para>
  </refsection>
</refentry>