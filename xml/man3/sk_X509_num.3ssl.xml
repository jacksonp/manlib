<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>sk_X509_num.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>sk_X509_num, sk_X509_value, sk_X509_new, sk_X509_new_null, sk_X509_free,
sk_X509_zero, sk_X509_delete, sk_X509_delete_ptr, sk_X509_push,
sk_X509_unshift, sk_X509_pop, sk_X509_shift, sk_X509_pop_free, sk_X509_insert,
sk_X509_set, sk_X509_find, sk_X509_find_ex, sk_X509_sort, sk_X509_is_sorted,
sk_X509_dup, sk_X509_deep_copy, sk_X509_set_cmp_func</refname>
<refpurpose>X509 stack</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/x509.h&gt;</synopsis>
<synopsis>int sk_X509_num(const STACK_OF(X509) *sk);
X509 *sk_X509_value(const STACK_OF(X509) *sk, int idx);
STACK_OF(X509) *sk_X509_new(int (*cmpf)(const X509 * const *a,
                                        const X509 * const *b));
STACK_OF(X509) *sk_X509_new_null(void);
int (*sk_X509_set_cmp_func (STACK_OF(X509) *sk,
                            int (*cmpf) (const X509 * const *a,
                                         const X509 * const *b)))
                            (const X509 * const *, const X509 * const *);
void sk_X509_free(const STACK_OF(X509) *sk);
void sk_X509_zero(const STACK_OF(X509) *sk);
void sk_X509_pop_free(STACK_OF(X509) *sk, void (*func) (X509 *a));
X509 *sk_X509_delete(STACK_OF(X509) *sk, int i);
X509 *sk_X509_delete_ptr(STACK_OF(X509) *sk, X509 *ptr);
int sk_X509_insert(STACK_OF(X509) *sk, X509 *ptr, int idx);
int sk_X509_push(STACK_OF(X509) *sk, X509 *ptr);
int sk_X509_unshift(STACK_OF(X509) *sk, X509 *ptr);
X509 *sk_X509_pop(STACK_OF(X509) *sk);
X509 *sk_X509_shift(STACK_OF(X509) *sk);
X509 *sk_X509_set(STACK_OF(X509) *sk, int idx, X509 *ptr);
int sk_X509_find(STACK_OF(X509) *sk, X509 *ptr);
int sk_X509_find_ex(STACK_OF(X509) *sk, X509 *ptr);
void sk_X509_sort(const STACK_OF(X509) *sk);
int sk_X509_is_sorted(const STACK_OF(X509) *sk);
STACK_OF(X509) *sk_X509_dup(STACK_OF(X509) *sk);
STACK_OF(X509) *sk_X509_deep_copy(STACK_OF(X509) *sk,
                                  X509 * (*copyfn) (const X509 *),
                                  void (*freefn) (X509 *));</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-e64eb10c348461c8cc361496b6ec089a"><title>DESCRIPTION</title>
    <para>
      sk_X509_num() returns the number of elements in <emphasis role="bold">sk</emphasis> or -1 if <emphasis role="bold">sk</emphasis> is <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      sk_X509_value() returns element <emphasis role="bold">idx</emphasis>
      in <emphasis role="bold">sk</emphasis>. Where <emphasis role="bold">idx</emphasis> runs from 0 to sk_X509_num(sk) - 1
      inclusive. If <emphasis role="bold">idx</emphasis> is out of range
      then <emphasis role="bold">NULL</emphasis> is returned.
    </para>
    <para>
      sk_X509_new() allocates a new empty stack using comparison function
      <emphasis role="bold">cmpf</emphasis>. If <emphasis role="bold">cmpf</emphasis> is <emphasis role="bold">0</emphasis>
      then no comparison function is used.
    </para>
    <para>
      sk_X509_new_null() allocates a new empty stack with no comparison
      function.
    </para>
    <para>
      sk_X509_set_cmp_func() sets the comparison function of <emphasis role="bold">sk</emphasis> to <emphasis role="bold">cmpf</emphasis>.
      The previous comparison function is returned or <emphasis role="bold">0</emphasis> if there was no previous comparison
      function.
    </para>
    <para>
      sk_X509_free() frees up the <emphasis role="bold">sk</emphasis>
      structure. It does <emphasis role="bold">not</emphasis> free up any
      elements of <emphasis role="bold">sk</emphasis>. After this call
      <emphasis role="bold">sk</emphasis> is no longer valid.
    </para>
    <para>
      sk_X509_zero() sets the number of elements in <emphasis role="bold">sk</emphasis> to zero. It does not free <emphasis role="bold">sk</emphasis> so after this call <emphasis role="bold">sk</emphasis> is still valid.
    </para>
    <para>
      sk_X509_pop_free() frees up all elements of <emphasis role="bold">sk</emphasis> and <emphasis role="bold">sk</emphasis>
      itself. The free function func() is called on each element to free
      it.
    </para>
    <para>
      sk_X509_delete() deletes element <emphasis role="bold">i</emphasis>
      from <emphasis role="bold">sk</emphasis>. It returns the deleted
      element or <emphasis role="bold">NULL</emphasis> if <emphasis role="bold">i</emphasis> is out of range.
    </para>
    <para>
      sk_X509_delete_ptr() deletes element matching <emphasis role="bold">ptr</emphasis> from <emphasis role="bold">sk</emphasis>.
      It returns the deleted element or <emphasis role="bold">NULL</emphasis> if no element matching <emphasis role="bold">ptr</emphasis> was found.
    </para>
    <para>
      sk_X509_insert() inserts <emphasis role="bold">ptr</emphasis> into
      <emphasis role="bold">sk</emphasis> at position <emphasis role="bold">idx</emphasis>. Any existing elements at or after
      <emphasis role="bold">idx</emphasis> are moved downwards. If
      <emphasis role="bold">idx</emphasis> is out of range the new element
      is appended to <emphasis role="bold">sk</emphasis>. sk_X509_insert()
      either returns the number of elements in <emphasis role="bold">sk</emphasis> after the new element is inserted or zero
      if an error occurred: which will happen if there is a memory
      allocation failure.
    </para>
    <para>
      sk_X509_push() appends <emphasis role="bold">ptr</emphasis> to
      <emphasis role="bold">sk</emphasis> it is equivalent to:
    </para>
    <screen>sk_X509_insert(sk, ptr, -1);</screen>
    <para>
      sk_X509_unshift() inserts <emphasis role="bold">ptr</emphasis> at the
      start of <emphasis role="bold">sk</emphasis> it is equivalent to:
    </para>
    <screen>sk_X509_insert(sk, ptr, 0);</screen>
    <para>
      sk_X509_pop() returns and removes the last element from <emphasis role="bold">sk</emphasis>.
    </para>
    <para>
      sk_X509_shift() returns and removes the first element from <emphasis role="bold">sk</emphasis>.
    </para>
    <para>
      sk_X509_set() sets element <emphasis role="bold">idx</emphasis> of
      <emphasis role="bold">sk</emphasis> to <emphasis role="bold">ptr</emphasis> replacing the current element. The new
      element value is returned or <emphasis role="bold">NULL</emphasis> if
      an error occurred: this will only happen if <emphasis role="bold">sk</emphasis> is <emphasis role="bold">NULL</emphasis> or
      <emphasis role="bold">idx</emphasis> is out of range.
    </para>
    <para>
      sk_X509_find() and int sk_X509_find_ex() search <emphasis role="bold">sk</emphasis> using the supplied comparison function for
      an element matching <emphasis role="bold">ptr</emphasis>.
      sk_X509_find() returns the index of the first matching element or
      <emphasis role="bold">-1</emphasis> if there is no match.
      sk_X509_find_ex() returns a matching element or the nearest element
      that does not match <emphasis role="bold">ptr</emphasis>. Note: if a
      comparison function is set then  <emphasis role="bold">sk</emphasis>
      is sorted before the search which may change its order. If no
      comparison function is set then a linear search is made for a pointer
      matching <emphasis role="bold">ptr</emphasis> and the stack is not
      reordered.
    </para>
    <para>
      sk_X509_sort() sorts <emphasis role="bold">sk</emphasis> using the
      supplied comparison function.
    </para>
    <para>
      sk_X509_is_sorted() returns <emphasis role="bold">1</emphasis> if
      <emphasis role="bold">sk</emphasis> is sorted and <emphasis role="bold">0</emphasis> otherwise.
    </para>
    <para>
      sk_X509_dup() returns a copy of <emphasis role="bold">sk</emphasis>.
      Note the pointers in the copy are identical to the original.
    </para>
    <para>
      sk_X509_deep_copy() returns a new stack where each element has been
      copied. Copying is performed by the supplied copyfn() and freeing by
      freefn(). The function freefn() is only called if an error occurs.
    </para>
  </refsection>
  <refsection xml:id="ID-d2ec7339543300631162ee9a5991afb4"><title>NOTES</title>
    <para>
      This manual page documents the functions which operate on a stack of
      <emphasis role="bold">X509</emphasis> pointers. A stack can contain
      pointers to any structure with <emphasis role="bold">X509</emphasis>
      replaced by the appropriate structure name.
    </para>
    <para>
      Care should be taken when accessing stacks in multi-threaded
      environments. Any operation which increases the size of a stack such
      as sk_X509_insert() or sk_push() can "grow" the size of an internal
      array and cause race conditions if the same stack is accessed in a
      different thread. Operations such as sk_find() and sk_sort() can also
      reorder the stack.
    </para>
    <para>
      Any comparison function supplied should use a metric suitable for use
      in a binary search operation. That is it should return zero, a
      positive or negative value if <emphasis role="bold">a</emphasis> is
      equal to, greater than or less than <emphasis role="bold">b</emphasis> respectively.
    </para>
    <para>
      Care should be taken when checking the return values of the functions
      sk_X509_find() and sk_X509_find_ex(). They return an index to the
      matching element. In particular <emphasis role="bold">0</emphasis>
      indicates a matching first element. A failed search is indicated by a
      <emphasis role="bold">-1</emphasis> return value.
    </para>
  </refsection>
  <refsection xml:id="ID-a0c74530db4976bb371566bd7ba5f053"><title>APPLICATION DEFINED STACKS</title>
    <para>
      Applications can create and use their own stacks by placing any of
      the macros described below in a header file.
    </para>
    <para>
      DEFINE_STACK_OF(NAME) creates set of functions for a stack of
      <emphasis role="bold">NAME</emphasis>. This will mean that type
      <emphasis role="bold">NAME</emphasis> is stored in each stack, the
      type is referenced by STACK_OF(NAME) and each function name begins
      with sk_NAME_. For example:
    </para>
    <screen>NAME *sk_NAME_value(STACK_OF(NAME) *sk, int idx);</screen>
    <para>
      DEFINE_STACK_OF_CONST(NAME) is identical to DEFINE_STACK_OF(NAME)
      except each element is constant for example:
    </para>
    <screen>const NAME *sk_name_value(STACK_OF(NAME) *sk, int idx);</screen>
    <para>
      DEFINE_SPECIAL_STACK_OF(FNAME, STNAME) defines a stack of <emphasis role="bold">STNAME</emphasis> but each function uses <emphasis role="bold">FNAME</emphasis>. For example:
    </para>
    <screen>STNAME *sk_FNAME_value(STACK_OF(STNAME) *sk, int idx);</screen>
  </refsection>
  <refsection xml:id="ID-6ef44297e4cf8c552269c54744669b3c"><title>RETURN VALUES</title>
    <para>
      sk_X509_num() returns the number of elements in the stack or
      <emphasis role="bold">-1</emphasis> if the passed stack is <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      sk_X509_value() returns a pointer to a stack element or <emphasis role="bold">NULL</emphasis> if the index is out of range.
    </para>
    <para>
      sk_X509_new() and sk_X509_new_null() return an empty stack or
      <emphasis role="bold">NULL</emphasis> if an error occurs.
    </para>
    <para>
      sk_X509_set_cmp_func() returns the old comparison function or
      <emphasis role="bold">NULL</emphasis> if there was no old comparison
      function.
    </para>
    <para>
      sk_X509_free(), sk_X509_zero(), sk_X509_pop_free() and sk_X509_sort()
      do not return values.
    </para>
    <para>
      sk_X509_pop(), sk_X509_shift(), sk_X509_delete() and
      sk_X509_delete_ptr() return a pointer to the deleted element or
      <emphasis role="bold">NULL</emphasis> on error.
    </para>
    <para>
      sk_X509_insert(), sk_X509_push() and sk_X509_unshift() return the
      total number of elements in the stack and 0 if an error occurred.
    </para>
    <para>
      sk_X509_set() returns a pointer to the replacement element or
      <emphasis role="bold">NULL</emphasis> on error.
    </para>
    <para>
      sk_X509_find() and sk_X509_find_ex() return an index to the found
      element or <emphasis role="bold">-1</emphasis> on error.
    </para>
    <para>
      sk_X509_is_sorted() returns <emphasis role="bold">1</emphasis> if the
      stack is sorted and <emphasis role="bold">0</emphasis> if it is not.
    </para>
    <para>
      sk_X509_dup() and sk_X509_deep_copy() return a pointer to the copy of
      the stack.
    </para>
  </refsection>
  <refsection xml:id="ID-cc2f94ba62eb3baba6223afc34eabd93"><title>HISTORY</title>
    <para>
      Use of inline functions and application defined stacks first appeared
      in OpenSSL 1.1.0. Previous versions of OpenSSL implemented stacks as
      macros.
    </para>
  </refsection>
  <refsection xml:id="ID-eaf0291e9f1401238dc9711797699a51"><title>COPYRIGHT</title>
    <para>
      Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>