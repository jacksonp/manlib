<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_set1_curves.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_set1_curves, SSL_CTX_set1_curves_list, SSL_set1_curves,
SSL_set1_curves_list, SSL_get1_curves, SSL_get_shared_curve,
SSL_CTX_set_ecdh_auto, SSL_set_ecdh_auto</refname>
<refpurpose>EC supported curve functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis format="linespecific">int SSL_CTX_set1_curves(SSL_CTX *ctx, int *clist, int clistlen);
int SSL_CTX_set1_curves_list(SSL_CTX *ctx, char *list);</synopsis>
<synopsis format="linespecific">int SSL_set1_curves(SSL *ssl, int *clist, int clistlen);
int SSL_set1_curves_list(SSL *ssl, char *list);</synopsis>
<synopsis format="linespecific">int SSL_get1_curves(SSL *ssl, int *curves);
int SSL_get_shared_curve(SSL *s, int n);</synopsis>
<synopsis format="linespecific">int SSL_CTX_set_ecdh_auto(SSL_CTX *ctx, int onoff);
int SSL_set_ecdh_auto(SSL *s, int onoff);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set1_curves.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      SSL_CTX_set1_curves() sets the supported curves for <emphasis role="bold">ctx</emphasis> to <emphasis role="bold">clistlen</emphasis> curves in the array <emphasis role="bold">clist</emphasis>. The array consist of all NIDs of curves
      in preference order. For a TLS client the curves are used directly in
      the supported curves extension. For a TLS server the curves are used
      to determine the set of shared curves. 
    </para>
    <para>
      SSL_CTX_set1_curves_list() sets the supported curves for <emphasis role="bold">ctx</emphasis> to string <emphasis role="bold">list</emphasis>. The string is a colon separated list of
      curve NIDs or names, for example "P-521:P-384:P-256".
    </para>
    <para>
      SSL_set1_curves() and SSL_set1_curves_list() are similar except they
      set supported curves for the SSL structure <emphasis role="bold">ssl</emphasis>.
    </para>
    <para>
      SSL_get1_curves() returns the set of supported curves sent by a
      client in the supported curves extension. It returns the total number
      of supported curves. The <emphasis role="bold">curves</emphasis>
      parameter can be <emphasis role="bold">NULL</emphasis> to simply
      return the number of curves for memory allocation purposes. The
      <emphasis role="bold">curves</emphasis> array is in the form of a set
      of curve NIDs in preference order. It can return zero if the client
      did not send a supported curves extension. 
    </para>
    <para>
      SSL_get_shared_curve() returns shared curve <emphasis role="bold">n</emphasis> for a server-side SSL <emphasis role="bold">ssl</emphasis>. If <emphasis role="bold">n</emphasis> is
      -1 then the total number of shared curves is returned, which may be
      zero. Other than for diagnostic purposes, most applications will only
      be interested in the first shared curve so <emphasis role="bold">n</emphasis> is normally set to zero. If the value
      <emphasis role="bold">n</emphasis> is out of range, NID_undef is
      returned.
    </para>
    <para>
      SSL_CTX_set_ecdh_auto() and SSL_set_ecdh_auto() set automatic curve
      selection for server <emphasis role="bold">ctx</emphasis> or
      <emphasis role="bold">ssl</emphasis> to <emphasis role="bold">onoff</emphasis>. If <emphasis role="bold">onoff</emphasis> is 1 then the highest preference curve
      is automatically used for ECDH temporary keys used during key
      exchange. 
    </para>
    <para>
      All these functions are implemented as macros.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set1_curves.pod:NOTES"><title>NOTES</title>
    <para>
      If an application wishes to make use of several of these functions
      for configuration purposes either on a command line or in a file it
      should consider using the SSL_CONF interface instead of manually
      parsing options.
    </para>
    <para>
      The functions SSL_CTX_set_ecdh_auto() and SSL_set_ecdh_auto() can be
      used to make a server always choose the most appropriate curve for a
      client. If set it will override any temporary ECDH parameters set by
      a server. Previous versions of OpenSSL could effectively only use a
      single ECDH curve set using a function such as
      SSL_CTX_set_ecdh_tmp(). Newer applications should just call:
    </para>
    <screen>SSL_CTX_set_ecdh_auto(ctx, 1);</screen>
    <para>
      and they will automatically support ECDH using the most appropriate
      shared curve.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set1_curves.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      SSL_CTX_set1_curves(), SSL_CTX_set1_curves_list(), SSL_set1_curves(),
      SSL_set1_curves_list(), SSL_CTX_set_ecdh_auto() and
      SSL_set_ecdh_auto() return 1 for success and 0 for failure.
    </para>
    <para>
      SSL_get1_curves() returns the number of curves, which may be zero.
    </para>
    <para>
      SSL_get_shared_curve() returns the NID of shared curve <emphasis role="bold">n</emphasis> or NID_undef if there is no shared curve
      <emphasis role="bold">n</emphasis>; or the total number of shared
      curves if <emphasis role="bold">n</emphasis> is -1.
    </para>
    <para>
      When called on a client <emphasis role="bold">ssl</emphasis>,
      SSL_get_shared_curve() has no meaning and returns -1.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set1_curves.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      <citerefentry>
      <refentrytitle>SSL_CTX_add_extra_chain_cert</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set1_curves.pod:HISTORY"><title>HISTORY</title>
    <para>
      These functions were first added to OpenSSL 1.0.2.
    </para>
  </refsection>
</refentry>