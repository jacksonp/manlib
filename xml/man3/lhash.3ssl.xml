<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>lhash.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>DECLARE_LHASH_OF,
OPENSSL_LH_COMPFUNC, OPENSSL_LH_HASHFUNC, OPENSSL_LH_DOALL_FUNC,
LHASH_DOALL_ARG_FN_TYPE,
lh_TYPE_new, lh_TYPE_free,
lh_TYPE_insert, lh_TYPE_delete, lh_TYPE_retrieve,
lh_TYPE_doall, lh_TYPE_doall_arg, lh_TYPE_error</refname>
<refpurpose>dynamic hash table</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/lhash.h&gt;</synopsis>
<synopsis>DECLARE_LHASH_OF(TYPE);</synopsis>
<synopsis>LHASH *lh_TYPE_new();
void lh_TYPE_free(LHASH_OF(TYPE *table);</synopsis>
<synopsis>TYPE *lh_TYPE_insert(LHASH_OF(TYPE *table, TYPE *data);
TYPE *lh_TYPE_delete(LHASH_OF(TYPE *table, TYPE *data);
TYPE *lh_retrieve(LHASH_OFTYPE *table, TYPE *data);</synopsis>
<synopsis>void lh_TYPE_doall(LHASH_OF(TYPE *table, OPENSSL_LH_DOALL_FUNC func);
void lh_TYPE_doall_arg(LHASH_OF(TYPE) *table, OPENSSL_LH_DOALL_FUNCARG func,
         TYPE, TYPE *arg);</synopsis>
<synopsis>int lh_TYPE_error(LHASH_OF(TYPE) *table);</synopsis>
<synopsis>typedef int (*OPENSSL_LH_COMPFUNC)(const void *, const void *);
typedef unsigned long (*OPENSSL_LH_HASHFUNC)(const void *);
typedef void (*OPENSSL_LH_DOALL_FUNC)(const void *);
typedef void (*LHASH_DOALL_ARG_FN_TYPE)(const void *, const void *);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-33849aa74f772150cfc52d4a3af07d40"><title>DESCRIPTION</title>
    <para>
      This library implements type-checked dynamic hash tables. The hash
      table entries can be arbitrary structures. Usually they consist of
      key and value fields.  In the description here, <emphasis role="italic">TYPE</emphasis> is used a placeholder for any of the
      OpenSSL datatypes, such as <emphasis role="italic">SSL_SESSION</emphasis>.
    </para>
    <para>
      lh_TYPE_new() creates a new <emphasis role="bold">LHASH_OF(TYPE)</emphasis> structure to store arbitrary
      data entries, and provides the 'hash' and 'compare' callbacks to be
      used in organising the table's entries.  The <emphasis role="bold">hash</emphasis> callback takes a pointer to a table entry
      as its argument and returns an unsigned long hash value for its key
      field.  The hash value is normally truncated to a power of 2, so make
      sure that your hash function returns well mixed low order bits.  The
      <emphasis role="bold">compare</emphasis> callback takes two arguments
      (pointers to two hash table entries), and returns 0 if their keys are
      equal, non-zero otherwise.  If your hash table will contain items of
      some particular type and the <emphasis role="bold">hash</emphasis>
      and <emphasis role="bold">compare</emphasis> callbacks hash/compare
      these types, then the <emphasis role="bold">DECLARE_LHASH_HASH_FN</emphasis> and <emphasis role="bold">IMPLEMENT_LHASH_COMP_FN</emphasis> macros can be used to
      create callback wrappers of the prototypes required by lh_TYPE_new().
       These provide per-variable casts before calling the type-specific
      callbacks written by the application author.  These macros, as well
      as those used for the "doall" callbacks, are defined as;
    </para>
    <screen>#define DECLARE_LHASH_HASH_FN(name, o_type) \
        unsigned long name##_LHASH_HASH(const void *);
#define IMPLEMENT_LHASH_HASH_FN(name, o_type) \
        unsigned long name##_LHASH_HASH(const void *arg) { \
                const o_type *a = arg; \
                return name##_hash(a); }
#define LHASH_HASH_FN(name) name##_LHASH_HASH

#define DECLARE_LHASH_COMP_FN(name, o_type) \
        int name##_LHASH_COMP(const void *, const void *);
#define IMPLEMENT_LHASH_COMP_FN(name, o_type) \
        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
                const o_type *a = arg1;                    \
                const o_type *b = arg2; \
                return name##_cmp(a,b); }
#define LHASH_COMP_FN(name) name##_LHASH_COMP

#define DECLARE_LHASH_DOALL_FN(name, o_type) \
        void name##_LHASH_DOALL(void *);
#define IMPLEMENT_LHASH_DOALL_FN(name, o_type) \
        void name##_LHASH_DOALL(void *arg) { \
                o_type *a = arg; \
                name##_doall(a); }
#define LHASH_DOALL_FN(name) name##_LHASH_DOALL

#define DECLARE_LHASH_DOALL_ARG_FN(name, o_type, a_type) \
        void name##_LHASH_DOALL_ARG(void *, void *);
#define IMPLEMENT_LHASH_DOALL_ARG_FN(name, o_type, a_type) \
        void name##_LHASH_DOALL_ARG(void *arg1, void *arg2) { \
                o_type *a = arg1; \
                a_type *b = arg2; \
                name##_doall_arg(a, b); }
#define LHASH_DOALL_ARG_FN(name) name##_LHASH_DOALL_ARG

An example of a hash table storing (pointers to) structures of type 'STUFF'
could be defined as follows;

/* Calculates the hash value of 'tohash' (implemented elsewhere) */
unsigned long STUFF_hash(const STUFF *tohash);
/* Orders 'arg1' and 'arg2' (implemented elsewhere) */
int stuff_cmp(const STUFF *arg1, const STUFF *arg2);
/* Create the type-safe wrapper functions for use in the LHASH internals */
static IMPLEMENT_LHASH_HASH_FN(stuff, STUFF);
static IMPLEMENT_LHASH_COMP_FN(stuff, STUFF);
/* ... */
int main(int argc, char *argv[]) {
        /* Create the new hash table using the hash/compare wrappers */
        LHASH_OF(STUFF) *hashtable = lh_STUFF_new(LHASH_HASH_FN(STUFF_hash),
                                  LHASH_COMP_FN(STUFF_cmp));
        /* ... */
}</screen>
    <para>
      lh_TYPE_free() frees the <emphasis role="bold">LHASH_OF(TYPE)</emphasis> structure <emphasis role="bold">table</emphasis>. Allocated hash table entries will not
      be freed; consider using lh_TYPE_doall() to deallocate any remaining
      entries in the hash table (see below).
    </para>
    <para>
      lh_TYPE_insert() inserts the structure pointed to by <emphasis role="bold">data</emphasis> into <emphasis role="bold">table</emphasis>.  If there already is an entry with the
      same key, the old value is replaced. Note that lh_TYPE_insert()
      stores pointers, the data are not copied.
    </para>
    <para>
      lh_TYPE_delete() deletes an entry from <emphasis role="bold">table</emphasis>.
    </para>
    <para>
      lh_TYPE_retrieve() looks up an entry in <emphasis role="bold">table</emphasis>. Normally, <emphasis role="bold">data</emphasis> is a structure with the key field(s) set;
      the function will return a pointer to a fully populated structure.
    </para>
    <para>
      lh_TYPE_doall() will, for every entry in the hash table, call
      <emphasis role="bold">func</emphasis> with the data item as its
      parameter.  For lh_TYPE_doall() and lh_TYPE_doall_arg(), function
      pointer casting should be avoided in the callbacks (see <emphasis role="bold">NOTE</emphasis>) - instead use the declare/implement
      macros to create type-checked wrappers that cast variables prior to
      calling your type-specific callbacks.  An example of this is
      illustrated here where the callback is used to cleanup resources for
      items in the hash table prior to the hashtable itself being
      deallocated:
    </para>
    <screen>/* Cleans up resources belonging to 'a' (this is implemented elsewhere) */
void STUFF_cleanup_doall(STUFF *a);
/* Implement a prototype-compatible wrapper for "STUFF_cleanup" */
IMPLEMENT_LHASH_DOALL_FN(STUFF_cleanup, STUFF)
        /* ... then later in the code ... */
/* So to run "STUFF_cleanup" against all items in a hash table ... */
lh_STUFF_doall(hashtable, LHASH_DOALL_FN(STUFF_cleanup));
/* Then the hash table itself can be deallocated */
lh_STUFF_free(hashtable);</screen>
    <para>
      When doing this, be careful if you delete entries from the hash table
      in your callbacks: the table may decrease in size, moving the item
      that you are currently on down lower in the hash table - this could
      cause some entries to be skipped during the iteration.  The second
      best solution to this problem is to set hash-&gt;down_load=0 before
      you start (which will stop the hash table ever decreasing in size).
      The best solution is probably to avoid deleting items from the hash
      table inside a "doall" callback!
    </para>
    <para>
      lh_TYPE_doall_arg() is the same as lh_TYPE_doall() except that
      <emphasis role="bold">func</emphasis> will be called with <emphasis role="bold">arg</emphasis> as the second argument and <emphasis role="bold">func</emphasis> should be of type <emphasis role="bold">LHASH_DOALL_ARG_FN_TYPE</emphasis> (a callback prototype
      that is passed both the table entry and an extra argument).  As with
      lh_doall(), you can instead choose to declare your callback with a
      prototype matching the types you are dealing with and use the
      declare/implement macros to create compatible wrappers that cast
      variables before calling your type-specific callbacks.  An example of
      this is demonstrated here (printing all hash table entries to a BIO
      that is provided by the caller):
    </para>
    <screen>/* Prints item 'a' to 'output_bio' (this is implemented elsewhere) */
void STUFF_print_doall_arg(const STUFF *a, BIO *output_bio);
/* Implement a prototype-compatible wrapper for "STUFF_print" */
static IMPLEMENT_LHASH_DOALL_ARG_FN(STUFF, const STUFF, BIO)
        /* ... then later in the code ... */
/* Print out the entire hashtable to a particular BIO */
lh_STUFF_doall_arg(hashtable, LHASH_DOALL_ARG_FN(STUFF_print), BIO,
                   logging_bio);

</screen>
    <para>
      lh_TYPE_error() can be used to determine if an error occurred in the
      last operation.
    </para>
  </refsection>
  <refsection xml:id="ID-b74a8339dd21cb2265955022a932c9a0"><title>RETURN VALUES</title>
    <para>
      lh_TYPE_new() returns <emphasis role="bold">NULL</emphasis> on error,
      otherwise a pointer to the new <emphasis role="bold">LHASH</emphasis>
      structure.
    </para>
    <para>
      When a hash table entry is replaced, lh_TYPE_insert() returns the
      value being replaced. <emphasis role="bold">NULL</emphasis> is
      returned on normal operation and on error.
    </para>
    <para>
      lh_TYPE_delete() returns the entry being deleted.  <emphasis role="bold">NULL</emphasis> is returned if there is no such value in
      the hash table.
    </para>
    <para>
      lh_TYPE_retrieve() returns the hash table entry if it has been found,
      <emphasis role="bold">NULL</emphasis> otherwise.
    </para>
    <para>
      lh_TYPE_error() returns 1 if an error occurred in the last operation,
      0 otherwise.
    </para>
    <para>
      lh_TYPE_free(), lh_TYPE_doall() and lh_TYPE_doall_arg() return no
      values.
    </para>
  </refsection>
  <refsection xml:id="ID-96d4fe0015018abf37249834ffcb672b"><title>NOTE</title>
    <para>
      The various LHASH macros and callback types exist to make it possible
      to write type-checked code without resorting to function-prototype
      casting - an evil that makes application code much harder to
      audit/verify and also opens the window of opportunity for stack
      corruption and other hard-to-find bugs.  It also, apparently,
      violates ANSI-C.
    </para>
    <para>
      The LHASH code regards table entries as constant data.  As such, it
      internally represents lh_insert()'d items with a "const void *"
      pointer type.  This is why callbacks such as those used by lh_doall()
      and lh_doall_arg() declare their prototypes with "const", even for
      the parameters that pass back the table items' data pointers - for
      consistency, user-provided data is "const" at all times as far as the
      LHASH code is concerned.	However, as callers are themselves
      providing these pointers, they can choose whether they too should be
      treating all such parameters as constant.
    </para>
    <para>
      As an example, a hash table may be maintained by code that, for
      reasons of encapsulation, has only "const" access to the data being
      indexed in the hash table (ie. it is returned as "const" from
      elsewhere in their code) - in this case the LHASH prototypes are
      appropriate as-is.  Conversely, if the caller is responsible for the
      life-time of the data in question, then they may well wish to make
      modifications to table item passed back in the lh_doall() or
      lh_doall_arg() callbacks (see the "STUFF_cleanup" example above).  If
      so, the caller can either cast the "const" away (if they're providing
      the raw callbacks themselves) or use the macros to declare/implement
      the wrapper functions without "const" types.
    </para>
    <para>
      Callers that only have "const" access to data they're indexing in a
      table, yet declare callbacks without constant types (or cast the
      "const" away themselves), are therefore creating their own risks/bugs
      without being encouraged to do so by the API.  On a related note,
      those auditing code should pay special attention to any instances of
      DECLARE/IMPLEMENT_LHASH_DOALL_[ARG_]_FN macros that provide types
      without any "const" qualifiers.
    </para>
  </refsection>
  <refsection xml:id="ID-567fc89a3f36a4fcbdbe084a11c1ea98"><title>BUGS</title>
    <para>
      lh_TYPE_insert() returns <emphasis role="bold">NULL</emphasis> both
      for success and error.
    </para>
  </refsection>
  <refsection xml:id="ID-c76cf8b50c640fd8317bd63924dfc36b"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>lh_stats</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-a3fc0a425ab457b6053ec9f05825d268"><title>HISTORY</title>
    <para>
      In OpenSSL 1.0.0, the lhash interface was revamped for better type
      checking.
    </para>
  </refsection>
  <refsection xml:id="ID-95cbd7c7ea1d9ab9a2b94bf85db135fe"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>