<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CONF_cmd.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CONF_cmd</refname>
<refpurpose>send configuration command</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis format="linespecific">int SSL_CONF_cmd(SSL_CONF_CTX *cctx, const char *cmd, const char *value);
int SSL_CONF_cmd_value_type(SSL_CONF_CTX *cctx, const char *cmd);
int SSL_CONF_finish(SSL_CONF_CTX *cctx);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      The function SSL_CONF_cmd() performs configuration operation
      <emphasis role="bold">cmd</emphasis> with optional parameter
      <emphasis role="bold">value</emphasis> on <emphasis role="bold">ctx</emphasis>. Its purpose is to simplify application
      configuration of <emphasis role="bold">SSL_CTX</emphasis> or
      <emphasis role="bold">SSL</emphasis> structures by providing a common
      framework for command line options or configuration files.
    </para>
    <para>
      SSL_CONF_cmd_value_type() returns the type of value that <emphasis role="bold">cmd</emphasis> refers to.
    </para>
    <para>
      The function SSL_CONF_finish() must be called after all configuration
      operations have been completed. It is used to finalise any operations
      or to process defaults.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:SUPPORTED_COMMAND_LINE_COMMANDS"><title>SUPPORTED COMMAND LINE COMMANDS</title>
    <para>
      Currently supported <emphasis role="bold">cmd</emphasis> names for
      command lines (i.e. when the flag <emphasis role="bold">SSL_CONF_CMDLINE</emphasis> is set) are listed below.
      Note: all <emphasis role="bold">cmd</emphasis> names are case
      sensitive. Unless otherwise stated commands can be used by both
      clients and servers and the <emphasis role="bold">value</emphasis>
      parameter is not used. The default prefix for command line commands
      is <emphasis role="bold">-</emphasis> and that is reflected below.
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-sigalgs"/><emphasis role="bold">-sigalgs</emphasis></term>
          <listitem>
            <para>
	      This sets the supported signature algorithms for TLS v1.2.
	      For clients this value is used directly for the supported
	      signature algorithms extension. For servers it is used to
	      determine which signature algorithms to support.
            </para>
            <para>
	      The <emphasis role="bold">value</emphasis> argument should be
	      a colon separated list of signature algorithms in order of
	      decreasing preference of the form <emphasis role="bold">algorithm+hash</emphasis>. <emphasis role="bold">algorithm</emphasis> is one of <emphasis role="bold">RSA</emphasis>, <emphasis role="bold">DSA</emphasis> or <emphasis role="bold">ECDSA</emphasis> and <emphasis role="bold">hash</emphasis> is a supported algorithm OID
	      short name such as <emphasis role="bold">SHA1</emphasis>,
	      <emphasis role="bold">SHA224</emphasis>, <emphasis role="bold">SHA256</emphasis>, <emphasis role="bold">SHA384</emphasis> of <emphasis role="bold">SHA512</emphasis>. Note: algorithm and hash names
	      are case sensitive.
            </para>
            <para>
	      If this option is not set then all signature algorithms
	      supported by the OpenSSL library are permissible.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-client_sigalgs"/><emphasis role="bold">-client_sigalgs</emphasis></term>
          <listitem>
            <para>
	      This sets the supported signature algorithms associated with
	      client authentication for TLS v1.2. For servers the value is
	      used in the supported signature algorithms field of a
	      certificate request. For clients it is used to determine
	      which signature algorithm to with the client certificate. If
	      a server does not request a certificate this option has no
	      effect.
            </para>
            <para>
	      The syntax of <emphasis role="bold">value</emphasis> is
	      identical to <emphasis role="bold">-sigalgs</emphasis>. If
	      not set then the value set for <emphasis role="bold">-sigalgs</emphasis> will be used instead.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-curves"/><emphasis role="bold">-curves</emphasis></term>
          <listitem>
            <para>
	      This sets the supported elliptic curves. For clients the
	      curves are sent using the supported curves extension. For
	      servers it is used to determine which curve to use. This
	      setting affects curves used for both signatures and key
	      exchange, if applicable.
            </para>
            <para>
	      The <emphasis role="bold">value</emphasis> argument is a
	      colon separated list of curves. The curve can be either the
	      <emphasis role="bold">NIST</emphasis> name (e.g. <emphasis role="bold">P-256</emphasis>) or an OpenSSL OID name (e.g
	      <emphasis role="bold">prime256v1</emphasis>). Curve names are
	      case sensitive.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-named_curve"/><emphasis role="bold">-named_curve</emphasis></term>
          <listitem>
            <para>
	      This sets the temporary curve used for ephemeral ECDH modes.
	      Only used by servers 
            </para>
            <para>
	      The <emphasis role="bold">value</emphasis> argument is a
	      curve name or the special value <emphasis role="bold">auto</emphasis> which picks an appropriate curve
	      based on client and server preferences. The curve can be
	      either the <emphasis role="bold">NIST</emphasis> name (e.g.
	      <emphasis role="bold">P-256</emphasis>) or an OpenSSL OID
	      name (e.g <emphasis role="bold">prime256v1</emphasis>). Curve
	      names are case sensitive.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-cipher"/><emphasis role="bold">-cipher</emphasis></term>
          <listitem>
            <para>
	      Sets the cipher suite list to <emphasis role="bold">value</emphasis>. Note: syntax checking of
	      <emphasis role="bold">value</emphasis> is currently not
	      performed unless a <emphasis role="bold">SSL</emphasis> or
	      <emphasis role="bold">SSL_CTX</emphasis> structure is
	      associated with <emphasis role="bold">cctx</emphasis>. 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-cert"/><emphasis role="bold">-cert</emphasis></term>
          <listitem>
            <para>
	      Attempts to use the file <emphasis role="bold">value</emphasis> as the certificate for the
	      appropriate context. It currently uses
	      SSL_CTX_use_certificate_chain_file() if an <emphasis role="bold">SSL_CTX</emphasis> structure is set or
	      SSL_use_certificate_file() with filetype PEM if an <emphasis role="bold">SSL</emphasis> structure is set. This option is
	      only supported if certificate operations are permitted.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-key"/><emphasis role="bold">-key</emphasis></term>
          <listitem>
            <para>
	      Attempts to use the file <emphasis role="bold">value</emphasis> as the private key for the
	      appropriate context. This option is only supported if
	      certificate operations are permitted. Note: if no <emphasis role="bold">-key</emphasis> option is set then a private key
	      is not loaded: it does not currently use the <emphasis role="bold">-cert</emphasis> file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-dhparam"/><emphasis role="bold">-dhparam</emphasis></term>
          <listitem>
            <para>
	      Attempts to use the file <emphasis role="bold">value</emphasis> as the set of temporary DH
	      parameters for the appropriate context. This option is only
	      supported if certificate operations are permitted.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-no_ssl2_-no_ssl3_-no_tls1_-no_tls1_1_-no_tls1_2"/><emphasis role="bold">-no_ssl2</emphasis>, <emphasis role="bold">-no_ssl3</emphasis>, <emphasis role="bold">-no_tls1</emphasis>, <emphasis role="bold">-no_tls1_1</emphasis>, <emphasis role="bold">-no_tls1_2</emphasis></term>
          <listitem>
            <para>
	      Disables protocol support for SSLv2, SSLv3, TLS 1.0, TLS 1.1
	      or TLS 1.2 by setting the corresponding options <emphasis role="bold">SSL_OP_NO_SSL2</emphasis>, <emphasis role="bold">SSL_OP_NO_SSL3</emphasis>, <emphasis role="bold">SSL_OP_NO_TLS1</emphasis>, <emphasis role="bold">SSL_OP_NO_TLS1_1</emphasis> and <emphasis role="bold">SSL_OP_NO_TLS1_2</emphasis> respectively. 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-bugs"/><emphasis role="bold">-bugs</emphasis></term>
          <listitem>
            <para>
	      Various bug workarounds are set, same as setting <emphasis role="bold">SSL_OP_ALL</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-no_comp"/><emphasis role="bold">-no_comp</emphasis></term>
          <listitem>
            <para>
	      Disables support for SSL/TLS compression, same as setting
	      <emphasis role="bold">SSL_OP_NO_COMPRESS</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-no_ticket"/><emphasis role="bold">-no_ticket</emphasis></term>
          <listitem>
            <para>
	      Disables support for session tickets, same as setting
	      <emphasis role="bold">SSL_OP_NO_TICKET</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-serverpref"/><emphasis role="bold">-serverpref</emphasis></term>
          <listitem>
            <para>
	      Use server and not client preference order when determining
	      which cipher suite, signature algorithm or elliptic curve to
	      use for an incoming connection. Equivalent to <emphasis role="bold">SSL_OP_CIPHER_SERVER_PREFERENCE</emphasis>. Only
	      used by servers.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-no_resumption_on_reneg"/><emphasis role="bold">-no_resumption_on_reneg</emphasis></term>
          <listitem>
            <para>
	      set SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION flag. Only
	      used by servers.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-legacyrenegotiation"/><emphasis role="bold">-legacyrenegotiation</emphasis></term>
          <listitem>
            <para>
	      permits the use of unsafe legacy renegotiation. Equivalent to
	      setting <emphasis role="bold">SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-legacy_server_connect_-no_legacy_server_connect"/><emphasis role="bold">-legacy_server_connect</emphasis>, <emphasis role="bold">-no_legacy_server_connect</emphasis></term>
          <listitem>
            <para>
	      permits or prohibits the use of unsafe legacy renegotiation
	      for OpenSSL clients only. Equivalent to setting or clearing
	      <emphasis role="bold">SSL_OP_LEGACY_SERVER_CONNECT</emphasis>. Set by
	      default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-strict"/><emphasis role="bold">-strict</emphasis></term>
          <listitem>
            <para>
	      enables strict mode protocol handling. Equivalent to setting
	      <emphasis role="bold">SSL_CERT_FLAG_TLS_STRICT</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:-debug_broken_protocol"/><emphasis role="bold">-debug_broken_protocol</emphasis></term>
          <listitem>
            <para>
	      disables various checks and permits several kinds of broken
	      protocol behaviour for testing purposes: it should <emphasis role="bold">NEVER</emphasis> be used in anything other than a
	      test environment. Only supported if OpenSSL is configured
	      with <emphasis role="bold">-DOPENSSL_SSL_DEBUG_BROKEN_PROTOCOL</emphasis>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:SUPPORTED_CONFIGURATION_FILE_COMMANDS"><title>SUPPORTED CONFIGURATION FILE COMMANDS</title>
    <para>
      Currently supported <emphasis role="bold">cmd</emphasis> names for
      configuration files (i.e. when the flag <emphasis role="bold">SSL_CONF_FLAG_FILE</emphasis> is set) are listed below.
      All configuration file <emphasis role="bold">cmd</emphasis> names are
      case insensitive so <emphasis role="bold">signaturealgorithms</emphasis> is recognised as well as
      <emphasis role="bold">SignatureAlgorithms</emphasis>. Unless
      otherwise stated the <emphasis role="bold">value</emphasis> names are
      also case insensitive.
    </para>
    <para>
      Note: the command prefix (if set) alters the recognised <emphasis role="bold">cmd</emphasis> values.
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:CipherString"/><emphasis role="bold">CipherString</emphasis></term>
          <listitem>
            <para>
	      Sets the cipher suite list to <emphasis role="bold">value</emphasis>. Note: syntax checking of
	      <emphasis role="bold">value</emphasis> is currently not
	      performed unless an <emphasis role="bold">SSL</emphasis> or
	      <emphasis role="bold">SSL_CTX</emphasis> structure is
	      associated with <emphasis role="bold">cctx</emphasis>. 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:Certificate"/><emphasis role="bold">Certificate</emphasis></term>
          <listitem>
            <para>
	      Attempts to use the file <emphasis role="bold">value</emphasis> as the certificate for the
	      appropriate context. It currently uses
	      SSL_CTX_use_certificate_chain_file() if an <emphasis role="bold">SSL_CTX</emphasis> structure is set or
	      SSL_use_certificate_file() with filetype PEM if an <emphasis role="bold">SSL</emphasis> structure is set. This option is
	      only supported if certificate operations are permitted.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:PrivateKey"/><emphasis role="bold">PrivateKey</emphasis></term>
          <listitem>
            <para>
	      Attempts to use the file <emphasis role="bold">value</emphasis> as the private key for the
	      appropriate context. This option is only supported if
	      certificate operations are permitted. Note: if no <emphasis role="bold">-key</emphasis> option is set then a private key
	      is not loaded: it does not currently use the <emphasis role="bold">Certificate</emphasis> file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:ServerInfoFile"/><emphasis role="bold">ServerInfoFile</emphasis></term>
          <listitem>
            <para>
	      Attempts to use the file <emphasis role="bold">value</emphasis> in the "serverinfo" extension
	      using the function SSL_CTX_use_serverinfo_file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:DHParameters"/><emphasis role="bold">DHParameters</emphasis></term>
          <listitem>
            <para>
	      Attempts to use the file <emphasis role="bold">value</emphasis> as the set of temporary DH
	      parameters for the appropriate context. This option is only
	      supported if certificate operations are permitted.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:SignatureAlgorithms"/><emphasis role="bold">SignatureAlgorithms</emphasis></term>
          <listitem>
            <para>
	      This sets the supported signature algorithms for TLS v1.2.
	      For clients this value is used directly for the supported
	      signature algorithms extension. For servers it is used to
	      determine which signature algorithms to support.
            </para>
            <para>
	      The <emphasis role="bold">value</emphasis> argument should be
	      a colon separated list of signature algorithms in order of
	      decreasing preference of the form <emphasis role="bold">algorithm+hash</emphasis>. <emphasis role="bold">algorithm</emphasis> is one of <emphasis role="bold">RSA</emphasis>, <emphasis role="bold">DSA</emphasis> or <emphasis role="bold">ECDSA</emphasis> and <emphasis role="bold">hash</emphasis> is a supported algorithm OID
	      short name such as <emphasis role="bold">SHA1</emphasis>,
	      <emphasis role="bold">SHA224</emphasis>, <emphasis role="bold">SHA256</emphasis>, <emphasis role="bold">SHA384</emphasis> of <emphasis role="bold">SHA512</emphasis>. Note: algorithm and hash names
	      are case sensitive.
            </para>
            <para>
	      If this option is not set then all signature algorithms
	      supported by the OpenSSL library are permissible.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:ClientSignatureAlgorithms"/><emphasis role="bold">ClientSignatureAlgorithms</emphasis></term>
          <listitem>
            <para>
	      This sets the supported signature algorithms associated with
	      client authentication for TLS v1.2. For servers the value is
	      used in the supported signature algorithms field of a
	      certificate request. For clients it is used to determine
	      which signature algorithm to with the client certificate.
            </para>
            <para>
	      The syntax of <emphasis role="bold">value</emphasis> is
	      identical to <emphasis role="bold">SignatureAlgorithms</emphasis>. If not set then
	      the value set for <emphasis role="bold">SignatureAlgorithms</emphasis> will be used
	      instead.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:Curves"/><emphasis role="bold">Curves</emphasis></term>
          <listitem>
            <para>
	      This sets the supported elliptic curves. For clients the
	      curves are sent using the supported curves extension. For
	      servers it is used to determine which curve to use. This
	      setting affects curves used for both signatures and key
	      exchange, if applicable.
            </para>
            <para>
	      The <emphasis role="bold">value</emphasis> argument is a
	      colon separated list of curves. The curve can be either the
	      <emphasis role="bold">NIST</emphasis> name (e.g. <emphasis role="bold">P-256</emphasis>) or an OpenSSL OID name (e.g
	      <emphasis role="bold">prime256v1</emphasis>). Curve names are
	      case sensitive.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:ECDHParameters"/><emphasis role="bold">ECDHParameters</emphasis></term>
          <listitem>
            <para>
	      This sets the temporary curve used for ephemeral ECDH modes.
	      Only used by servers 
            </para>
            <para>
	      The <emphasis role="bold">value</emphasis> argument is a
	      curve name or the special value <emphasis role="bold">Automatic</emphasis> which picks an appropriate
	      curve based on client and server preferences. The curve can
	      be either the <emphasis role="bold">NIST</emphasis> name
	      (e.g. <emphasis role="bold">P-256</emphasis>) or an OpenSSL
	      OID name (e.g <emphasis role="bold">prime256v1</emphasis>).
	      Curve names are case sensitive.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:Protocol"/><emphasis role="bold">Protocol</emphasis></term>
          <listitem>
            <para>
	      The supported versions of the SSL or TLS protocol.
            </para>
            <para>
	      The <emphasis role="bold">value</emphasis> argument is a
	      comma separated list of supported protocols to enable or
	      disable. If an protocol is preceded by <emphasis role="bold">-</emphasis> that version is disabled. All
	      versions are enabled by default, though applications may
	      choose to explicitly disable some. Currently supported
	      protocol values are <emphasis role="bold">SSLv2</emphasis>,
	      <emphasis role="bold">SSLv3</emphasis>, <emphasis role="bold">TLSv1</emphasis>, <emphasis role="bold">TLSv1.1</emphasis> and <emphasis role="bold">TLSv1.2</emphasis>. The special value <emphasis role="bold">ALL</emphasis> refers to all supported versions.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:Options"/><emphasis role="bold">Options</emphasis></term>
          <listitem>
            <para>
	      The <emphasis role="bold">value</emphasis> argument is a
	      comma separated list of various flags to set. If a flag
	      string is preceded <emphasis role="bold">-</emphasis> it is
	      disabled. See the <emphasis role="bold">SSL_CTX_set_options</emphasis> function for more
	      details of individual options.
            </para>
            <para>
	      Each option is listed below. Where an operation is enabled by
	      default the <emphasis role="bold">-flag</emphasis> syntax is
	      needed to disable it.
            </para>
            <para>
	      <emphasis role="bold">SessionTicket</emphasis>: session
	      ticket support, enabled by default. Inverse of <emphasis role="bold">SSL_OP_NO_TICKET</emphasis>: that is <emphasis role="bold">-SessionTicket</emphasis> is the same as setting
	      <emphasis role="bold">SSL_OP_NO_TICKET</emphasis>.
            </para>
            <para>
	      <emphasis role="bold">Compression</emphasis>: SSL/TLS
	      compression support, enabled by default. Inverse of <emphasis role="bold">SSL_OP_NO_COMPRESSION</emphasis>.
            </para>
            <para>
	      <emphasis role="bold">EmptyFragments</emphasis>: use empty
	      fragments as a countermeasure against a SSL 3.0/TLS 1.0
	      protocol vulnerability affecting CBC ciphers. It is set by
	      default. Inverse of <emphasis role="bold">SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</emphasis>.
            </para>
            <para>
	      <emphasis role="bold">Bugs</emphasis>: enable various bug
	      workarounds. Same as <emphasis role="bold">SSL_OP_ALL</emphasis>.
            </para>
            <para>
	      <emphasis role="bold">DHSingle</emphasis>: enable single use
	      DH keys, set by default. Inverse of <emphasis role="bold">SSL_OP_DH_SINGLE</emphasis>. Only used by
	      servers.
            </para>
            <para>
	      <emphasis role="bold">ECDHSingle</emphasis> enable single use
	      ECDH keys, set by default. Inverse of <emphasis role="bold">SSL_OP_ECDH_SINGLE</emphasis>. Only used by
	      servers.
            </para>
            <para>
	      <emphasis role="bold">ServerPreference</emphasis> use server
	      and not client preference order when determining which cipher
	      suite, signature algorithm or elliptic curve to use for an
	      incoming connection.  Equivalent to <emphasis role="bold">SSL_OP_CIPHER_SERVER_PREFERENCE</emphasis>. Only
	      used by servers.
            </para>
            <para>
	      <emphasis role="bold">NoResumptionOnRenegotiation</emphasis>
	      set <emphasis role="bold">SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION</emphasis>
	      flag. Only used by servers.
            </para>
            <para>
	      <emphasis role="bold">UnsafeLegacyRenegotiation</emphasis>
	      permits the use of unsafe legacy renegotiation. Equivalent to
	      <emphasis role="bold">SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</emphasis>.
            </para>
            <para>
	      <emphasis role="bold">UnsafeLegacyServerConnect</emphasis>
	      permits the use of unsafe legacy renegotiation for OpenSSL
	      clients only. Equivalent to <emphasis role="bold">SSL_OP_LEGACY_SERVER_CONNECT</emphasis>. Set by
	      default.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:SUPPORTED_COMMAND_TYPES"><title>SUPPORTED COMMAND TYPES</title>
    <para>
      The function SSL_CONF_cmd_value_type() currently returns one of the
      following types:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:SSL_CONF_TYPE_UNKNOWN"/><emphasis role="bold">SSL_CONF_TYPE_UNKNOWN</emphasis></term>
          <listitem>
            <para>
	      The <emphasis role="bold">cmd</emphasis> string is
	      unrecognised, this return value can be use to flag syntax
	      errors.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:SSL_CONF_TYPE_STRING"/><emphasis role="bold">SSL_CONF_TYPE_STRING</emphasis></term>
          <listitem>
            <para>
	      The value is a string without any specific structure.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:SSL_CONF_TYPE_FILE"/><emphasis role="bold">SSL_CONF_TYPE_FILE</emphasis></term>
          <listitem>
            <para>
	      The value is a file name.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:SSL_CONF_TYPE_DIR"/><emphasis role="bold">SSL_CONF_TYPE_DIR</emphasis></term>
          <listitem>
            <para>
	      The value is a directory name.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:NOTES"><title>NOTES</title>
    <para>
      The order of operations is significant. This can be used to set
      either defaults or values which cannot be overridden. For example if
      an application calls:
    </para>
    <screen>SSL_CONF_cmd(ctx, "Protocol", "-SSLv2");
SSL_CONF_cmd(ctx, userparam, uservalue);</screen>
    <para>
      it will disable SSLv2 support by default but the user can override
      it. If however the call sequence is: 
    </para>
    <screen>SSL_CONF_cmd(ctx, userparam, uservalue);
SSL_CONF_cmd(ctx, "Protocol", "-SSLv2");</screen>
    <para>
      SSLv2 is <emphasis role="bold">always</emphasis> disabled and attempt
      to override this by the user are ignored.
    </para>
    <para>
      By checking the return code of SSL_CTX_cmd() it is possible to query
      if a given <emphasis role="bold">cmd</emphasis> is recognised, this
      is useful is SSL_CTX_cmd() values are mixed with additional
      application specific operations.
    </para>
    <para>
      For example an application might call SSL_CTX_cmd() and if it returns
      -2 (unrecognised command) continue with processing of application
      specific commands.
    </para>
    <para>
      Applications can also use SSL_CTX_cmd() to process command lines
      though the utility function SSL_CTX_cmd_argv() is normally used
      instead. One way to do this is to set the prefix to an appropriate
      value using SSL_CONF_CTX_set1_prefix(), pass the current argument to
      <emphasis role="bold">cmd</emphasis> and the following argument to
      <emphasis role="bold">value</emphasis> (which may be NULL).
    </para>
    <para>
      In this case if the return value is positive then it is used to skip
      that number of arguments as they have been processed by
      SSL_CTX_cmd(). If -2 is returned then <emphasis role="bold">cmd</emphasis> is not recognised and application specific
      arguments can be checked instead. If -3 is returned a required
      argument is missing and an error is indicated. If 0 is returned some
      other error occurred and this can be reported back to the user.
    </para>
    <para>
      The function SSL_CONF_cmd_value_type() can be used by applications to
      check for the existence of a command or to perform additional syntax
      checking or translation of the command value. For example if the
      return value is <emphasis role="bold">SSL_CONF_TYPE_FILE</emphasis>
      an application could translate a relative pathname to an absolute
      pathname. 
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:EXAMPLES"><title>EXAMPLES</title>
    <para>
      Set supported signature algorithms:
    </para>
    <screen>SSL_CONF_cmd(ctx, "SignatureAlgorithms", "ECDSA+SHA256:RSA+SHA256:DSA+SHA256");</screen>
    <para>
      Enable all protocols except SSLv3 and SSLv2:
    </para>
    <screen>SSL_CONF_cmd(ctx, "Protocol", "ALL,-SSLv3,-SSLv2");</screen>
    <para>
      Only enable TLSv1.2:
    </para>
    <screen>SSL_CONF_cmd(ctx, "Protocol", "-ALL,TLSv1.2");</screen>
    <para>
      Disable TLS session tickets:
    </para>
    <screen>SSL_CONF_cmd(ctx, "Options", "-SessionTicket");</screen>
    <para>
      Set supported curves to P-256, P-384:
    </para>
    <screen>SSL_CONF_cmd(ctx, "Curves", "P-256:P-384");</screen>
    <para>
      Set automatic support for any elliptic curve for key exchange:
    </para>
    <screen>SSL_CONF_cmd(ctx, "ECDHParameters", "Automatic");</screen>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      SSL_CONF_cmd() returns 1 if the value of <emphasis role="bold">cmd</emphasis> is recognised and <emphasis role="bold">value</emphasis> is <emphasis role="bold">NOT</emphasis>
      used and 2 if both <emphasis role="bold">cmd</emphasis> and <emphasis role="bold">value</emphasis> are used. In other words it returns the
      number of arguments processed. This is useful when processing command
      lines.
    </para>
    <para>
      A return value of -2 means <emphasis role="bold">cmd</emphasis> is
      not recognised.
    </para>
    <para>
      A return value of -3 means <emphasis role="bold">cmd</emphasis> is
      recognised and the command requires a value but <emphasis role="bold">value</emphasis> is NULL.
    </para>
    <para>
      A return code of 0 indicates that both <emphasis role="bold">cmd</emphasis> and <emphasis role="bold">value</emphasis>
      are valid but an error occurred attempting to perform the operation:
      for example due to an error in the syntax of <emphasis role="bold">value</emphasis> in this case the error queue may provide
      additional information.
    </para>
    <para>
      SSL_CONF_finish() returns 1 for success and 0 for failure.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      SSL_CONF_CTX_new(3), SSL_CONF_CTX_set_flags(3),
      SSL_CONF_CTX_set1_prefix(3), SSL_CONF_CTX_set_ssl_ctx(3),
      SSL_CONF_cmd_argv(3)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CONF_cmd.pod:HISTORY"><title>HISTORY</title>
    <para>
      SSL_CONF_cmd() was first added to OpenSSL 1.0.2
    </para>
  </refsection>
</refentry>