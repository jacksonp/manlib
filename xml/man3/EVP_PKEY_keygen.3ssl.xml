<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EVP_PKEY_keygen.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EVP_PKEY_keygen_init, EVP_PKEY_keygen, EVP_PKEY_paramgen_init,
EVP_PKEY_paramgen, EVP_PKEY_CTX_set_cb, EVP_PKEY_CTX_get_cb,
EVP_PKEY_CTX_get_keygen_info, EVP_PKEY_CTX_set_app_data,
EVP_PKEY_CTX_get_app_data</refname>
<refpurpose>key and parameter generation functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis>int EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx);
int EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);
int EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx);
int EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);</synopsis>
<synopsis>typedef int EVP_PKEY_gen_cb(EVP_PKEY_CTX *ctx);</synopsis>
<synopsis>void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb);
EVP_PKEY_gen_cb *EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx);</synopsis>
<synopsis>int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx);</synopsis>
<synopsis>void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data);
void *EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX *ctx);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-5a25bcf7c43769ab753b34162ffda577"><title>DESCRIPTION</title>
    <para>
      The EVP_PKEY_keygen_init() function initializes a public key
      algorithm context using key <emphasis role="bold">pkey</emphasis> for
      a key generation operation.
    </para>
    <para>
      The EVP_PKEY_keygen() function performs a key generation operation,
      the generated key is written to <emphasis role="bold">ppkey</emphasis>.
    </para>
    <para>
      The functions EVP_PKEY_paramgen_init() and EVP_PKEY_paramgen() are
      similar except parameters are generated.
    </para>
    <para>
      The function EVP_PKEY_set_cb() sets the key or parameter generation
      callback to <emphasis role="bold">cb</emphasis>. The function
      EVP_PKEY_CTX_get_cb() returns the key or parameter generation
      callback.
    </para>
    <para>
      The function EVP_PKEY_CTX_get_keygen_info() returns parameters
      associated with the generation operation. If <emphasis role="bold">idx</emphasis> is -1 the total number of parameters
      available is returned. Any non negative value returns the value of
      that parameter. EVP_PKEY_CTX_gen_keygen_info() with a non-negative
      value for <emphasis role="bold">idx</emphasis> should only be called
      within the generation callback.
    </para>
    <para>
      If the callback returns 0 then the key generation operation is
      aborted and an error occurs. This might occur during a time consuming
      operation where a user clicks on a "cancel" button.
    </para>
    <para>
      The functions EVP_PKEY_CTX_set_app_data() and
      EVP_PKEY_CTX_get_app_data() set and retrieve an opaque pointer. This
      can be used to set some application defined value which can be
      retrieved in the callback: for example a handle which is used to
      update a "progress dialog".
    </para>
  </refsection>
  <refsection xml:id="ID-c41127652d5e328d22a0888286a416c7"><title>NOTES</title>
    <para>
      After the call to EVP_PKEY_keygen_init() or EVP_PKEY_paramgen_init()
      algorithm specific control operations can be performed to set any
      appropriate parameters for the operation.
    </para>
    <para>
      The functions EVP_PKEY_keygen() and EVP_PKEY_paramgen() can be called
      more than once on the same context if several operations are
      performed using the same parameters.
    </para>
    <para>
      The meaning of the parameters passed to the callback will depend on
      the algorithm and the specific implementation of the algorithm. Some
      might not give any useful information at all during key or parameter
      generation. Others might not even call the callback.
    </para>
    <para>
      The operation performed by key or parameter generation depends on the
      algorithm used. In some cases (e.g. EC with a supplied named curve)
      the "generation" option merely sets the appropriate fields in an
      EVP_PKEY structure.
    </para>
    <para>
      In OpenSSL an EVP_PKEY structure containing a private key also
      contains the public key components and parameters (if any). An
      OpenSSL private key is equivalent to what some libraries call a "key
      pair". A private key can be used in functions which require the use
      of a public key or parameters.
    </para>
  </refsection>
  <refsection xml:id="ID-4aff55cad5371fe3efec71fbd2c581e7"><title>RETURN VALUES</title>
    <para>
      EVP_PKEY_keygen_init(), EVP_PKEY_paramgen_init(), EVP_PKEY_keygen()
      and EVP_PKEY_paramgen() return 1 for success and 0 or a negative
      value for failure. In particular a return value of -2 indicates the
      operation is not supported by the public key algorithm.
    </para>
  </refsection>
  <refsection xml:id="ID-3ad898372f99f80a23ee275acbc56462"><title>EXAMPLES</title>
    <para>
      Generate a 2048 bit RSA key:
    </para>
    <screen>#include &amp;lt;openssl/evp.h&amp;gt;
#include &amp;lt;openssl/rsa.h&amp;gt;

EVP_PKEY_CTX *ctx;
EVP_PKEY *pkey = NULL;
ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, NULL);
if (!ctx)
       /* Error occurred */
if (EVP_PKEY_keygen_init(ctx) &lt;= 0)
       /* Error */
if (EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, 2048) &lt;= 0)
       /* Error */

/* Generate key */
if (EVP_PKEY_keygen(ctx, &amp;pkey) &lt;= 0)
       /* Error */</screen>
    <para>
      Generate a key from a set of parameters:
    </para>
    <screen>#include &amp;lt;openssl/evp.h&amp;gt;
#include &amp;lt;openssl/rsa.h&amp;gt;

EVP_PKEY_CTX *ctx;
EVP_PKEY *pkey = NULL, *param;
/* Assumed param is set up already */
ctx = EVP_PKEY_CTX_new(param);
if (!ctx)
       /* Error occurred */
if (EVP_PKEY_keygen_init(ctx) &lt;= 0)
       /* Error */

/* Generate key */
if (EVP_PKEY_keygen(ctx, &amp;pkey) &lt;= 0)
       /* Error */</screen>
    <para>
      Example of generation callback for OpenSSL public key
      implementations:
    </para>
    <screen>/* Application data is a BIO to output status to */

EVP_PKEY_CTX_set_app_data(ctx, status_bio);

static int genpkey_cb(EVP_PKEY_CTX *ctx)
       {
       char c = '*';
       BIO *b = EVP_PKEY_CTX_get_app_data(ctx);
       int p;
       p = EVP_PKEY_CTX_get_keygen_info(ctx, 0);
       if (p == 0) c = '.';
       if (p == 1) c = '+';
       if (p == 2) c = '*';
       if (p == 3) c = '\n';
       BIO_write(b, &amp;c, 1);
       (void)BIO_flush(b);
       return 1;
       }</screen>
  </refsection>
  <refsection xml:id="ID-3714f29f0e074b16b505c2119a66568e"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>EVP_PKEY_CTX_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_encrypt</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_decrypt</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_sign</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_verify</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_verify_recover</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_derive</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-9de523c67415a48c5f7d3207c711f1e1"><title>HISTORY</title>
    <para>
      These functions were first added to OpenSSL 1.0.0.
    </para>
  </refsection>
  <refsection xml:id="ID-f760e17de1cf21d703744f76f9cacfde"><title>COPYRIGHT</title>
    <para>
      Copyright 2006-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>