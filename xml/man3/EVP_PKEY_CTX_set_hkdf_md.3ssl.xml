<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EVP_PKEY_CTX_set_hkdf_md.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EVP_PKEY_CTX_set_hkdf_md, EVP_PKEY_CTX_set1_hkdf_salt,
EVP_PKEY_CTX_set1_hkdf_key, EVP_PKEY_CTX_add1_hkdf_info</refname>
<refpurpose>HMAC-based Extract-and-Expand key derivation algorithm</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/kdf.h&gt;</synopsis>
<synopsis>int EVP_PKEY_CTX_set_hkdf_md(EVP_PKEY_CTX *pctx, const EVP_MD *md);</synopsis>
<synopsis>int EVP_PKEY_CTX_set1_hkdf_salt(EVP_PKEY_CTX *pctx, unsigned char *salt,
                                int saltlen);</synopsis>
<synopsis>int EVP_PKEY_CTX_set1_hkdf_key(EVP_PKEY_CTX *pctx, unsigned char *key,
                               int keylen);</synopsis>
<synopsis>int EVP_PKEY_CTX_add1_hkdf_info(EVP_PKEY_CTX *pctx, unsigned char *info,
                                int infolen);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-d8b03932d2c8bc9f83a386db35de5518"><title>DESCRIPTION</title>
    <para>
      The EVP_PKEY_HKDF algorithm implements the HKDF key derivation
      function. HKDF follows the "extract-then-expand" paradigm, where the
      KDF logically consists of two modules. The first stage takes the
      input keying material and "extracts" from it a fixed-length
      pseudorandom key K. The second stage "expands" the key K into several
      additional pseudorandom keys (the output of the KDF).
    </para>
    <para>
      EVP_PKEY_set_hkdf_md() sets the message digest associated with the
      HKDF.
    </para>
    <para>
      EVP_PKEY_CTX_set1_hkdf_salt() sets the salt to <emphasis role="bold">saltlen</emphasis> bytes of the buffer <emphasis role="bold">salt</emphasis>. Any existing value is replaced.
    </para>
    <para>
      EVP_PKEY_CTX_set_hkdf_key() sets the key to <emphasis role="bold">keylen</emphasis> bytes of the buffer <emphasis role="bold">key</emphasis>. Any existing value is replaced.
    </para>
    <para>
      EVP_PKEY_CTX_add1_hkdf_info() sets the info value to <emphasis role="bold">infolen</emphasis> bytes of the buffer <emphasis role="bold">info</emphasis>. If a value is already set, it is
      appended to the existing value.
    </para>
  </refsection>
  <refsection xml:id="ID-75dc60e92b28c99198ebca1d93dc7508"><title>STRING CTRLS</title>
    <para>
      HKDF also supports string based control operations via <citerefentry>
      <refentrytitle>EVP_PKEY_CTX_ctrl_str</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>. The <emphasis role="bold">type</emphasis> parameter "md" uses the supplied
      <emphasis role="bold">value</emphasis> as the name of the digest
      algorithm to use. The <emphasis role="bold">type</emphasis>
      parameters "salt", "key" and "info" use the supplied <emphasis role="bold">value</emphasis> parameter as a <emphasis role="bold">seed</emphasis>, <emphasis role="bold">key</emphasis> or
      <emphasis role="bold">info</emphasis> value. The names "hexsalt",
      "hexkey" and "hexinfo" are similar except they take a hex string
      which is converted to binary.
    </para>
  </refsection>
  <refsection xml:id="ID-5316a5252693d0683ba84ce3db710c9d"><title>NOTES</title>
    <para>
      All these functions are implemented as macros.
    </para>
    <para>
      A context for HKDF can be obtained by calling:
    </para>
    <screen>EVP_PKEY_CTX *pctx = EVP_PKEY_new_id(EVP_PKEY_HKDF, NULL);</screen>
    <para>
      The digest, key, salt and info values must be set before a key is
      derived or an error occurs.
    </para>
    <para>
      The total length of the info buffer cannot exceed 1024 bytes in
      length: this should be more than enough for any normal use of HKDF.
    </para>
    <para>
      The output length of the KDF is specified via the length parameter to
      the <citerefentry> <refentrytitle>EVP_PKEY_derive</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> function. Since the HKDF
      output length is variable, passing a <emphasis role="bold">NULL</emphasis> buffer as a means to obtain the requisite
      length is not meaningful with HKDF. Instead, the caller must allocate
      a buffer of the desired length, and pass that buffer to
      <citerefentry> <refentrytitle>EVP_PKEY_derive</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> along with (a pointer
      initialized to) the desired length.
    </para>
    <para>
      Optimised versions of HKDF can be implemented in an ENGINE.
    </para>
  </refsection>
  <refsection xml:id="ID-bea5afa9989ea60cec395198395ca5b6"><title>RETURN VALUES</title>
    <para>
      All these functions return 1 for success and 0 or a negative value
      for failure. In particular a return value of -2 indicates the
      operation is not supported by the public key algorithm.
    </para>
  </refsection>
  <refsection xml:id="ID-c8a0b38d051d3362c48dc34e789c5c7b"><title>EXAMPLE</title>
    <para>
      This example derives 10 bytes using SHA-256 with the secret key
      "secret", salt value "salt" and info value "label":
    </para>
    <screen>EVP_PKEY_CTX *pctx;
unsigned char out[10];
size_t outlen = sizeof(out);
pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_HKDF, NULL);

if (EVP_PKEY_derive_init(pctx) &lt;= 0)
   /* Error */
if (EVP_PKEY_CTX_set_hkdf_md(pctx, EVP_sha256()) &lt;= 0)
   /* Error */
if (EVP_PKEY_CTX_set1_salt(pctx, "salt", 4) &lt;= 0)
   /* Error */
if (EVP_PKEY_CTX_set1_key(pctx, "secret", 6) &lt;= 0)
   /* Error */
if (EVP_PKEY_CTX_add1_hkdf_info(pctx, "label", 6) &lt;= 0)
   /* Error */
if (EVP_PKEY_derive(pctx, out, &amp;outlen) &lt;= 0)
   /* Error */</screen>
  </refsection>
  <refsection xml:id="ID-dab0b72c77cd6aca05966847aab6fc7a"><title>CONFORMING TO</title>
    <para>
      RFC 5869
    </para>
  </refsection>
  <refsection xml:id="ID-27f2f02224d493e1de40337e98c931ea"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>EVP_PKEY_CTX_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_CTX_ctrl_str</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_derive</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-87c953d952e443c1e1f83d825c88dc2a"><title>COPYRIGHT</title>
    <para>
      Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>