<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_want.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_want, SSL_want_nothing, SSL_want_read, SSL_want_write, SSL_want_x509_lookup,
SSL_want_async, SSL_want_async_job</refname>
<refpurpose>obtain state information TLS/SSL I/O
operation</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>int SSL_want(const SSL *ssl);
int SSL_want_nothing(const SSL *ssl);
int SSL_want_read(const SSL *ssl);
int SSL_want_write(const SSL *ssl);
int SSL_want_x509_lookup(const SSL *ssl);
int SSL_want_async(const SSL *ssl);
int SSL_want_async_job(const SSL *ssl);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-3190a997ce3274826b187a311c504d32"><title>DESCRIPTION</title>
    <para>
      SSL_want() returns state information for the SSL object <emphasis role="bold">ssl</emphasis>.
    </para>
    <para>
      The other SSL_want_*() calls are shortcuts for the possible states
      returned by SSL_want().
    </para>
  </refsection>
  <refsection xml:id="ID-bfdcd13f0de1b37d1841550c4d58a878"><title>NOTES</title>
    <para>
      SSL_want() examines the internal state information of the SSL object.
      Its return values are similar to that of <citerefentry>
      <refentrytitle>SSL_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>. Unlike <citerefentry>
      <refentrytitle>SSL_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, which also evaluates the error queue, the results
      are obtained by examining an internal state flag only. The
      information must therefore only be used for normal operation under
      non-blocking I/O. Error conditions are not handled and must be
      treated using <citerefentry>
      <refentrytitle>SSL_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
    <para>
      The result returned by SSL_want() should always be consistent with
      the result of <citerefentry>
      <refentrytitle>SSL_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-d601ba8c71fcd411cfa25dfc906a7b77"><title>RETURN VALUES</title>
    <para>
      The following return values can currently occur for SSL_want():
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>SSL_NOTHING</term>
          <listitem>
            <para>
	      There is no data to be written or to be read.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_WRITING</term>
          <listitem>
            <para>
	      There are data in the SSL buffer that must be written to the
	      underlying <emphasis role="bold">BIO</emphasis> layer in
	      order to complete the actual SSL_*() operation. A call to
	      <citerefentry> <refentrytitle>SSL_get_error</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> should return
	      SSL_ERROR_WANT_WRITE.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_READING</term>
          <listitem>
            <para>
	      More data must be read from the underlying <emphasis role="bold">BIO</emphasis> layer in order to complete the
	      actual SSL_*() operation. A call to <citerefentry>
	      <refentrytitle>SSL_get_error</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> should return
	      SSL_ERROR_WANT_READ.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_X509_LOOKUP</term>
          <listitem>
            <para>
	      The operation did not complete because an application
	      callback set by SSL_CTX_set_client_cert_cb() has asked to be
	      called again. A call to <citerefentry>
	      <refentrytitle>SSL_get_error</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> should return
	      SSL_ERROR_WANT_X509_LOOKUP.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_ASYNC_PAUSED</term>
          <listitem>
            <para>
	      An asynchronous operation partially completed and was then
	      paused. See <citerefentry>
	      <refentrytitle>SSL_get_all_async_fds</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry>. A call to
	      <citerefentry> <refentrytitle>SSL_get_error</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> should return
	      SSL_ERROR_WANT_ASYNC.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_ASYNC_NO_JOBS</term>
          <listitem>
            <para>
	      The asynchronous job could not be started because there were
	      no async jobs available in the pool (see
	      ASYNC_init_thread(3)). A call to <citerefentry>
	      <refentrytitle>SSL_get_error</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> should return
	      SSL_ERROR_WANT_ASYNC_JOB.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      SSL_want_nothing(), SSL_want_read(), SSL_want_write(),
      SSL_want_x509_lookup(), SSL_want_async() and SSL_want_async_job()
      return 1, when the corresponding condition is true or 0 otherwise.
    </para>
  </refsection>
  <refsection xml:id="ID-e743680f5cd5c4f852795571ca29930e"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>err</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
</refentry>