<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>dgst.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>dgst, sha, sha1, mdc2, ripemd160, sha224, sha256, sha384, sha512, md4, md5, blake2b, blake2s</refname>
<refpurpose>message digests</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis><emphasis role="bold">openssl</emphasis> <emphasis role="bold">dgst</emphasis>
[<emphasis role="bold">-help</emphasis>]
[<emphasis role="bold">-<emphasis role="italic">digest</emphasis></emphasis>]
[<emphasis role="bold">-c</emphasis>]
[<emphasis role="bold">-d</emphasis>]
[<emphasis role="bold">-hex</emphasis>]
[<emphasis role="bold">-binary</emphasis>]
[<emphasis role="bold">-r</emphasis>]
[<emphasis role="bold">-out filename</emphasis>]
[<emphasis role="bold">-sign filename</emphasis>]
[<emphasis role="bold">-keyform arg</emphasis>]
[<emphasis role="bold">-passin arg</emphasis>]
[<emphasis role="bold">-verify filename</emphasis>]
[<emphasis role="bold">-prverify filename</emphasis>]
[<emphasis role="bold">-signature filename</emphasis>]
[<emphasis role="bold">-hmac key</emphasis>]
[<emphasis role="bold">-fips-fingerprint</emphasis>]
[<emphasis role="bold">-engine id</emphasis>]
[<emphasis role="bold">-engine_impl</emphasis>]
[<emphasis role="bold">file...</emphasis>]</synopsis>
<synopsis><emphasis role="bold">openssl</emphasis>
[<emphasis role="italic">digest</emphasis>]
[<emphasis role="bold">...</emphasis>]</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-b0267cf7cc9c4791caeeef771946d0b9"><title>DESCRIPTION</title>
    <para>
      The digest functions output the message digest of a supplied file or
      files in hexadecimal.  The digest functions also generate and verify
      digital signatures using message digests.
    </para>
    <para>
      The generic name, <emphasis role="bold">dgst</emphasis>, may be used
      with an option specifying the algorithm to be used. The default
      digest is <emphasis role="italic">sha256</emphasis>. A supported
      <emphasis role="italic">digest</emphasis> name may also be used as
      the command name. To see the list of supported algorithms, use the
      <emphasis role="italic">list --digest-commands</emphasis> command.
    </para>
  </refsection>
  <refsection xml:id="ID-10a2f53e0ba4b29c3915dd0d56257211"><title>OPTIONS</title>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">-help</emphasis></term>
          <listitem>
            <para>
	      Print out a usage message.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-<emphasis role="italic">digest</emphasis></emphasis></term>
          <listitem>
            <para>
	      Specifies name of a supported digest to be used. To see the
	      list of supported digests, use the command <emphasis role="italic">list --digest-commands</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-c</emphasis></term>
          <listitem>
            <para>
	      print out the digest in two digit groups separated by colons,
	      only relevant if <emphasis role="bold">hex</emphasis> format
	      output is used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-d</emphasis></term>
          <listitem>
            <para>
	      print out BIO debugging information.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-hex</emphasis></term>
          <listitem>
            <para>
	      digest is to be output as a hex dump. This is the default
	      case for a "normal" digest as opposed to a digital signature.
	       See NOTES below for digital signatures using <emphasis role="bold">-hex</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-binary</emphasis></term>
          <listitem>
            <para>
	      output the digest or signature in binary form.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-r</emphasis></term>
          <listitem>
            <para>
	      output the digest in the "coreutils" format used by programs
	      like <emphasis role="bold">sha1sum</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-out filename</emphasis></term>
          <listitem>
            <para>
	      filename to output to, or standard output by default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-sign filename</emphasis></term>
          <listitem>
            <para>
	      digitally sign the digest using the private key in
	      "filename".
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-keyform arg</emphasis></term>
          <listitem>
            <para>
	      Specifies the key format to sign digest with. The DER, PEM,
	      P12, and ENGINE formats are supported.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-sigopt nm:v</emphasis></term>
          <listitem>
            <para>
	      Pass options to the signature algorithm during sign or verify
	      operations. Names and values of these options are
	      algorithm-specific.
            </para>
            <screen></screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-passin arg</emphasis></term>
          <listitem>
            <para>
	      the private key password source. For more information about
	      the format of <emphasis role="bold">arg</emphasis> see the
	      <emphasis role="bold">PASS PHRASE ARGUMENTS</emphasis>
	      section in <citerefentry>
	      <refentrytitle>openssl</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify filename</emphasis></term>
          <listitem>
            <para>
	      verify the signature using the public key in "filename". The
	      output is either "Verification OK" or "Verification Failure".
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-prverify filename</emphasis></term>
          <listitem>
            <para>
	      verify the signature using the private key in "filename".
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-signature filename</emphasis></term>
          <listitem>
            <para>
	      the actual signature to verify.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-hmac key</emphasis></term>
          <listitem>
            <para>
	      create a hashed MAC using "key".
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-mac alg</emphasis></term>
          <listitem>
            <para>
	      create MAC (keyed Message Authentication Code). The most
	      popular MAC algorithm is HMAC (hash-based MAC), but there are
	      other MAC algorithms which are not based on hash, for
	      instance <emphasis role="bold">gost-mac</emphasis> algorithm,
	      supported by <emphasis role="bold">ccgost</emphasis> engine.
	      MAC keys and other options should be set via <emphasis role="bold">-macopt</emphasis> parameter.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-macopt nm:v</emphasis></term>
          <listitem>
            <para>
	      Passes options to MAC algorithm, specified by <emphasis role="bold">-mac</emphasis> key. Following options are
	      supported by both by <emphasis role="bold">HMAC</emphasis>
	      and <emphasis role="bold">gost-mac</emphasis>:
            </para>
            <para>
              <variablelist>
                <varlistentry>
                  <term><emphasis role="bold">key:string</emphasis></term>
                  <listitem>
                    <para>
		      Specifies MAC key as alphanumeric string (use if key
		      contain printable characters only). String length
		      must conform to any restrictions of the MAC algorithm
		      for example exactly 32 chars for gost-mac.
                    </para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term><emphasis role="bold">hexkey:string</emphasis></term>
                  <listitem>
                    <para>
		      Specifies MAC key in hexadecimal form (two hex digits
		      per byte). Key length must conform to any
		      restrictions of the MAC algorithm for example exactly
		      32 chars for gost-mac.
                    </para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-rand file(s)</emphasis></term>
          <listitem>
            <para>
	      a file or files containing random data used to seed the
	      random number generator, or an EGD socket (see <citerefentry>
	      <refentrytitle>RAND_egd</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry>). Multiple files can
	      be specified separated by an OS-dependent character. The
	      separator is <emphasis role="bold">;</emphasis> for
	      MS-Windows, <emphasis role="bold">,</emphasis> for OpenVMS,
	      and <emphasis role="bold">:</emphasis> for all others.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-fips-fingerprint</emphasis></term>
          <listitem>
            <para>
	      compute HMAC using a specific key for certain OpenSSL-FIPS
	      operations.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-engine id</emphasis></term>
          <listitem>
            <para>
	      Use engine <emphasis role="bold">id</emphasis> for operations
	      (including private key storage). This engine is not used as
	      source for digest algorithms, unless it is also specified in
	      the configuration file or <emphasis role="bold">-engine_impl</emphasis> is also specified.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-engine_impl</emphasis></term>
          <listitem>
            <para>
	      When used with the <emphasis role="bold">-engine</emphasis>
	      option, it specifies to also use engine <emphasis role="bold">id</emphasis> for digest operations.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">file...</emphasis></term>
          <listitem>
            <para>
	      file or files to digest. If no files are specified then
	      standard input is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <screen></screen>
  </refsection>
  <refsection xml:id="ID-9563e737ab50ae4334049ae1db0ccee4"><title>EXAMPLES</title>
    <para>
      To create a hex-encoded message digest of a file: openssl dgst -md5
      -hex file.txt
    </para>
    <para>
      To sign a file using SHA-256 with binary file output: openssl dgst
      -sha256 -sign privatekey.pem -out signature.sign file.txt
    </para>
    <para>
      To verify a signature: openssl dgst -sha256 -verify publickey.pem \
      -signature signature.sign \ file.txt
    </para>
    <screen></screen>
  </refsection>
  <refsection xml:id="ID-9c4b4599a0c7d32e39ca74a1544c9113"><title>NOTES</title>
    <para>
      The digest mechanisms that are available will depend on the options
      used when building OpenSSL. The <emphasis role="bold">list
      digest-commands</emphasis> command can be used to list them.
    </para>
    <para>
      New or agile applications should use probably use SHA-256. Other
      digests, particularly SHA-1 and MD5, are still widely used for
      interoperating with existing formats and protocols.
    </para>
    <para>
      When signing a file, <emphasis role="bold">dgst</emphasis> will
      automatically determine the algorithm (RSA, ECC, etc) to use for
      signing based on the private key's ASN.1 info. When verifying
      signatures, it only handles the RSA, DSA, or ECDSA signature itself,
      not the related data to identify the signer and algorithm used in
      formats such as x.509, CMS, and S/MIME.
    </para>
    <para>
      A source of random numbers is required for certain signing
      algorithms, in particular ECDSA and DSA.
    </para>
    <para>
      The signing and verify options should only be used if a single file
      is being signed or verified.
    </para>
    <para>
      Hex signatures cannot be verified using <emphasis role="bold">openssl</emphasis>.  Instead, use "xxd -r" or similar
      program to transform the hex signature into a binary signature prior
      to verification.
    </para>
  </refsection>
  <refsection xml:id="ID-05095b6e386c895692cd4bb94b777110"><title>HISTORY</title>
    <para>
      The default digest was changed from MD5 to SHA256 in Openssl 1.1. The
      FIPS-related options were removed in OpenSSL 1.1
    </para>
  </refsection>
</refentry>