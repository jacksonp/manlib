<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>DTLSv1_listen.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>DTLSv1_listen</refname>
<refpurpose>listen for incoming DTLS connections.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>int DTLSv1_listen(SSL *ssl, BIO_ADDR *peer);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-76b7e3447291b899e18e1fe442944622"><title>DESCRIPTION</title>
    <para>
      DTLSv1_listen() listens for new incoming DTLS connections. If a
      ClientHello is received that does not contain a cookie, then
      DTLSv1_listen() responds with a HelloVerifyRequest. If a ClientHello
      is received with a cookie that is verified then control is returned
      to user code to enable the handshake to be completed (for example by
      using SSL_accept()).
    </para>
  </refsection>
  <refsection xml:id="ID-71d50e42d1dfd0a66dbf9f37285e2ceb"><title>NOTES</title>
    <para>
      Datagram based protocols can be susceptible to Denial of Service
      attacks. A DTLS attacker could, for example, submit a series of
      handshake initiation requests that cause the server to allocate state
      (and possibly perform cryptographic operations) thus consuming server
      resources. The attacker could also (with UDP) quite simply forge the
      source IP address in such an attack.
    </para>
    <para>
      As a counter measure to that DTLS includes a stateless cookie
      mechanism. The idea is that when a client attempts to connect to a
      server it sends a ClientHello message. The server responds with a
      HelloVerifyRequest which contains a unique cookie. The client then
      resends the ClientHello, but this time includes the cookie in the
      message thus proving that the client is capable of receiving messages
      sent to that address. All of this can be done by the server without
      allocating any state, and thus without consuming expensive resources.
    </para>
    <para>
      OpenSSL implements this capability via the DTLSv1_listen() function.
      The <emphasis role="bold">ssl</emphasis> parameter should be a newly
      allocated SSL object with its read and write BIOs set, in the same
      way as might be done for a call to SSL_accept(). Typically the read
      BIO will be in an "unconnected" state and thus capable of receiving
      messages from any peer.
    </para>
    <para>
      When a ClientHello is received that contains a cookie that has been
      verified, then DTLSv1_listen() will return with the <emphasis role="bold">ssl</emphasis> parameter updated into a state where the
      handshake can be continued by a call to (for example) SSL_accept().
      Additionally the <emphasis role="bold">BIO_ADDR</emphasis> pointed to
      by <emphasis role="bold">peer</emphasis> will be filled in with
      details of the peer that sent the ClientHello. If the underlying BIO
      is unable to obtain the <emphasis role="bold">BIO_ADDR</emphasis> of
      the peer (for example because the BIO does not support this), then
      <emphasis role="bold">*peer</emphasis> will be cleared and the family
      set to AF_UNSPEC. Typically user code is expected to "connect" the
      underlying socket to the peer and continue the handshake in a
      connected state.
    </para>
    <para>
      Prior to calling DTLSv1_listen() user code must ensure that cookie
      generation and verification callbacks have been set up using
      SSL_CTX_set_cookie_generate_cb() and SSL_CTX_set_cookie_verify_cb()
      respectively.
    </para>
    <para>
      Since DTLSv1_listen() operates entirely statelessly whilst processing
      incoming ClientHellos it is unable to process fragmented messages
      (since this would require the allocation of state). An implication of
      this is that DTLSv1_listen() <emphasis role="bold">only</emphasis>
      supports ClientHellos that fit inside a single datagram.
    </para>
  </refsection>
  <refsection xml:id="ID-34d4e8b06a239e33da692b749dfd98df"><title>RETURN VALUES</title>
    <para>
      From OpenSSL 1.1.0 a return value of &gt;= 1 indicates success. In
      this instance the <emphasis role="bold">peer</emphasis> value will be
      filled in and the <emphasis role="bold">ssl</emphasis> object set up
      ready to continue the handshake.
    </para>
    <para>
      A return value of 0 indicates a non-fatal error. This could (for
      example) be because of non-blocking IO, or some invalid message
      having been received from a peer. Errors may be placed on the OpenSSL
      error queue with further information if appropriate. Typically user
      code is expected to retry the call to DTLSv1_listen() in the event of
      a non-fatal error. Any old errors on the error queue will be cleared
      in the subsequent call.
    </para>
    <para>
      A return value of &lt;0 indicates a fatal error. This could (for
      example) be because of a failure to allocate sufficient memory for
      the operation.
    </para>
    <para>
      Prior to OpenSSL 1.1.0 fatal and non-fatal errors both produce return
      codes &lt;= 0 (in typical implementations user code treats all errors
      as non-fatal), whilst return codes &gt;0 indicate success.
    </para>
  </refsection>
  <refsection xml:id="ID-dea2daf171e36c62d7602d3f6fd49fcb"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>SSL_get_error</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_accept</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>bio</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-0285ea7c3e4123d8a027c999df05f746"><title>HISTORY</title>
    <para>
      DTLSv1_listen() return codes were clarified in OpenSSL 1.1.0. The
      type of "peer" also changed in OpenSSL 1.1.0.
    </para>
  </refsection>
  <refsection xml:id="ID-33d6ffeaabfa4c3de4aafdab80eb3a26"><title>COPYRIGHT</title>
    <para>
      Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>