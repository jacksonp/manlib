<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EC_POINT_new.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EC_POINT_new, EC_POINT_free, EC_POINT_clear_free, EC_POINT_copy, EC_POINT_dup,
EC_POINT_method_of, EC_POINT_set_to_infinity,
EC_POINT_set_Jprojective_coordinates, EC_POINT_get_Jprojective_coordinates_GFp,
EC_POINT_set_affine_coordinates_GFp, EC_POINT_get_affine_coordinates_GFp,
EC_POINT_set_compressed_coordinates_GFp, EC_POINT_set_affine_coordinates_GF2m,
EC_POINT_get_affine_coordinates_GF2m, EC_POINT_set_compressed_coordinates_GF2m,
EC_POINT_point2oct, EC_POINT_oct2point, EC_POINT_point2bn, EC_POINT_bn2point,
EC_POINT_point2hex, EC_POINT_hex2point</refname>
<refpurpose>Functions for creating, destroying and
manipulating <emphasis role="bold">EC_POINT</emphasis> objects.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ec.h&gt;
#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis>EC_POINT *EC_POINT_new(const EC_GROUP *group);
void EC_POINT_free(EC_POINT *point);
void EC_POINT_clear_free(EC_POINT *point);
int EC_POINT_copy(EC_POINT *dst, const EC_POINT *src);
EC_POINT *EC_POINT_dup(const EC_POINT *src, const EC_GROUP *group);
const EC_METHOD *EC_POINT_method_of(const EC_POINT *point);
int EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point);
int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group,
                                             EC_POINT *p,
                                             const BIGNUM *x, const BIGNUM *y,
                                             const BIGNUM *z, BN_CTX *ctx);
int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group,
                                             const EC_POINT *p,
                                             BIGNUM *x, BIGNUM *y, BIGNUM *z,
                                             BN_CTX *ctx);
int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group, EC_POINT *p,
                                        const BIGNUM *x, const BIGNUM *y,
                                        BN_CTX *ctx);
int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group,
                                        const EC_POINT *p,
                                        BIGNUM *x, BIGNUM *y, BN_CTX *ctx);
int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group,
                                            EC_POINT *p,
                                            const BIGNUM *x, int y_bit,
                                            BN_CTX *ctx);
int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *group, EC_POINT *p,
                                         const BIGNUM *x, const BIGNUM *y,
                                         BN_CTX *ctx);
int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *group,
                                         const EC_POINT *p,
                                         BIGNUM *x, BIGNUM *y, BN_CTX *ctx);
int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group,
                                             EC_POINT *p,
                                             const BIGNUM *x, int y_bit,
                                             BN_CTX *ctx);
size_t EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *p,
                          point_conversion_form_t form,
                          unsigned char *buf, size_t len, BN_CTX *ctx);
size_t EC_POINT_point2buf(const EC_GROUP *group, const EC_POINT *point,
                          point_conversion_form_t form,
                          unsigned char **pbuf, BN_CTX *ctx);
int EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *p,
                       const unsigned char *buf, size_t len, BN_CTX *ctx);
BIGNUM *EC_POINT_point2bn(const EC_GROUP *group, const EC_POINT *p,
                          point_conversion_form_t form, BIGNUM *bn,
                          BN_CTX *ctx);
EC_POINT *EC_POINT_bn2point(const EC_GROUP *group, const BIGNUM *bn,
                            EC_POINT *p, BN_CTX *ctx);
char *EC_POINT_point2hex(const EC_GROUP *group, const EC_POINT *p,
                         point_conversion_form_t form, BN_CTX *ctx);
EC_POINT *EC_POINT_hex2point(const EC_GROUP *group, const char *hex,
                             EC_POINT *p, BN_CTX *ctx);</synopsis>
<synopsis/>
  </refsynopsisdiv>
  <refsection xml:id="ID-097999a738a98890779e345ffb1efe07"><title>DESCRIPTION</title>
    <para>
      An <emphasis role="bold">EC_POINT</emphasis> structure represents a
      point on a curve. A new point is constructed by calling the function
      EC_POINT_new() and providing the <emphasis role="bold">group</emphasis> object that the point relates to.
    </para>
    <para>
      EC_POINT_free() frees the memory associated with the <emphasis role="bold">EC_POINT</emphasis>. if <emphasis role="bold">point</emphasis> is NULL nothing is done.
    </para>
    <para>
      EC_POINT_clear_free() destroys any sensitive data held within the
      EC_POINT and then frees its memory. If <emphasis role="bold">point</emphasis> is NULL nothing is done.
    </para>
    <para>
      EC_POINT_copy() copies the point <emphasis role="bold">src</emphasis>
      into <emphasis role="bold">dst</emphasis>. Both <emphasis role="bold">src</emphasis> and <emphasis role="bold">dst</emphasis>
      must use the same <emphasis role="bold">EC_METHOD</emphasis>.
    </para>
    <para>
      EC_POINT_dup() creates a new <emphasis role="bold">EC_POINT</emphasis> object and copies the content from
      <emphasis role="bold">src</emphasis> to the newly created <emphasis role="bold">EC_POINT</emphasis> object.
    </para>
    <para>
      EC_POINT_method_of() obtains the <emphasis role="bold">EC_METHOD</emphasis> associated with <emphasis role="bold">point</emphasis>.
    </para>
    <para>
      A valid point on a curve is the special point at infinity. A point is
      set to be at infinity by calling EC_POINT_set_to_infinity().
    </para>
    <para>
      The affine co-ordinates for a point describe a point in terms of its
      x and y position. The functions EC_POINT_set_affine_coordinates_GFp()
      and EC_POINT_set_affine_coordinates_GF2m() set the <emphasis role="bold">x</emphasis> and <emphasis role="bold">y</emphasis>
      co-ordinates for the point <emphasis role="bold">p</emphasis> defined
      over the curve given in <emphasis role="bold">group</emphasis>.
    </para>
    <para>
      As well as the affine co-ordinates, a point can alternatively be
      described in terms of its Jacobian projective co-ordinates (for Fp
      curves only). Jacobian projective co-ordinates are expressed as three
      values x, y and z. Working in this co-ordinate system provides more
      efficient point multiplication operations.  A mapping exists between
      Jacobian projective co-ordinates and affine co-ordinates. A Jacobian
      projective co-ordinate (x, y, z) can be written as an affine
      co-ordinate as (x/(z^2), y/(z^3)). Conversion to Jacobian projective
      to affine co-ordinates is simple. The co-ordinate (x, y) is mapped to
      (x, y, 1). To set or get the projective co-ordinates use
      EC_POINT_set_Jprojective_coordinates_GFp() and
      EC_POINT_get_Jprojective_coordinates_GFp() respectively.
    </para>
    <para>
      Points can also be described in terms of their compressed
      co-ordinates. For a point (x, y), for any given value for x such that
      the point is on the curve there will only ever be two possible values
      for y. Therefore a point can be set using the
      EC_POINT_set_compressed_coordinates_GFp() and
      EC_POINT_set_compressed_coordinates_GF2m() functions where <emphasis role="bold">x</emphasis> is the x co-ordinate and <emphasis role="bold">y_bit</emphasis> is a value 0 or 1 to identify which of
      the two possible values for y should be used.
    </para>
    <para>
      In addition <emphasis role="bold">EC_POINT</emphasis> can be
      converted to and from various external representations. The octet
      form is the binary encoding of the <emphasis role="bold">ECPoint</emphasis> structure (as defined in RFC5480 and
      used in certificates and TLS records): only the content octets are
      present, the <emphasis role="bold">OCTET STRING</emphasis> tag and
      length are not included. <emphasis role="bold">BIGNUM</emphasis> form
      is the octet form interpreted as a big endian integer converted to a
      <emphasis role="bold">BIGNUM</emphasis> structure. Hexadecimal form
      is the octet form converted to a NULL terminated character string
      where each character is one of the printable values 0-9 or A-F (or
      a-f).
    </para>
    <para>
      The functions EC_POINT_point2oct(), EC_POINT_oct2point(),
      EC_POINT_point2bn(), EC_POINT_bn2point(), EC_POINT_point2hex() and
      EC_POINT_hex2point() convert from and to EC_POINTs for the formats:
      octet, BIGNUM and hexadecimal respectively.
    </para>
    <para>
      The function EC_POINT_point2oct() must be supplied with a buffer long
      enough to store the octet form. The return value provides the number
      of octets stored. Calling the function with a NULL buffer will not
      perform the conversion but will still return the required buffer
      length.
    </para>
    <para>
      The function EC_POINT_point2buf() allocates a buffer of suitable
      length and writes an EC_POINT to it in octet format. The allocated
      buffer is written to <emphasis role="bold">*pbuf</emphasis> and its
      length is returned. The caller must free up the allocated buffer with
      a call to OPENSSL_free(). Since the allocated buffer value is written
      to <emphasis role="bold">*pbuf</emphasis> the <emphasis role="bold">pbuf</emphasis> parameter <emphasis role="bold">MUST
      NOT</emphasis> be <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      The function EC_POINT_point2hex() will allocate sufficient memory to
      store the hexadecimal string. It is the caller's responsibility to
      free this memory with a subsequent call to OPENSSL_free().
    </para>
  </refsection>
  <refsection xml:id="ID-e1d069aa5fb784bf739a2f450e383ac4"><title>RETURN VALUES</title>
    <para>
      EC_POINT_new() and EC_POINT_dup() return the newly allocated EC_POINT
      or NULL on error.
    </para>
    <para>
      The following functions return 1 on success or 0 on error:
      EC_POINT_copy(), EC_POINT_set_to_infinity(),
      EC_POINT_set_Jprojective_coordinates_GFp(),
      EC_POINT_get_Jprojective_coordinates_GFp(),
      EC_POINT_set_affine_coordinates_GFp(),
      EC_POINT_get_affine_coordinates_GFp(),
      EC_POINT_set_compressed_coordinates_GFp(),
      EC_POINT_set_affine_coordinates_GF2m(),
      EC_POINT_get_affine_coordinates_GF2m(),
      EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().
    </para>
    <para>
      EC_POINT_method_of returns the EC_METHOD associated with the supplied
      EC_POINT.
    </para>
    <para>
      EC_POINT_point2oct() and EC_point2buf() return the length of the
      required buffer or 0 on error.
    </para>
    <para>
      EC_POINT_point2bn() returns the pointer to the BIGNUM supplied, or
      NULL on error.
    </para>
    <para>
      EC_POINT_bn2point() returns the pointer to the EC_POINT supplied, or
      NULL on error.
    </para>
    <para>
      EC_POINT_point2hex() returns a pointer to the hex string, or NULL on
      error.
    </para>
    <para>
      EC_POINT_hex2point() returns the pointer to the EC_POINT supplied, or
      NULL on error.
    </para>
  </refsection>
  <refsection xml:id="ID-b4fd19918e02a69711874cfea16e32f2"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>crypto</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ec</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_GROUP_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_GROUP_copy</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_POINT_add</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_KEY_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_GFp_simple_method</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>d2i_ECPKParameters</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-fd215dffc712c66bcd84d2cba30495d2"><title>COPYRIGHT</title>
    <para>
      Copyright 2013-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>