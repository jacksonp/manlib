<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>OPENSSL_malloc.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>CRYPTO_MEM_CHECK_OFF, CRYPTO_MEM_CHECK_ON,
CRYPTO_MEM_CHECK_DISABLE, CRYPTO_MEM_CHECK_ENABLE,
OPENSSL_malloc_init,
OPENSSL_malloc, OPENSSL_zalloc, OPENSSL_realloc, OPENSSL_free,
OPENSSL_clear_realloc, OPENSSL_clear_free, OPENSSL_cleanse,
CRYPTO_malloc, CRYPTO_zalloc, CRYPTO_realloc, CRYPTO_free,
OPENSSL_strdup, OPENSSL_strndup,
OPENSSL_memdup, OPENSSL_strlcpy, OPENSSL_strlcat,
OPENSSL_hexstr2buf, OPENSSL_buf2hexstr, OPENSSL_hexchar2int,
CRYPTO_strdup, CRYPTO_strndup,
OPENSSL_mem_debug_push, OPENSSL_mem_debug_pop,
CRYPTO_mem_debug_push, CRYPTO_mem_debug_pop,
CRYPTO_clear_realloc, CRYPTO_clear_free,
CRYPTO_get_mem_functions, CRYPTO_set_mem_functions,
CRYPTO_set_mem_debug, CRYPTO_mem_ctrl,
CRYPTO_mem_leaks, CRYPTO_mem_leaks_fp</refname>
<refpurpose>Memory allocation functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/crypto.h&gt;</synopsis>
<synopsis>int OPENSSL_malloc_init(void)</synopsis>
<synopsis>void *OPENSSL_malloc(size_t num)
void *OPENSSL_zalloc(size_t num)
void *OPENSSL_realloc(void *addr, size_t num)
void OPENSSL_free(void *addr)
char *OPENSSL_strdup(const char *str)
char *OPENSSL_strndup(const char *str, size_t s)
size_t OPENSSL_strlcat(char *dst, const char *src, size_t size);
size_t OPENSSL_strlcpy(char *dst, const char *src, size_t size);
void *OPENSSL_memdup(void *data, size_t s)
void *OPENSSL_clear_realloc(void *p, size_t old_len, size_t num)
void OPENSSL_clear_free(void *str, size_t num)
void OPENSSL_cleanse(void *ptr, size_t len);</synopsis>
<synopsis>unsigned char *OPENSSL_hexstr2buf(const char *str, long *len);
char *OPENSSL_buf2hexstr(const unsigned char *buffer, long len);
int OPENSSL_hexchar2int(unsigned char c);</synopsis>
<synopsis>void *CRYPTO_malloc(size_t num, const char *file, int line)
void *CRYPTO_zalloc(size_t num, const char *file, int line)
void *CRYPTO_realloc(void *p, size_t num, const char *file, int line)
void CRYPTO_free(void *str, const char *, int)
char *CRYPTO_strdup(const char *p, const char *file, int line)
char *CRYPTO_strndup(const char *p, size_t num, const char *file, int line)
void *CRYPTO_clear_realloc(void *p, size_t old_len, size_t num, const char *file, int line)
void CRYPTO_clear_free(void *str, size_t num, const char *, int)</synopsis>
<synopsis>void CRYPTO_get_mem_functions(
        void *(**m)(size_t, const char *, int),
        void *(**r)(void *, size_t, const char *, int),
        void (**f)(void *, const char *, int))
int CRYPTO_set_mem_functions(
        void *(*m)(size_t, const char *, int),
        void *(*r)(void *, size_t, const char *, int),
        void (*f)(void *, const char *, int))</synopsis>
<synopsis>int CRYPTO_set_mem_debug(int onoff)</synopsis>
<synopsis>#define CRYPTO_MEM_CHECK_OFF
#define CRYPTO_MEM_CHECK_ON
#define CRYPTO_MEM_CHECK_DISABLE
#define CRYPTO_MEM_CHECK_ENABLE</synopsis>
<synopsis>int CRYPTO_mem_ctrl(int mode);</synopsis>
<synopsis>int OPENSSL_mem_debug_push(const char *info)
int OPENSSL_mem_debug_pop(void);</synopsis>
<synopsis>int CRYPTO_mem_debug_push(const char *info, const char *file, int line);
int CRYPTO_mem_debug_pop(void);</synopsis>
<synopsis>void CRYPTO_mem_leaks(BIO *b);
void CRYPTO_mem_leaks_fp(FILE *fp);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-fce6d5e0df5cf0b0c1546db1d5599b30"><title>DESCRIPTION</title>
    <para>
      OpenSSL memory allocation is handled by the <emphasis role="bold">OPENSSL_xxx</emphasis> API. These are generally macro's
      that add the standard C <emphasis role="bold">__FILE__</emphasis> and
      <emphasis role="bold">__LINE__</emphasis> parameters and call a
      lower-level <emphasis role="bold">CRYPTO_xxx</emphasis> API. Some
      functions do not add those parameters, but exist for consistency.
    </para>
    <para>
      OPENSSL_malloc_init() sets the lower-level memory allocation
      functions to their default implementation. It is generally not
      necessary to call this, except perhaps in certain shared-library
      situations.
    </para>
    <para>
      OPENSSL_malloc(), OPENSSL_realloc(), and OPENSSL_free() are like the
      C malloc(), realloc(), and free() functions. OPENSSL_zalloc() calls
      memset() to zero the memory before returning.
    </para>
    <para>
      OPENSSL_clear_realloc() and OPENSSL_clear_free() should be used when
      the buffer at <emphasis role="bold">addr</emphasis> holds sensitive
      information. The old buffer is filled with zero's by calling
      OPENSSL_cleanse() before ultimately calling OPENSSL_free().
    </para>
    <para>
      OPENSSL_cleanse() fills <emphasis role="bold">ptr</emphasis> of size
      <emphasis role="bold">len</emphasis> with a string of 0's. Use
      OPENSSL_cleanse() with care if the memory is a mapping of a file. If
      the storage controller uses write compression, then its possible that
      sensitive tail bytes will survive zeroization because the block of
      zeros will be compressed. If the storage controller uses wear
      leveling, then the old sensitive data will not be overwritten;
      rather, a block of 0's will be written at a new physical location.
    </para>
    <para>
      OPENSSL_strdup(), OPENSSL_strndup() and OPENSSL_memdup() are like the
      equivalent C functions, except that memory is allocated by calling
      the OPENSSL_malloc() and should be releaed by calling OPENSSL_free().
    </para>
    <para>
      OPENSSL_strlcpy(), OPENSSL_strlcat() and OPENSSL_strnlen() are
      equivalents of the common C library functions and are provided for
      portability.
    </para>
    <para>
      OPENSSL_hexstr2buf() parses <emphasis role="bold">str</emphasis> as a
      hex string and returns a pointer to the parsed value. The memory is
      allocated by calling OPENSSL_malloc() and should be released by
      calling OPENSSL_free(). If <emphasis role="bold">len</emphasis> is
      not NULL, it is filled in with the output length. Colons between
      two-character hex "bytes" are ignored. An odd number of hex digits is
      an error.
    </para>
    <para>
      OPENSSL_buf2hexstr() takes the specified buffer and length, and
      returns a hex string for value, or NULL on error. <emphasis role="bold">Buffer</emphasis> cannot be NULL; if <emphasis role="bold">len</emphasis> is 0 an empty string is returned.
    </para>
    <para>
      OPENSSL_hexchar2int() converts a character to the hexadecimal
      equivalent, or returns -1 on error.
    </para>
    <para>
      If no allocations have been done, it is possible to "swap out" the
      default implementations for OPENSSL_malloc(), OPENSSL_realloc and
      OPENSSL_free() and replace them with alternate versions (hooks).
      CRYPTO_get_mem_functions() function fills in the given arguments with
      the function pointers for the current implementations. With
      CRYPTO_set_mem_functions(), you can specify a different set of
      functions. If any of <emphasis role="bold">m</emphasis>, <emphasis role="bold">r</emphasis>, or <emphasis role="bold">f</emphasis> are
      NULL, then the function is not changed.
    </para>
    <para>
      The default implementation can include some debugging capability (if
      enabled at build-time). This adds some overhead by keeping a list of
      all memory allocations, and removes items from the list when they are
      free'd. This is most useful for identifying memory leaks.
      CRYPTO_set_mem_debug() turns this tracking on and off.  It is
      normally called at startup, but can be called at any time.
    </para>
    <para>
      CRYPTO_mem_ctrl() provides fine-grained control of memory leak
      tracking. To enable tracking call CRYPTO_mem_ctrl() with a <emphasis role="bold">mode</emphasis> argument of the <emphasis role="bold">CRYPTO_MEM_CHECK_ON</emphasis>. To disable tracking call
      CRYPTO_mem_ctrl() with a <emphasis role="bold">mode</emphasis>
      argument of the <emphasis role="bold">CRYPTO_MEM_CHECK_OFF</emphasis>. The <emphasis role="bold">CRYPTO_MEM_CHECK_DISABLE</emphasis> and <emphasis role="bold">CRYPTO_MEM_CHECK_ENABLE</emphasis> modes are used
      internally within OpenSSL to temporarily suspend and resume tracking.
    </para>
    <para>
      While checking memory, it can be useful to store additional context
      about what is being done. For example, identifying the field names
      when parsing a complicated data structure. OPENSSL_mem_debug_push()
      (which calls CRYPTO_mem_debug_push()) attachs an identifying string
      to the allocation stack. This must be a global or other static
      string; it is not copied. OPENSSL_mem_debug_pop() removes identifying
      state from the stack.
    </para>
    <para>
      At the end of the program, calling CRYPTO_mem_leaks() or
      CRYPTO_mem_leaks_fp() will report all "leaked" memory, writing it to
      the specified BIO <emphasis role="bold">b</emphasis> or FILE
      <emphasis role="bold">fp</emphasis>. These functions return 1 if
      there are no leaks, 0 if there are leaks and -1 if an error occurred.
    </para>
  </refsection>
  <refsection xml:id="ID-bd68802ebbdc8902870cff439938810d"><title>RETURN VALUES</title>
    <para>
      OPENSSL_malloc_init(), OPENSSL_free(), OPENSSL_clear_free()
      CRYPTO_free(), CRYPTO_clear_free() and CRYPTO_get_mem_functions()
      return no value.
    </para>
    <para>
      CRYPTO_mem_leaks() and CRYPTO_mem_leaks_fp() return 1 if there are no
      leaks, 0 if there are leaks and -1 if an error occurred.
    </para>
    <para>
      OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(),
      OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(),
      CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_buf2hexstr(),
      OPENSSL_hexstr2buf(), OPENSSL_strdup(), and OPENSSL_strndup() return
      a pointer to allocated memory or NULL on error.
    </para>
    <para>
      CRYPTO_set_mem_functions() and CRYPTO_set_mem_debug() return 1 on
      success or 0 on failure (almost always because allocations have
      already happened).
    </para>
    <para>
      CRYPTO_mem_ctrl() returns the previous value of the mode.
    </para>
    <para>
      OPENSSL_mem_debug_push() and OPENSSL_mem_debug_pop() return 1 on
      success or 0 on failure.
    </para>
  </refsection>
  <refsection xml:id="ID-8c2493b9a692f11710796ce196c5cc94"><title>NOTES</title>
    <para>
      While it's permitted to swap out only a few and not all the functions
      with CRYPTO_set_mem_functions(), it's recommended to swap them all
      out at once.  <emphasis role="italic">This applies specially if
      OpenSSL was built with the configuration option</emphasis> <literal role="code">crypto-mdebug</literal> <emphasis role="italic">enabled.  In case, swapping out only, say, the malloc()
      implementation is outright dangerous.</emphasis>
    </para>
  </refsection>
  <refsection xml:id="ID-5c707385a925911dc7ab88c42272895b"><title>COPYRIGHT</title>
    <para>
      Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>