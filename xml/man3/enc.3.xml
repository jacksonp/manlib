<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>enc.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>enc</refname>
<refpurpose>symmetric cipher routines</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis><emphasis role="bold">openssl enc -ciphername</emphasis>
[<emphasis role="bold">-in filename</emphasis>]
[<emphasis role="bold">-out filename</emphasis>]
[<emphasis role="bold">-pass arg</emphasis>]
[<emphasis role="bold">-e</emphasis>]
[<emphasis role="bold">-d</emphasis>]
[<emphasis role="bold">-a/-base64</emphasis>]
[<emphasis role="bold">-A</emphasis>]
[<emphasis role="bold">-k password</emphasis>]
[<emphasis role="bold">-kfile filename</emphasis>]
[<emphasis role="bold">-K key</emphasis>]
[<emphasis role="bold">-iv IV</emphasis>]
[<emphasis role="bold">-S salt</emphasis>]
[<emphasis role="bold">-salt</emphasis>]
[<emphasis role="bold">-nosalt</emphasis>]
[<emphasis role="bold">-z</emphasis>]
[<emphasis role="bold">-md digest</emphasis>]
[<emphasis role="bold">-p</emphasis>]
[<emphasis role="bold">-P</emphasis>]
[<emphasis role="bold">-bufsize number</emphasis>]
[<emphasis role="bold">-nopad</emphasis>]
[<emphasis role="bold">-debug</emphasis>]
[<emphasis role="bold">-none</emphasis>]
[<emphasis role="bold">-engine id</emphasis>]</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-647bdeb3834c037e43d6043aef6a1663"><title>DESCRIPTION</title>
    <para>
      The symmetric cipher commands allow data to be encrypted or decrypted
      using various block and stream ciphers using keys based on passwords
      or explicitly provided. Base64 encoding or decoding can also be
      performed either by itself or in addition to the encryption or
      decryption.
    </para>
  </refsection>
  <refsection xml:id="ID-7adf4d5c34aa8b0279835a4a53eb1903"><title>OPTIONS</title>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">-in filename</emphasis></term>
          <listitem>
            <para>
	      the input filename, standard input by default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-out filename</emphasis></term>
          <listitem>
            <para>
	      the output filename, standard output by default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-pass arg</emphasis></term>
          <listitem>
            <para>
	      the password source. For more information about the format of
	      <emphasis role="bold">arg</emphasis> see the <emphasis role="bold">PASS PHRASE ARGUMENTS</emphasis> section in
	      <citerefentry> <refentrytitle>openssl</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-salt</emphasis></term>
          <listitem>
            <para>
	      use a salt in the key derivation routines. This is the
	      default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nosalt</emphasis></term>
          <listitem>
            <para>
	      don't use a salt in the key derivation routines. This option
	      <emphasis role="bold">SHOULD NOT</emphasis> be used except
	      for test purposes or compatibility with ancient versions of
	      OpenSSL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-e</emphasis></term>
          <listitem>
            <para>
	      encrypt the input data: this is the default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-d</emphasis></term>
          <listitem>
            <para>
	      decrypt the input data.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-a</emphasis></term>
          <listitem>
            <para>
	      base64 process the data. This means that if encryption is
	      taking place the data is base64 encoded after encryption. If
	      decryption is set then the input data is base64 decoded
	      before being decrypted.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-base64</emphasis></term>
          <listitem>
            <para>
	      same as <emphasis role="bold">-a</emphasis>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-A</emphasis></term>
          <listitem>
            <para>
	      if the <emphasis role="bold">-a</emphasis> option is set then
	      base64 process the data on one line.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-k password</emphasis></term>
          <listitem>
            <para>
	      the password to derive the key from. This is for
	      compatibility with previous versions of OpenSSL. Superseded
	      by the <emphasis role="bold">-pass</emphasis> argument.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-kfile filename</emphasis></term>
          <listitem>
            <para>
	      read the password to derive the key from the first line of
	      <emphasis role="bold">filename</emphasis>. This is for
	      compatibility with previous versions of OpenSSL. Superseded
	      by the <emphasis role="bold">-pass</emphasis> argument.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-md digest</emphasis></term>
          <listitem>
            <para>
	      Use the specified digest to create the key from the
	      passphrase. The default algorithm is sha-256.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nosalt</emphasis></term>
          <listitem>
            <para>
	      do not use a salt
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-salt</emphasis></term>
          <listitem>
            <para>
	      use salt (randomly generated or provide with <emphasis role="bold">-S</emphasis> option) when encrypting (this is
	      the default).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-S salt</emphasis></term>
          <listitem>
            <para>
	      the actual salt to use: this must be represented as a string
	      of hex digits.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-K key</emphasis></term>
          <listitem>
            <para>
	      the actual key to use: this must be represented as a string
	      comprised only of hex digits. If only the key is specified,
	      the IV must additionally specified using the <emphasis role="bold">-iv</emphasis> option. When both a key and a
	      password are specified, the key given with the <emphasis role="bold">-K</emphasis> option will be used and the IV
	      generated from the password will be taken. It probably does
	      not make much sense to specify both key and password.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-iv IV</emphasis></term>
          <listitem>
            <para>
	      the actual IV to use: this must be represented as a string
	      comprised only of hex digits. When only the key is specified
	      using the <emphasis role="bold">-K</emphasis> option, the IV
	      must explicitly be defined. When a password is being
	      specified using one of the other options, the IV is generated
	      from this password.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-p</emphasis></term>
          <listitem>
            <para>
	      print out the key and IV used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-P</emphasis></term>
          <listitem>
            <para>
	      print out the key and IV used then immediately exit: don't do
	      any encryption or decryption.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-bufsize number</emphasis></term>
          <listitem>
            <para>
	      set the buffer size for I/O
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nopad</emphasis></term>
          <listitem>
            <para>
	      disable standard block padding
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-debug</emphasis></term>
          <listitem>
            <para>
	      debug the BIOs used for I/O.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-z</emphasis></term>
          <listitem>
            <para>
	      Compress or decompress clear text using zlib before
	      encryption or after decryption. This option exists only if
	      OpenSSL with compiled with zlib or zlib-dynamic option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-none</emphasis></term>
          <listitem>
            <para>
	      Use NULL cipher (no encryption or decryption of input).
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-fe169f85b3849ea60cde71216d630cb0"><title>NOTES</title>
    <para>
      The program can be called either as <emphasis role="bold">openssl
      ciphername</emphasis> or <emphasis role="bold">openssl enc
      -ciphername</emphasis>. But the first form doesn't work with
      engine-provided ciphers, because this form is processed before the
      configuration file is read and any ENGINEs loaded.
    </para>
    <para>
      Engines which provide entirely new encryption algorithms (such as
      ccgost engine which provides gost89 algorithm) should be configured
      in the configuration file. Engines, specified in the command line
      using -engine options can only be used for hardware-assisted
      implementations of ciphers, which are supported by OpenSSL core or
      other engine, specified in the configuration file.
    </para>
    <para>
      When enc command lists supported ciphers, ciphers provided by
      engines, specified in the configuration files are listed too.
    </para>
    <para>
      A password will be prompted for to derive the key and IV if
      necessary.
    </para>
    <para>
      The <emphasis role="bold">-salt</emphasis> option should <emphasis role="bold">ALWAYS</emphasis> be used if the key is being derived
      from a password unless you want compatibility with previous versions
      of OpenSSL.
    </para>
    <para>
      Without the <emphasis role="bold">-salt</emphasis> option it is
      possible to perform efficient dictionary attacks on the password and
      to attack stream cipher encrypted data. The reason for this is that
      without the salt the same password always generates the same
      encryption key. When the salt is being used the first eight bytes of
      the encrypted data are reserved for the salt: it is generated at
      random when encrypting a file and read from the encrypted file when
      it is decrypted.
    </para>
    <para>
      Some of the ciphers do not have large keys and others have security
      implications if not used correctly. A beginner is advised to just use
      a strong block cipher in CBC mode such as bf or des3.
    </para>
    <para>
      All the block ciphers normally use PKCS#5 padding also known as
      standard block padding: this allows a rudimentary integrity or
      password check to be performed. However since the chance of random
      data passing the test is better than 1 in 256 it isn't a very good
      test.
    </para>
    <para>
      If padding is disabled then the input data must be a multiple of the
      cipher block length.
    </para>
    <para>
      All RC2 ciphers have the same key and effective key length.
    </para>
    <para>
      Blowfish and RC5 algorithms use a 128 bit key.
    </para>
  </refsection>
  <refsection xml:id="ID-5fdb39c01614c5fb0589a21b18ae6104"><title>SUPPORTED CIPHERS</title>
    <para>
      Note that some of these ciphers can be disabled at compile time and
      some are available only if an appropriate engine is configured in the
      configuration file. The output of the <emphasis role="bold">enc</emphasis> command run with unsupported options (for
      example <emphasis role="bold">openssl enc -help</emphasis>) includes
      a list of ciphers, supported by your version of OpenSSL, including
      ones provided by configured engines.
    </para>
    <para>
      The <emphasis role="bold">enc</emphasis> program does not support
      authenticated encryption modes like CCM and GCM. The utility does not
      store or retrieve the authentication tag.
    </para>
    <screen>

base64             Base 64

bf-cbc             Blowfish in CBC mode
bf                 Alias for bf-cbc
bf-cfb             Blowfish in CFB mode
bf-ecb             Blowfish in ECB mode
bf-ofb             Blowfish in OFB mode

cast-cbc           CAST in CBC mode
cast               Alias for cast-cbc
cast5-cbc          CAST5 in CBC mode
cast5-cfb          CAST5 in CFB mode
cast5-ecb          CAST5 in ECB mode
cast5-ofb          CAST5 in OFB mode

des-cbc            DES in CBC mode
des                Alias for des-cbc
des-cfb            DES in CBC mode
des-ofb            DES in OFB mode
des-ecb            DES in ECB mode

des-ede-cbc        Two key triple DES EDE in CBC mode
des-ede            Two key triple DES EDE in ECB mode
des-ede-cfb        Two key triple DES EDE in CFB mode
des-ede-ofb        Two key triple DES EDE in OFB mode

des-ede3-cbc       Three key triple DES EDE in CBC mode
des-ede3           Three key triple DES EDE in ECB mode
des3               Alias for des-ede3-cbc
des-ede3-cfb       Three key triple DES EDE CFB mode
des-ede3-ofb       Three key triple DES EDE in OFB mode

desx               DESX algorithm.

gost89             GOST 28147-89 in CFB mode (provided by ccgost engine)
gost89-cnt        `GOST 28147-89 in CNT mode (provided by ccgost engine)

idea-cbc           IDEA algorithm in CBC mode
idea               same as idea-cbc
idea-cfb           IDEA in CFB mode
idea-ecb           IDEA in ECB mode
idea-ofb           IDEA in OFB mode

rc2-cbc            128 bit RC2 in CBC mode
rc2                Alias for rc2-cbc
rc2-cfb            128 bit RC2 in CFB mode
rc2-ecb            128 bit RC2 in ECB mode
rc2-ofb            128 bit RC2 in OFB mode
rc2-64-cbc         64 bit RC2 in CBC mode
rc2-40-cbc         40 bit RC2 in CBC mode

rc4                128 bit RC4
rc4-64             64 bit RC4
rc4-40             40 bit RC4

rc5-cbc            RC5 cipher in CBC mode
rc5                Alias for rc5-cbc
rc5-cfb            RC5 cipher in CFB mode
rc5-ecb            RC5 cipher in ECB mode
rc5-ofb            RC5 cipher in OFB mode

aes-[128|192|256]-cbc  128/192/256 bit AES in CBC mode
aes[128|192|256]       Alias for aes-[128|192|256]-cbc
aes-[128|192|256]-cfb  128/192/256 bit AES in 128 bit CFB mode
aes-[128|192|256]-cfb1 128/192/256 bit AES in 1 bit CFB mode
aes-[128|192|256]-cfb8 128/192/256 bit AES in 8 bit CFB mode
aes-[128|192|256]-ecb  128/192/256 bit AES in ECB mode
aes-[128|192|256]-ofb  128/192/256 bit AES in OFB mode</screen>
  </refsection>
  <refsection xml:id="ID-aebe7151132aa58ae9e34597d80a0eb6"><title>EXAMPLES</title>
    <para>
      Just base64 encode a binary file:
    </para>
    <screen>openssl base64 -in file.bin -out file.b64</screen>
    <para>
      Decode the same file
    </para>
    <screen>openssl base64 -d -in file.b64 -out file.bin</screen>
    <para>
      Encrypt a file using triple DES in CBC mode using a prompted
      password:
    </para>
    <screen>openssl des3 -salt -in file.txt -out file.des3</screen>
    <para>
      Decrypt a file using a supplied password:
    </para>
    <screen>openssl des3 -d -salt -in file.des3 -out file.txt -k mypassword</screen>
    <para>
      Encrypt a file then base64 encode it (so it can be sent via mail for
      example) using Blowfish in CBC mode:
    </para>
    <screen>openssl bf -a -salt -in file.txt -out file.bf</screen>
    <para>
      Base64 decode a file then decrypt it:
    </para>
    <screen>openssl bf -d -salt -a -in file.bf -out file.txt</screen>
    <para>
      Decrypt some data using a supplied 40 bit RC4 key:
    </para>
    <screen>openssl rc4-40 -in file.rc4 -out file.txt -K 0102030405</screen>
  </refsection>
  <refsection xml:id="ID-b3a98260071e7c76a283e744ac8e5a92"><title>BUGS</title>
    <para>
      The <emphasis role="bold">-A</emphasis> option when used with large
      files doesn't work properly.
    </para>
    <para>
      There should be an option to allow an iteration count to be included.
    </para>
    <para>
      The <emphasis role="bold">enc</emphasis> program only supports a
      fixed number of algorithms with certain parameters. So if, for
      example, you want to use RC2 with a 76 bit key or RC4 with an 84 bit
      key you can't use this program.
    </para>
  </refsection>
  <refsection xml:id="ID-f958c0f05e434c6ded5796be06ee80aa"><title>HISTORY</title>
    <para>
      The default digest was chaned from MD5 to SHA256 in Openssl 1.1.
    </para>
  </refsection>
</refentry>