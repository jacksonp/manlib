<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>PEM_read_bio_PrivateKey.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>pem_password_cb,
PEM_read_bio_PrivateKey, PEM_read_PrivateKey, PEM_write_bio_PrivateKey,
PEM_write_bio_PrivateKey_traditional, PEM_write_PrivateKey,
PEM_write_bio_PKCS8PrivateKey, PEM_write_PKCS8PrivateKey,
PEM_write_bio_PKCS8PrivateKey_nid, PEM_write_PKCS8PrivateKey_nid,
PEM_read_bio_PUBKEY, PEM_read_PUBKEY, PEM_write_bio_PUBKEY, PEM_write_PUBKEY,
PEM_read_bio_RSAPrivateKey, PEM_read_RSAPrivateKey,
PEM_write_bio_RSAPrivateKey, PEM_write_RSAPrivateKey,
PEM_read_bio_RSAPublicKey, PEM_read_RSAPublicKey, PEM_write_bio_RSAPublicKey,
PEM_write_RSAPublicKey, PEM_read_bio_RSA_PUBKEY, PEM_read_RSA_PUBKEY,
PEM_write_bio_RSA_PUBKEY, PEM_write_RSA_PUBKEY, PEM_read_bio_DSAPrivateKey,
PEM_read_DSAPrivateKey, PEM_write_bio_DSAPrivateKey, PEM_write_DSAPrivateKey,
PEM_read_bio_DSA_PUBKEY, PEM_read_DSA_PUBKEY, PEM_write_bio_DSA_PUBKEY,
PEM_write_DSA_PUBKEY, PEM_read_bio_DSAparams, PEM_read_DSAparams,
PEM_write_bio_DSAparams, PEM_write_DSAparams, PEM_read_bio_DHparams,
PEM_read_DHparams, PEM_write_bio_DHparams, PEM_write_DHparams,
PEM_read_bio_X509, PEM_read_X509, PEM_write_bio_X509, PEM_write_X509,
PEM_read_bio_X509_AUX, PEM_read_X509_AUX, PEM_write_bio_X509_AUX,
PEM_write_X509_AUX, PEM_read_bio_X509_REQ, PEM_read_X509_REQ,
PEM_write_bio_X509_REQ, PEM_write_X509_REQ, PEM_write_bio_X509_REQ_NEW,
PEM_write_X509_REQ_NEW, PEM_read_bio_X509_CRL, PEM_read_X509_CRL,
PEM_write_bio_X509_CRL, PEM_write_X509_CRL, PEM_read_bio_PKCS7, PEM_read_PKCS7,
PEM_write_bio_PKCS7, PEM_write_PKCS7</refname>
<refpurpose>PEM routines</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/pem.h&gt;</synopsis>
<synopsis>typedef int (*pem_password_cb)(char *buf, int size, int rwflag, void *u);</synopsis>
<synopsis>EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x,
                                  pem_password_cb *cb, void *u);
EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x,
                              pem_password_cb *cb, void *u);
int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
                             unsigned char *kstr, int klen,
                             pem_password_cb *cb, void *u);
int PEM_write_bio_PrivateKey_traditional(BIO *bp, EVP_PKEY *x,
                                         const EVP_CIPHER *enc,
                                         unsigned char *kstr, int klen,
                                         pem_password_cb *cb, void *u);
int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                         unsigned char *kstr, int klen,
                         pem_password_cb *cb, void *u);</synopsis>
<synopsis>int PEM_write_bio_PKCS8PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
                                  char *kstr, int klen,
                                  pem_password_cb *cb, void *u);
int PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                              char *kstr, int klen,
                              pem_password_cb *cb, void *u);
int PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid,
                                      char *kstr, int klen,
                                      pem_password_cb *cb, void *u);
int PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid,
                                  char *kstr, int klen,
                                  pem_password_cb *cb, void *u);</synopsis>
<synopsis>EVP_PKEY *PEM_read_bio_PUBKEY(BIO *bp, EVP_PKEY **x,
                              pem_password_cb *cb, void *u);
EVP_PKEY *PEM_read_PUBKEY(FILE *fp, EVP_PKEY **x,
                          pem_password_cb *cb, void *u);
int PEM_write_bio_PUBKEY(BIO *bp, EVP_PKEY *x);
int PEM_write_PUBKEY(FILE *fp, EVP_PKEY *x);</synopsis>
<synopsis>RSA *PEM_read_bio_RSAPrivateKey(BIO *bp, RSA **x,
                                pem_password_cb *cb, void *u);
RSA *PEM_read_RSAPrivateKey(FILE *fp, RSA **x,
                            pem_password_cb *cb, void *u);
int PEM_write_bio_RSAPrivateKey(BIO *bp, RSA *x, const EVP_CIPHER *enc,
                                unsigned char *kstr, int klen,
                                pem_password_cb *cb, void *u);
int PEM_write_RSAPrivateKey(FILE *fp, RSA *x, const EVP_CIPHER *enc,
                            unsigned char *kstr, int klen,
                            pem_password_cb *cb, void *u);</synopsis>
<synopsis>RSA *PEM_read_bio_RSAPublicKey(BIO *bp, RSA **x,
                               pem_password_cb *cb, void *u);
RSA *PEM_read_RSAPublicKey(FILE *fp, RSA **x,
                           pem_password_cb *cb, void *u);
int PEM_write_bio_RSAPublicKey(BIO *bp, RSA *x);
int PEM_write_RSAPublicKey(FILE *fp, RSA *x);</synopsis>
<synopsis>RSA *PEM_read_bio_RSA_PUBKEY(BIO *bp, RSA **x,
                             pem_password_cb *cb, void *u);
RSA *PEM_read_RSA_PUBKEY(FILE *fp, RSA **x,
                         pem_password_cb *cb, void *u);
int PEM_write_bio_RSA_PUBKEY(BIO *bp, RSA *x);
int PEM_write_RSA_PUBKEY(FILE *fp, RSA *x);</synopsis>
<synopsis>DSA *PEM_read_bio_DSAPrivateKey(BIO *bp, DSA **x,
                                pem_password_cb *cb, void *u);
DSA *PEM_read_DSAPrivateKey(FILE *fp, DSA **x,
                            pem_password_cb *cb, void *u);
int PEM_write_bio_DSAPrivateKey(BIO *bp, DSA *x, const EVP_CIPHER *enc,
                                unsigned char *kstr, int klen,
                                pem_password_cb *cb, void *u);
int PEM_write_DSAPrivateKey(FILE *fp, DSA *x, const EVP_CIPHER *enc,
                            unsigned char *kstr, int klen,
                            pem_password_cb *cb, void *u);</synopsis>
<synopsis>DSA *PEM_read_bio_DSA_PUBKEY(BIO *bp, DSA **x,
                             pem_password_cb *cb, void *u);
DSA *PEM_read_DSA_PUBKEY(FILE *fp, DSA **x,
                         pem_password_cb *cb, void *u);
int PEM_write_bio_DSA_PUBKEY(BIO *bp, DSA *x);
int PEM_write_DSA_PUBKEY(FILE *fp, DSA *x);</synopsis>
<synopsis>DSA *PEM_read_bio_DSAparams(BIO *bp, DSA **x, pem_password_cb *cb, void *u);
DSA *PEM_read_DSAparams(FILE *fp, DSA **x, pem_password_cb *cb, void *u);
int PEM_write_bio_DSAparams(BIO *bp, DSA *x);
int PEM_write_DSAparams(FILE *fp, DSA *x);</synopsis>
<synopsis>DH *PEM_read_bio_DHparams(BIO *bp, DH **x, pem_password_cb *cb, void *u);
DH *PEM_read_DHparams(FILE *fp, DH **x, pem_password_cb *cb, void *u);
int PEM_write_bio_DHparams(BIO *bp, DH *x);
int PEM_write_DHparams(FILE *fp, DH *x);</synopsis>
<synopsis>X509 *PEM_read_bio_X509(BIO *bp, X509 **x, pem_password_cb *cb, void *u);
X509 *PEM_read_X509(FILE *fp, X509 **x, pem_password_cb *cb, void *u);
int PEM_write_bio_X509(BIO *bp, X509 *x);
int PEM_write_X509(FILE *fp, X509 *x);</synopsis>
<synopsis>X509 *PEM_read_bio_X509_AUX(BIO *bp, X509 **x, pem_password_cb *cb, void *u);
X509 *PEM_read_X509_AUX(FILE *fp, X509 **x, pem_password_cb *cb, void *u);
int PEM_write_bio_X509_AUX(BIO *bp, X509 *x);
int PEM_write_X509_AUX(FILE *fp, X509 *x);</synopsis>
<synopsis>X509_REQ *PEM_read_bio_X509_REQ(BIO *bp, X509_REQ **x,
                                pem_password_cb *cb, void *u);
X509_REQ *PEM_read_X509_REQ(FILE *fp, X509_REQ **x,
                            pem_password_cb *cb, void *u);
int PEM_write_bio_X509_REQ(BIO *bp, X509_REQ *x);
int PEM_write_X509_REQ(FILE *fp, X509_REQ *x);
int PEM_write_bio_X509_REQ_NEW(BIO *bp, X509_REQ *x);
int PEM_write_X509_REQ_NEW(FILE *fp, X509_REQ *x);</synopsis>
<synopsis>X509_CRL *PEM_read_bio_X509_CRL(BIO *bp, X509_CRL **x,
                                pem_password_cb *cb, void *u);
X509_CRL *PEM_read_X509_CRL(FILE *fp, X509_CRL **x,
                            pem_password_cb *cb, void *u);
int PEM_write_bio_X509_CRL(BIO *bp, X509_CRL *x);
int PEM_write_X509_CRL(FILE *fp, X509_CRL *x);</synopsis>
<synopsis>PKCS7 *PEM_read_bio_PKCS7(BIO *bp, PKCS7 **x, pem_password_cb *cb, void *u);
PKCS7 *PEM_read_PKCS7(FILE *fp, PKCS7 **x, pem_password_cb *cb, void *u);
int PEM_write_bio_PKCS7(BIO *bp, PKCS7 *x);
int PEM_write_PKCS7(FILE *fp, PKCS7 *x);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-a0353089e6a1aed173605b9a24ba466c"><title>DESCRIPTION</title>
    <para>
      The PEM functions read or write structures in PEM format. In this
      sense PEM format is simply base64 encoded data surrounded by header
      lines.
    </para>
    <para>
      For more details about the meaning of arguments see the <emphasis role="bold">PEM FUNCTION ARGUMENTS</emphasis> section.
    </para>
    <para>
      Each operation has four functions associated with it. For clarity the
      term "<emphasis role="bold">foobar</emphasis> functions" will be used
      to collectively refer to the PEM_read_bio_foobar(),
      PEM_read_foobar(), PEM_write_bio_foobar() and PEM_write_foobar()
      functions.
    </para>
    <para>
      The <emphasis role="bold">PrivateKey</emphasis> functions read or
      write a private key in PEM format using an EVP_PKEY structure. The
      write routines use PKCS#8 private key format and are equivalent to
      PEM_write_bio_PKCS8PrivateKey().The read functions transparently
      handle traditional and PKCS#8 format encrypted and unencrypted keys.
    </para>
    <para>
      PEM_write_bio_PrivateKey_traditional() writes out a private key in
      legacy "traditional" format.
    </para>
    <para>
      PEM_write_bio_PKCS8PrivateKey() and PEM_write_PKCS8PrivateKey() write
      a private key in an EVP_PKEY structure in PKCS#8
      EncryptedPrivateKeyInfo format using PKCS#5 v2.0 password based
      encryption algorithms. The <emphasis role="bold">cipher</emphasis>
      argument specifies the encryption algorithm to use: unlike some other
      PEM routines the encryption is applied at the PKCS#8 level and not in
      the PEM headers. If <emphasis role="bold">cipher</emphasis> is NULL
      then no encryption is used and a PKCS#8 PrivateKeyInfo structure is
      used instead.
    </para>
    <para>
      PEM_write_bio_PKCS8PrivateKey_nid() and
      PEM_write_PKCS8PrivateKey_nid() also write out a private key as a
      PKCS#8 EncryptedPrivateKeyInfo however it uses PKCS#5 v1.5 or PKCS#12
      encryption algorithms instead. The algorithm to use is specified in
      the <emphasis role="bold">nid</emphasis> parameter and should be the
      NID of the corresponding OBJECT IDENTIFIER (see NOTES section).
    </para>
    <para>
      The <emphasis role="bold">PUBKEY</emphasis> functions process a
      public key using an EVP_PKEY structure. The public key is encoded as
      a SubjectPublicKeyInfo structure.
    </para>
    <para>
      The <emphasis role="bold">RSAPrivateKey</emphasis> functions process
      an RSA private key using an RSA structure. The write routines uses
      traditional format. The read routines handles the same formats as the
      <emphasis role="bold">PrivateKey</emphasis> functions but an error
      occurs if the private key is not RSA.
    </para>
    <para>
      The <emphasis role="bold">RSAPublicKey</emphasis> functions process
      an RSA public key using an RSA structure. The public key is encoded
      using a PKCS#1 RSAPublicKey structure.
    </para>
    <para>
      The <emphasis role="bold">RSA_PUBKEY</emphasis> functions also
      process an RSA public key using an RSA structure. However the public
      key is encoded using a SubjectPublicKeyInfo structure and an error
      occurs if the public key is not RSA.
    </para>
    <para>
      The <emphasis role="bold">DSAPrivateKey</emphasis> functions process
      a DSA private key using a DSA structure. The write routines uses
      traditional format. The read routines handles the same formats as the
      <emphasis role="bold">PrivateKey</emphasis> functions but an error
      occurs if the private key is not DSA.
    </para>
    <para>
      The <emphasis role="bold">DSA_PUBKEY</emphasis> functions process a
      DSA public key using a DSA structure. The public key is encoded using
      a SubjectPublicKeyInfo structure and an error occurs if the public
      key is not DSA.
    </para>
    <para>
      The <emphasis role="bold">DSAparams</emphasis> functions process DSA
      parameters using a DSA structure. The parameters are encoded using a
      Dss-Parms structure as defined in RFC2459.
    </para>
    <para>
      The <emphasis role="bold">DHparams</emphasis> functions process DH
      parameters using a DH structure. The parameters are encoded using a
      PKCS#3 DHparameter structure.
    </para>
    <para>
      The <emphasis role="bold">X509</emphasis> functions process an X509
      certificate using an X509 structure. They will also process a trusted
      X509 certificate but any trust settings are discarded.
    </para>
    <para>
      The <emphasis role="bold">X509_AUX</emphasis> functions process a
      trusted X509 certificate using an X509 structure.
    </para>
    <para>
      The <emphasis role="bold">X509_REQ</emphasis> and <emphasis role="bold">X509_REQ_NEW</emphasis> functions process a PKCS#10
      certificate request using an X509_REQ structure. The <emphasis role="bold">X509_REQ</emphasis> write functions use <emphasis role="bold">CERTIFICATE REQUEST</emphasis> in the header whereas the
      <emphasis role="bold">X509_REQ_NEW</emphasis> functions use <emphasis role="bold">NEW CERTIFICATE REQUEST</emphasis> (as required by some
      CAs). The <emphasis role="bold">X509_REQ</emphasis> read functions
      will handle either form so there are no <emphasis role="bold">X509_REQ_NEW</emphasis> read functions.
    </para>
    <para>
      The <emphasis role="bold">X509_CRL</emphasis> functions process an
      X509 CRL using an X509_CRL structure.
    </para>
    <para>
      The <emphasis role="bold">PKCS7</emphasis> functions process a PKCS#7
      ContentInfo using a PKCS7 structure.
    </para>
  </refsection>
  <refsection xml:id="ID-216fa4714144ccf940d6e28ee1c9c1a0"><title>PEM FUNCTION ARGUMENTS</title>
    <para>
      The PEM functions have many common arguments.
    </para>
    <para>
      The <emphasis role="bold">bp</emphasis> BIO parameter (if present)
      specifies the BIO to read from or write to.
    </para>
    <para>
      The <emphasis role="bold">fp</emphasis> FILE parameter (if present)
      specifies the FILE pointer to read from or write to.
    </para>
    <para>
      The PEM read functions all take an argument <emphasis role="bold">TYPE **x</emphasis> and return a <emphasis role="bold">TYPE *</emphasis> pointer. Where <emphasis role="bold">TYPE</emphasis> is whatever structure the function uses.
      If <emphasis role="bold">x</emphasis> is NULL then the parameter is
      ignored. If <emphasis role="bold">x</emphasis> is not NULL but
      <emphasis role="bold">*x</emphasis> is NULL then the structure
      returned will be written to <emphasis role="bold">*x</emphasis>. If
      neither <emphasis role="bold">x</emphasis> nor <emphasis role="bold">*x</emphasis> is NULL then an attempt is made to reuse
      the structure at <emphasis role="bold">*x</emphasis> (but see BUGS
      and EXAMPLES sections). Irrespective of the value of <emphasis role="bold">x</emphasis> a pointer to the structure is always
      returned (or NULL if an error occurred).
    </para>
    <para>
      The PEM functions which write private keys take an <emphasis role="bold">enc</emphasis> parameter which specifies the encryption
      algorithm to use, encryption is done at the PEM level. If this
      parameter is set to NULL then the private key is written in
      unencrypted form.
    </para>
    <para>
      The <emphasis role="bold">cb</emphasis> argument is the callback to
      use when querying for the pass phrase used for encrypted PEM
      structures (normally only private keys).
    </para>
    <para>
      For the PEM write routines if the <emphasis role="bold">kstr</emphasis> parameter is not NULL then <emphasis role="bold">klen</emphasis> bytes at <emphasis role="bold">kstr</emphasis> are used as the passphrase and <emphasis role="bold">cb</emphasis> is ignored.
    </para>
    <para>
      If the <emphasis role="bold">cb</emphasis> parameters is set to NULL
      and the <emphasis role="bold">u</emphasis> parameter is not NULL then
      the <emphasis role="bold">u</emphasis> parameter is interpreted as a
      null terminated string to use as the passphrase. If both <emphasis role="bold">cb</emphasis> and <emphasis role="bold">u</emphasis> are
      NULL then the default callback routine is used which will typically
      prompt for the passphrase on the current terminal with echoing turned
      off.
    </para>
    <para>
      The default passphrase callback is sometimes inappropriate (for
      example in a GUI application) so an alternative can be supplied. The
      callback routine has the following form:
    </para>
    <screen>int cb(char *buf, int size, int rwflag, void *u);</screen>
    <para>
      <emphasis role="bold">buf</emphasis> is the buffer to write the
      passphrase to. <emphasis role="bold">size</emphasis> is the maximum
      length of the passphrase (i.e. the size of buf). <emphasis role="bold">rwflag</emphasis> is a flag which is set to 0 when
      reading and 1 when writing. A typical routine will ask the user to
      verify the passphrase (for example by prompting for it twice) if
      <emphasis role="bold">rwflag</emphasis> is 1. The <emphasis role="bold">u</emphasis> parameter has the same value as the
      <emphasis role="bold">u</emphasis> parameter passed to the PEM
      routine. It allows arbitrary data to be passed to the callback by the
      application (for example a window handle in a GUI application). The
      callback <emphasis role="bold">must</emphasis> return the number of
      characters in the passphrase or 0 if an error occurred.
    </para>
  </refsection>
  <refsection xml:id="ID-814ad52006598528da8307b791835767"><title>EXAMPLES</title>
    <para>
      Although the PEM routines take several arguments in almost all
      applications most of them are set to 0 or NULL.
    </para>
    <para>
      Read a certificate in PEM format from a BIO:
    </para>
    <screen>X509 *x;
x = PEM_read_bio_X509(bp, NULL, 0, NULL);
if (x == NULL) {
    /* Error */
}</screen>
    <para>
      Alternative method:
    </para>
    <screen>X509 *x = NULL;
if (!PEM_read_bio_X509(bp, &amp;x, 0, NULL)) {
    /* Error */
}</screen>
    <para>
      Write a certificate to a BIO:
    </para>
    <screen>if (!PEM_write_bio_X509(bp, x)) {
    /* Error */
}</screen>
    <para>
      Write a private key (using traditional format) to a BIO using triple
      DES encryption, the pass phrase is prompted for:
    </para>
    <screen>if (!PEM_write_bio_PrivateKey(bp, key, EVP_des_ede3_cbc(), NULL, 0, 0, NULL)) {
    /* Error */
}</screen>
    <para>
      Write a private key (using PKCS#8 format) to a BIO using triple DES
      encryption, using the pass phrase "hello":
    </para>
    <screen>if (!PEM_write_bio_PKCS8PrivateKey(bp, key, EVP_des_ede3_cbc(), NULL, 0, 0, "hello")) {
    /* Error */
}</screen>
    <para>
      Read a private key from a BIO using a pass phrase callback:
    </para>
    <screen>key = PEM_read_bio_PrivateKey(bp, NULL, pass_cb, "My Private Key");
if (key == NULL) {
    /* Error */
}</screen>
    <para>
      Skeleton pass phrase callback:
    </para>
    <screen>int pass_cb(char *buf, int size, int rwflag, void *u)
{
    int len;
    char *tmp;

/* We'd probably do something else if 'rwflag' is 1 */
printf("Enter pass phrase for \"%s\"\n", (char *)u);

/* get pass phrase, length 'len' into 'tmp' */
tmp = "hello";
len = strlen(tmp);
if (len &lt;= 0)
    return 0;

    if (len &gt; size)
        len = size;
    memcpy(buf, tmp, len);
    return len;
}</screen>
  </refsection>
  <refsection xml:id="ID-25409937253e0501ef3cfc8bb1860c14"><title>NOTES</title>
    <para>
      The old <emphasis role="bold">PrivateKey</emphasis> write routines
      are retained for compatibility. New applications should write private
      keys using the PEM_write_bio_PKCS8PrivateKey() or
      PEM_write_PKCS8PrivateKey() routines because they are more secure
      (they use an iteration count of 2048 whereas the traditional routines
      use a count of 1) unless compatibility with older versions of OpenSSL
      is important.
    </para>
    <para>
      The <emphasis role="bold">PrivateKey</emphasis> read routines can be
      used in all applications because they handle all formats
      transparently.
    </para>
    <para>
      A frequent cause of problems is attempting to use the PEM routines
      like this:
    </para>
    <screen>X509 *x;
PEM_read_bio_X509(bp, &amp;x, 0, NULL);</screen>
    <para>
      this is a bug because an attempt will be made to reuse the data at
      <emphasis role="bold">x</emphasis> which is an uninitialised pointer.
    </para>
  </refsection>
  <refsection xml:id="ID-fa6b72689eef5b2088c8f98101d199e2"><title>PEM ENCRYPTION FORMAT</title>
    <para>
      These old <emphasis role="bold">PrivateKey</emphasis> routines use a
      non standard technique for encryption.
    </para>
    <para>
      The private key (or other data) takes the following form:
    </para>
    <screen>-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,3F17F5316E2BAC89

...base64 encoded data...
-----END RSA PRIVATE KEY-----</screen>
    <para>
      The line beginning with <emphasis role="italic">Proc-Type</emphasis>
      contains the version and the protection on the encapsulated data. The
      line beginning <emphasis role="italic">DEK-Info</emphasis> contains
      two comma separated values: the encryption algorithm name as used by
      EVP_get_cipherbyname() and an initialization vector used by the
      cipher encoded as a set of hexadecimal digits. After those two lines
      is the base64-encoded encrypted data.
    </para>
    <para>
      The encryption key is derived using EVP_BytesToKey(). The cipher's
      initialization vector is passed to EVP_BytesToKey() as the <emphasis role="bold">salt</emphasis> parameter. Internally, <emphasis role="bold">PKCS5_SALT_LEN</emphasis> bytes of the salt are used
      (regardless of the size of the initialization vector). The user's
      password is passed to EVP_BytesToKey() using the <emphasis role="bold">data</emphasis> and <emphasis role="bold">datal</emphasis> parameters. Finally, the library uses an
      iteration count of 1 for EVP_BytesToKey().
    </para>
    <para>
      The <emphasis role="bold">key</emphasis> derived by EVP_BytesToKey()
      along with the original initialization vector is then used to decrypt
      the encrypted data. The <emphasis role="bold">iv</emphasis> produced
      by EVP_BytesToKey() is not utilized or needed, and NULL should be
      passed to the function.
    </para>
    <para>
      The pseudo code to derive the key would look similar to:
    </para>
    <screen>EVP_CIPHER* cipher = EVP_des_ede3_cbc();
EVP_MD* md = EVP_md5();

unsigned int nkey = EVP_CIPHER_key_length(cipher);
unsigned int niv = EVP_CIPHER_iv_length(cipher);
unsigned char key[nkey];
unsigned char iv[niv];

memcpy(iv, HexToBin("3F17F5316E2BAC89"), niv);
rc = EVP_BytesToKey(cipher, md, iv /*salt*/, pword, plen, 1, key, NULL /*iv*/);
if (rc != nkey) {
    /* Error */
}

/* On success, use key and iv to initialize the cipher */</screen>
  </refsection>
  <refsection xml:id="ID-07cf26b830ac8358c05d4d7e689bc524"><title>BUGS</title>
    <para>
      The PEM read routines in some versions of OpenSSL will not correctly
      reuse an existing structure. Therefore the following:
    </para>
    <screen>PEM_read_bio_X509(bp, &amp;x, 0, NULL);</screen>
    <para>
      where <emphasis role="bold">x</emphasis> already contains a valid
      certificate, may not work, whereas:
    </para>
    <screen>X509_free(x);
x = PEM_read_bio_X509(bp, NULL, 0, NULL);</screen>
    <para>
      is guaranteed to work.
    </para>
  </refsection>
  <refsection xml:id="ID-2840b8912d91a89257ec6019f88d0778"><title>RETURN CODES</title>
    <para>
      The read routines return either a pointer to the structure read or
      NULL if an error occurred.
    </para>
    <para>
      The write routines return 1 for success or 0 for failure.
    </para>
  </refsection>
  <refsection xml:id="ID-15bbfb50295214d49f3c9172dcf57b5f"><title>HISTORY</title>
    <para>
      The old Netscape certificate sequences were no longer documented in
      OpenSSL 1.1; applications should use the PKCS7 standard instead as
      they will be formally deprecated in a future releases.
    </para>
  </refsection>
  <refsection xml:id="ID-a08daba99feed6bcd0f785bf0c8dde90"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>EVP_EncryptInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_BytesToKey</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-07979c4748427adb6cb2ceb6aac0b40c"><title>COPYRIGHT</title>
    <para>
      Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>