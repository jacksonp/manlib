<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EVP_SealInit.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EVP_SealInit, EVP_SealUpdate, EVP_SealFinal</refname>
<refpurpose>EVP envelope encryption</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis>int EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
                 unsigned char **ek, int *ekl, unsigned char *iv,
                 EVP_PKEY **pubk, int npubk);
int EVP_SealUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
        int *outl, unsigned char *in, int inl);
int EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
        int *outl);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-8b695cbb08c9345c2532a46ffc1b59d8"><title>DESCRIPTION</title>
    <para>
      The EVP envelope routines are a high level interface to envelope
      encryption. They generate a random key and IV (if required) then
      "envelope" it by using public key encryption. Data can then be
      encrypted using this key.
    </para>
    <para>
      EVP_SealInit() initializes a cipher context <emphasis role="bold">ctx</emphasis> for encryption with cipher <emphasis role="bold">type</emphasis> using a random secret key and IV.
      <emphasis role="bold">type</emphasis> is normally supplied by a
      function such as EVP_aes_256_cbc(). The secret key is encrypted using
      one or more public keys, this allows the same encrypted data to be
      decrypted using any of the corresponding private keys. <emphasis role="bold">ek</emphasis> is an array of buffers where the public key
      encrypted secret key will be written, each buffer must contain enough
      room for the corresponding encrypted key: that is <emphasis role="bold">ek[i]</emphasis> must have room for <emphasis role="bold">EVP_PKEY_size(pubk[i])</emphasis> bytes. The actual size
      of each encrypted secret key is written to the array <emphasis role="bold">ekl</emphasis>. <emphasis role="bold">pubk</emphasis> is
      an array of <emphasis role="bold">npubk</emphasis> public keys.
    </para>
    <para>
      The <emphasis role="bold">iv</emphasis> parameter is a buffer where
      the generated IV is written to. It must contain enough room for the
      corresponding cipher's IV, as determined by (for example)
      EVP_CIPHER_iv_length(type).
    </para>
    <para>
      If the cipher does not require an IV then the <emphasis role="bold">iv</emphasis> parameter is ignored and can be <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      EVP_SealUpdate() and EVP_SealFinal() have exactly the same properties
      as the EVP_EncryptUpdate() and EVP_EncryptFinal() routines, as
      documented on the <citerefentry>
      <refentrytitle>EVP_EncryptInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> manual page.
    </para>
  </refsection>
  <refsection xml:id="ID-9a7d84982bafa184c6a45822676ebf26"><title>RETURN VALUES</title>
    <para>
      EVP_SealInit() returns 0 on error or <emphasis role="bold">npubk</emphasis> if successful.
    </para>
    <para>
      EVP_SealUpdate() and EVP_SealFinal() return 1 for success and 0 for
      failure.
    </para>
  </refsection>
  <refsection xml:id="ID-12dcf8aac6e161a8bbc690e8b0a6aa08"><title>NOTES</title>
    <para>
      Because a random secret key is generated the random number generator
      must be seeded before calling EVP_SealInit().
    </para>
    <para>
      The public key must be RSA because it is the only OpenSSL public key
      algorithm that supports key transport.
    </para>
    <para>
      Envelope encryption is the usual method of using public key
      encryption on large amounts of data, this is because public key
      encryption is slow but symmetric encryption is fast. So symmetric
      encryption is used for bulk encryption and the small random symmetric
      key used is transferred using public key encryption.
    </para>
    <para>
      It is possible to call EVP_SealInit() twice in the same way as
      EVP_EncryptInit(). The first call should have <emphasis role="bold">npubk</emphasis> set to 0 and (after setting any cipher
      parameters) it should be called again with <emphasis role="bold">type</emphasis> set to NULL.
    </para>
  </refsection>
  <refsection xml:id="ID-845c00fc157870a69bd374431ffa73ed"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>evp</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>rand</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EVP_EncryptInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_OpenInit</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-2b7d725ec40516df2b6aea40cb4a2b82"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>