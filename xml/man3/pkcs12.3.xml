<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>pkcs12.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>pkcs12</refname>
<refpurpose>PKCS#12 file utility</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific"><emphasis role="bold">openssl</emphasis> <emphasis role="bold">pkcs12</emphasis>
[<emphasis role="bold">-export</emphasis>]
[<emphasis role="bold">-chain</emphasis>]
[<emphasis role="bold">-inkey filename</emphasis>]
[<emphasis role="bold">-certfile filename</emphasis>]
[<emphasis role="bold">-name name</emphasis>]
[<emphasis role="bold">-caname name</emphasis>]
[<emphasis role="bold">-in filename</emphasis>]
[<emphasis role="bold">-out filename</emphasis>]
[<emphasis role="bold">-noout</emphasis>]
[<emphasis role="bold">-nomacver</emphasis>]
[<emphasis role="bold">-nocerts</emphasis>]
[<emphasis role="bold">-clcerts</emphasis>]
[<emphasis role="bold">-cacerts</emphasis>]
[<emphasis role="bold">-nokeys</emphasis>]
[<emphasis role="bold">-info</emphasis>]
[<emphasis role="bold">-des | -des3 | -idea | -aes128 | -aes192 | -aes256 | -camellia128 | -camellia192 | -camellia256 | -nodes</emphasis>]
[<emphasis role="bold">-noiter</emphasis>]
[<emphasis role="bold">-maciter | -nomaciter | -nomac</emphasis>]
[<emphasis role="bold">-twopass</emphasis>]
[<emphasis role="bold">-descert</emphasis>]
[<emphasis role="bold">-certpbe cipher</emphasis>]
[<emphasis role="bold">-keypbe cipher</emphasis>]
[<emphasis role="bold">-macalg digest</emphasis>]
[<emphasis role="bold">-keyex</emphasis>]
[<emphasis role="bold">-keysig</emphasis>]
[<emphasis role="bold">-password arg</emphasis>]
[<emphasis role="bold">-passin arg</emphasis>]
[<emphasis role="bold">-passout arg</emphasis>]
[<emphasis role="bold">-rand file(s)</emphasis>]
[<emphasis role="bold">-CAfile file</emphasis>]
[<emphasis role="bold">-CApath dir</emphasis>]
[<emphasis role="bold">-CSP name</emphasis>]</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.apps.pkcs12.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      The <emphasis role="bold">pkcs12</emphasis> command allows PKCS#12
      files (sometimes referred to as PFX files) to be created and parsed.
      PKCS#12 files are used by several programs including Netscape, MSIE
      and MS Outlook.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs12.pod:COMMAND_OPTIONS"><title>COMMAND OPTIONS</title>
    <para>
      There are a lot of options the meaning of some depends of whether a
      PKCS#12 file is being created or parsed. By default a PKCS#12 file is
      parsed. A PKCS#12 file can be created by using the <emphasis role="bold">-export</emphasis> option (see below).
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs12.pod:PARSING_OPTIONS"><title>PARSING OPTIONS</title>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-in_filename"/><emphasis role="bold">-in filename</emphasis></term>
          <listitem>
            <para>
	      This specifies filename of the PKCS#12 file to be parsed.
	      Standard input is used by default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-out_filename"/><emphasis role="bold">-out filename</emphasis></term>
          <listitem>
            <para>
	      The filename to write certificates and private keys to,
	      standard output by default.  They are all written in PEM
	      format.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-passin_arg"/><emphasis role="bold">-passin arg</emphasis></term>
          <listitem>
            <para>
	      the PKCS#12 file (i.e. input file) password source. For more
	      information about the format of <emphasis role="bold">arg</emphasis> see the <emphasis role="bold">PASS
	      PHRASE ARGUMENTS</emphasis> section in openssl(1).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-passout_arg"/><emphasis role="bold">-passout arg</emphasis></term>
          <listitem>
            <para>
	      pass phrase source to encrypt any outputted private keys
	      with. For more information about the format of <emphasis role="bold">arg</emphasis> see the <emphasis role="bold">PASS
	      PHRASE ARGUMENTS</emphasis> section in openssl(1).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-password_arg"/><emphasis role="bold">-password arg</emphasis></term>
          <listitem>
            <para>
	      With -export, -password is equivalent to -passout. Otherwise,
	      -password is equivalent to -passin.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-noout"/><emphasis role="bold">-noout</emphasis></term>
          <listitem>
            <para>
	      this option inhibits output of the keys and certificates to
	      the output file version of the PKCS#12 file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-clcerts"/><emphasis role="bold">-clcerts</emphasis></term>
          <listitem>
            <para>
	      only output client certificates (not CA certificates).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-cacerts"/><emphasis role="bold">-cacerts</emphasis></term>
          <listitem>
            <para>
	      only output CA certificates (not client certificates).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-nocerts"/><emphasis role="bold">-nocerts</emphasis></term>
          <listitem>
            <para>
	      no certificates at all will be output.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-nokeys"/><emphasis role="bold">-nokeys</emphasis></term>
          <listitem>
            <para>
	      no private keys will be output.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-info"/><emphasis role="bold">-info</emphasis></term>
          <listitem>
            <para>
	      output additional information about the PKCS#12 file
	      structure, algorithms used and iteration counts.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-des"/><emphasis role="bold">-des</emphasis></term>
          <listitem>
            <para>
	      use DES to encrypt private keys before outputting.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-des3"/><emphasis role="bold">-des3</emphasis></term>
          <listitem>
            <para>
	      use triple DES to encrypt private keys before outputting,
	      this is the default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-idea"/><emphasis role="bold">-idea</emphasis></term>
          <listitem>
            <para>
	      use IDEA to encrypt private keys before outputting.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-aes128_-aes192_-aes256"/><emphasis role="bold">-aes128</emphasis>, <emphasis role="bold">-aes192</emphasis>, <emphasis role="bold">-aes256</emphasis></term>
          <listitem>
            <para>
	      use AES to encrypt private keys before outputting.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-camellia128_-camellia192_-camellia256"/><emphasis role="bold">-camellia128</emphasis>, <emphasis role="bold">-camellia192</emphasis>, <emphasis role="bold">-camellia256</emphasis></term>
          <listitem>
            <para>
	      use Camellia to encrypt private keys before outputting.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-nodes"/><emphasis role="bold">-nodes</emphasis></term>
          <listitem>
            <para>
	      don't encrypt the private keys at all.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-nomacver"/><emphasis role="bold">-nomacver</emphasis></term>
          <listitem>
            <para>
	      don't attempt to verify the integrity MAC before reading the
	      file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-twopass"/><emphasis role="bold">-twopass</emphasis></term>
          <listitem>
            <para>
	      prompt for separate integrity and encryption passwords: most
	      software always assumes these are the same so this option
	      will render such PKCS#12 files unreadable.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs12.pod:FILE_CREATION_OPTIONS"><title>FILE CREATION OPTIONS</title>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-export"/><emphasis role="bold">-export</emphasis></term>
          <listitem>
            <para>
	      This option specifies that a PKCS#12 file will be created
	      rather than parsed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-out_filename_i1"/><emphasis role="bold">-out filename</emphasis></term>
          <listitem>
            <para>
	      This specifies filename to write the PKCS#12 file to.
	      Standard output is used by default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-in_filename_i1"/><emphasis role="bold">-in filename</emphasis></term>
          <listitem>
            <para>
	      The filename to read certificates and private keys from,
	      standard input by default.  They must all be in PEM format.
	      The order doesn't matter but one private key and its
	      corresponding certificate should be present. If additional
	      certificates are present they will also be included in the
	      PKCS#12 file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-inkey_filename"/><emphasis role="bold">-inkey filename</emphasis></term>
          <listitem>
            <para>
	      file to read private key from. If not present then a private
	      key must be present in the input file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-name_friendlyname"/><emphasis role="bold">-name friendlyname</emphasis></term>
          <listitem>
            <para>
	      This specifies the "friendly name" for the certificate and
	      private key. This name is typically displayed in list boxes
	      by software importing the file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-certfile_filename"/><emphasis role="bold">-certfile filename</emphasis></term>
          <listitem>
            <para>
	      A filename to read additional certificates from.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-caname_friendlyname"/><emphasis role="bold">-caname friendlyname</emphasis></term>
          <listitem>
            <para>
	      This specifies the "friendly name" for other certificates.
	      This option may be used multiple times to specify names for
	      all certificates in the order they appear. Netscape ignores
	      friendly names on other certificates whereas MSIE displays
	      them.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-pass_arg_-passout_arg"/><emphasis role="bold">-pass arg</emphasis>, <emphasis role="bold">-passout arg</emphasis></term>
          <listitem>
            <para>
	      the PKCS#12 file (i.e. output file) password source. For more
	      information about the format of <emphasis role="bold">arg</emphasis> see the <emphasis role="bold">PASS
	      PHRASE ARGUMENTS</emphasis> section in openssl(1).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-passin_password"/><emphasis role="bold">-passin password</emphasis></term>
          <listitem>
            <para>
	      pass phrase source to decrypt any input private keys with.
	      For more information about the format of <emphasis role="bold">arg</emphasis> see the <emphasis role="bold">PASS
	      PHRASE ARGUMENTS</emphasis> section in openssl(1).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-chain"/><emphasis role="bold">-chain</emphasis></term>
          <listitem>
            <para>
	      if this option is present then an attempt is made to include
	      the entire certificate chain of the user certificate. The
	      standard CA store is used for this search. If the search
	      fails it is considered a fatal error.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-descert"/><emphasis role="bold">-descert</emphasis></term>
          <listitem>
            <para>
	      encrypt the certificate using triple DES, this may render the
	      PKCS#12 file unreadable by some "export grade" software. By
	      default the private key is encrypted using triple DES and the
	      certificate using 40 bit RC2.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-keypbe_alg_-certpbe_alg"/><emphasis role="bold">-keypbe alg</emphasis>, <emphasis role="bold">-certpbe alg</emphasis></term>
          <listitem>
            <para>
	      these options allow the algorithm used to encrypt the private
	      key and certificates to be selected. Any PKCS#5 v1.5 or
	      PKCS#12 PBE algorithm name can be used (see <emphasis role="bold">NOTES</emphasis> section for more information).
	      If a a cipher name (as output by the <emphasis role="bold">list-cipher-algorithms</emphasis> command is
	      specified then it is used with PKCS#5 v2.0. For
	      interoperability reasons it is advisable to only use PKCS#12
	      algorithms.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-keyex-keysig"/><emphasis role="bold">-keyex|-keysig</emphasis></term>
          <listitem>
            <para>
	      specifies that the private key is to be used for key exchange
	      or just signing. This option is only interpreted by MSIE and
	      similar MS software. Normally "export grade" software will
	      only allow 512 bit RSA keys to be used for encryption
	      purposes but arbitrary length keys for signing. The <emphasis role="bold">-keysig</emphasis> option marks the key for
	      signing only. Signing only keys can be used for S/MIME
	      signing, authenticode (ActiveX control signing)  and SSL
	      client authentication, however due to a bug only MSIE 5.0 and
	      later support the use of signing only keys for SSL client
	      authentication.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-macalg_digest"/><emphasis role="bold">-macalg digest</emphasis></term>
          <listitem>
            <para>
	      specify the MAC digest algorithm. If not included them SHA1
	      will be used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-nomaciter_-noiter"/><emphasis role="bold">-nomaciter</emphasis>, <emphasis role="bold">-noiter</emphasis></term>
          <listitem>
            <para>
	      these options affect the iteration counts on the MAC and key
	      algorithms. Unless you wish to produce files compatible with
	      MSIE 4.0 you should leave these options alone.
            </para>
            <para>
	      To discourage attacks by using large dictionaries of common
	      passwords the algorithm that derives keys from passwords can
	      have an iteration count applied to it: this causes a certain
	      part of the algorithm to be repeated and slows it down. The
	      MAC is used to check the file integrity but since it will
	      normally have the same password as the keys and certificates
	      it could also be attacked. By default both MAC and encryption
	      iteration counts are set to 2048, using these options the MAC
	      and encryption iteration counts can be set to 1, since this
	      reduces the file security you should not use these options
	      unless you really have to. Most software supports both MAC
	      and key iteration counts. MSIE 4.0 doesn't support MAC
	      iteration counts so it needs the <emphasis role="bold">-nomaciter</emphasis> option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-maciter"/><emphasis role="bold">-maciter</emphasis></term>
          <listitem>
            <para>
	      This option is included for compatibility with previous
	      versions, it used to be needed to use MAC iterations counts
	      but they are now used by default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-nomac"/><emphasis role="bold">-nomac</emphasis></term>
          <listitem>
            <para>
	      don't attempt to provide the MAC integrity.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-rand_files"/><emphasis role="bold">-rand file(s)</emphasis></term>
          <listitem>
            <para>
	      a file or files containing random data used to seed the
	      random number generator, or an EGD socket (see RAND_egd(3)).
	      Multiple files can be specified separated by a OS-dependent
	      character. The separator is <emphasis role="bold">;</emphasis> for MS-Windows, <emphasis role="bold">,</emphasis> for OpenVMS, and <emphasis role="bold">:</emphasis> for all others.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-CAfile_file"/><emphasis role="bold">-CAfile file</emphasis></term>
          <listitem>
            <para>
	      CA storage as a file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-CApath_dir"/><emphasis role="bold">-CApath dir</emphasis></term>
          <listitem>
            <para>
	      CA storage as a directory. This directory must be a standard
	      certificate directory: that is a hash of each subject name
	      (using <emphasis role="bold">x509 -hash</emphasis>) should be
	      linked to each certificate.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.apps.pkcs12.pod:-CSP_name"/><emphasis role="bold">-CSP name</emphasis></term>
          <listitem>
            <para>
	      write <emphasis role="bold">name</emphasis> as a Microsoft
	      CSP name.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs12.pod:NOTES"><title>NOTES</title>
    <para>
      Although there are a large number of options most of them are very
      rarely used. For PKCS#12 file parsing only <emphasis role="bold">-in</emphasis> and <emphasis role="bold">-out</emphasis>
      need to be used for PKCS#12 file creation <emphasis role="bold">-export</emphasis> and <emphasis role="bold">-name</emphasis> are also used.
    </para>
    <para>
      If none of the <emphasis role="bold">-clcerts</emphasis>, <emphasis role="bold">-cacerts</emphasis> or <emphasis role="bold">-nocerts</emphasis> options are present then all
      certificates will be output in the order they appear in the input
      PKCS#12 files. There is no guarantee that the first certificate
      present is the one corresponding to the private key. Certain software
      which requires a private key and certificate and assumes the first
      certificate in the file is the one corresponding to the private key:
      this may not always be the case. Using the <emphasis role="bold">-clcerts</emphasis> option will solve this problem by
      only outputting the certificate corresponding to the private key. If
      the CA certificates are required then they can be output to a
      separate file using the <emphasis role="bold">-nokeys
      -cacerts</emphasis> options to just output CA certificates.
    </para>
    <para>
      The <emphasis role="bold">-keypbe</emphasis> and <emphasis role="bold">-certpbe</emphasis> algorithms allow the precise
      encryption algorithms for private keys and certificates to be
      specified. Normally the defaults are fine but occasionally software
      can't handle triple DES encrypted private keys, then the option
      <emphasis role="bold">-keypbe PBE-SHA1-RC2-40</emphasis> can be used
      to reduce the private key encryption to 40 bit RC2. A complete
      description of all algorithms is contained in the <emphasis role="bold">pkcs8</emphasis> manual page.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs12.pod:EXAMPLES"><title>EXAMPLES</title>
    <para>
      Parse a PKCS#12 file and output it to a file:
    </para>
    <screen>openssl pkcs12 -in file.p12 -out file.pem</screen>
    <para>
      Output only client certificates to a file:
    </para>
    <screen>openssl pkcs12 -in file.p12 -clcerts -out file.pem</screen>
    <para>
      Don't encrypt the private key:
    </para>
    <screen>openssl pkcs12 -in file.p12 -out file.pem -nodes</screen>
    <para>
      Print some info about a PKCS#12 file:
    </para>
    <screen>openssl pkcs12 -in file.p12 -info -noout</screen>
    <para>
      Create a PKCS#12 file:
    </para>
    <screen>openssl pkcs12 -export -in file.pem -out file.p12 -name "My Certificate"</screen>
    <para>
      Include some extra certificates:
    </para>
    <screen>openssl pkcs12 -export -in file.pem -out file.p12 -name "My Certificate" \
 -certfile othercerts.pem</screen>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs12.pod:BUGS"><title>BUGS</title>
    <para>
      Some would argue that the PKCS#12 standard is one big bug :-)
    </para>
    <para>
      Versions of OpenSSL before 0.9.6a had a bug in the PKCS#12 key
      generation routines. Under rare circumstances this could produce a
      PKCS#12 file encrypted with an invalid key. As a result some PKCS#12
      files which triggered this bug from other implementations (MSIE or
      Netscape) could not be decrypted by OpenSSL and similarly OpenSSL
      could produce PKCS#12 files which could not be decrypted by other
      implementations. The chances of producing such a file are relatively
      small: less than 1 in 256.
    </para>
    <para>
      A side effect of fixing this bug is that any old invalidly encrypted
      PKCS#12 files cannot no longer be parsed by the fixed version. Under
      such circumstances the <emphasis role="bold">pkcs12</emphasis>
      utility will report that the MAC is OK but fail with a decryption
      error when extracting private keys.
    </para>
    <para>
      This problem can be resolved by extracting the private keys and
      certificates from the PKCS#12 file using an older version of OpenSSL
      and recreating the PKCS#12 file from the keys and certificates using
      a newer version of OpenSSL. For example:
    </para>
    <screen>old-openssl -in bad.p12 -out keycerts.pem
openssl -in keycerts.pem -export -name "My PKCS#12 file" -out fixed.p12</screen>
  </refsection>
  <refsection xml:id="sources.openssl.doc.apps.pkcs12.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      pkcs8(1)
    </para>
  </refsection>
</refentry>