<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="sd-id128">

        <info>
                
                <productname>systemd</productname>

                <authorgroup>
                        <author><personname><firstname>Lennart</firstname><surname>Poettering</surname></personname><contrib>Developer</contrib><email>lennart@poettering.net</email></author>
                </authorgroup>
        </info>

        <refmeta>
                <refentrytitle>sd-id128</refentrytitle>
                <manvolnum>3</manvolnum>
        </refmeta>

        <refnamediv>
                <refname>sd-id128</refname>
                <refname>sd_id128_t</refname>
                <refname>SD_ID128_MAKE</refname>
                <refname>SD_ID128_CONST_STR</refname>
                <refname>SD_ID128_FORMAT_STR</refname>
                <refname>SD_ID128_FORMAT_VAL</refname>
                <refname>sd_id128_equal</refname>
                <refpurpose>APIs for processing 128-bit IDs</refpurpose>
        </refnamediv>

        <refsynopsisdiv>
                <funcsynopsis>
                        <funcsynopsisinfo>#include &lt;systemd/sd-id128.h&gt;</funcsynopsisinfo>
                </funcsynopsis>

                <cmdsynopsis sepchar=" ">
                        <command>pkg-config --cflags --libs libsystemd</command>
                </cmdsynopsis>

        </refsynopsisdiv>

        <refsect1>
                <title>Description</title>

                <para><filename>sd-id128.h</filename> provides APIs to
                process and generate 128-bit ID values. The 128-bit ID
                values processed and generated by these APIs are a
                generalization of OSF UUIDs as defined by <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://tools.ietf.org/html/rfc4122">RFC
                4122</link> but use a simpler string
                format. These functions impose no structure on the
                used IDs, much unlike OSF UUIDs or Microsoft GUIDs,
                but are fully compatible with those types of IDs.
                </para>

                <para>See
                <citerefentry><refentrytitle>sd_id128_to_string</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
                <citerefentry><refentrytitle>sd_id128_randomize</refentrytitle><manvolnum>3</manvolnum></citerefentry> and
                <citerefentry><refentrytitle>sd_id128_get_machine</refentrytitle><manvolnum>3</manvolnum></citerefentry>
                for more information about the implemented
                functions.</para>

                <para>A 128-bit ID is implemented as the following
                union type:</para>

                <programlisting>typedef union sd_id128 {
        uint8_t bytes[16];
        uint64_t qwords[2];
} sd_id128_t;</programlisting>

                <para>This union type allows accessing the 128-bit ID
                as 16 separate bytes or two 64-bit words. It is generally
                safer to access the ID components by their 8-bit array
                to avoid endianness issues. This union is intended to
                be passed call-by-value (as opposed to
                call-by-reference) and may be directly manipulated by
                clients.</para>

                <para>A couple of macros are defined to denote and
                decode 128-bit IDs:</para>

                <para><function>SD_ID128_MAKE()</function> may be used
                to denote a constant 128-bit ID in source code. A
                commonly used idiom is to assign a name to a 128-bit
                ID using this macro:</para>

                <programlisting>#define SD_MESSAGE_COREDUMP SD_ID128_MAKE(fc,2e,22,bc,6e,e6,47,b6,b9,07,29,ab,34,a2,50,b1)</programlisting>

                <para><function>SD_ID128_CONST_STR()</function> may be
                used to convert constant 128-bit IDs into constant
                strings for output. The following example code will
                output the string
                "fc2e22bc6ee647b6b90729ab34a250b1":</para>
                <programlisting>int main(int argc, char *argv[]) {
        puts(SD_ID128_CONST_STR(SD_MESSAGE_COREDUMP));
}</programlisting>

                <para><function>SD_ID128_FORMAT_STR</function> and
                <function>SD_ID128_FORMAT_VAL()</function> may be used
                to format a 128-bit ID in a
                <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>3</manvolnum></citerefentry>
                format string, as shown in the following
                example:</para>

                <programlisting>int main(int argc, char *argv[]) {
        sd_id128_t id;
        id = SD_ID128_MAKE(ee,89,be,71,bd,6e,43,d6,91,e6,c5,5d,eb,03,02,07);
        printf("The ID encoded in this C file is " SD_ID128_FORMAT_STR ".\n", SD_ID128_FORMAT_VAL(id));
        return 0;
}</programlisting>

                <para>Use <function>sd_id128_equal()</function> to compare two 128-bit IDs:</para>

                <programlisting>int main(int argc, char *argv[]) {
        sd_id128_t a, b, c;
        a = SD_ID128_MAKE(ee,89,be,71,bd,6e,43,d6,91,e6,c5,5d,eb,03,02,07);
        b = SD_ID128_MAKE(f2,28,88,9c,5f,09,44,15,9d,d7,04,77,58,cb,e7,3e);
        c = a;
        assert(sd_id128_equal(a, c));
        assert(!sd_id128_equal(a, b));
        return 0;
}</programlisting>

                <para>Note that new, randomized IDs may be generated
                with
                <citerefentry><refentrytitle>journalctl</refentrytitle><manvolnum>1</manvolnum></citerefentry>'s
                <option>--new-id</option> option.</para>
        </refsect1>

        <refsect1>
  <title>Notes</title>

  <para xml:id="pkgconfig-text">These APIs are implemented as a shared
  library, which can be compiled and linked to with the
  <constant>libsystemd</constant>Â <citerefentry><refentrytitle>pkg-config</refentrytitle><manvolnum>1</manvolnum></citerefentry>
  file.</para>
</refsect1>

        <refsect1>
                <title>See Also</title>
                <para>
                        <citerefentry><refentrytitle>systemd</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>sd_id128_to_string</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>sd_id128_randomize</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>sd_id128_get_machine</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>journalctl</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>sd-journal</refentrytitle><manvolnum>7</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>pkg-config</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
                        <citerefentry><refentrytitle>machine-id</refentrytitle><manvolnum>5</manvolnum></citerefentry>
                </para>
        </refsect1>

</refentry>