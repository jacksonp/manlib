<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EVP_PKEY_sign.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EVP_PKEY_sign_init, EVP_PKEY_sign</refname>
<refpurpose>sign using a public key algorithm</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis>int EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx);
int EVP_PKEY_sign(EVP_PKEY_CTX *ctx,
                       unsigned char *sig, size_t *siglen,
                       const unsigned char *tbs, size_t tbslen);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-8fa3d017eb7ef395ea96836224630eb8"><title>DESCRIPTION</title>
    <para>
      The EVP_PKEY_sign_init() function initializes a public key algorithm
      context using key <emphasis role="bold">pkey</emphasis> for a signing
      operation.
    </para>
    <para>
      The EVP_PKEY_sign() function performs a public key signing operation
      using <emphasis role="bold">ctx</emphasis>. The data to be signed is
      specified using the <emphasis role="bold">tbs</emphasis> and
      <emphasis role="bold">tbslen</emphasis> parameters. If <emphasis role="bold">sig</emphasis> is <emphasis role="bold">NULL</emphasis>
      then the maximum size of the output buffer is written to the
      <emphasis role="bold">siglen</emphasis> parameter. If <emphasis role="bold">sig</emphasis> is not <emphasis role="bold">NULL</emphasis> then before the call the <emphasis role="bold">siglen</emphasis> parameter should contain the length of
      the <emphasis role="bold">sig</emphasis> buffer, if the call is
      successful the signature is written to <emphasis role="bold">sig</emphasis> and the amount of data written to
      <emphasis role="bold">siglen</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-090035ca97a8a2ad208582ed7db737d4"><title>NOTES</title>
    <para>
      EVP_PKEY_sign() does not hash the data to be signed, and therefore is
      normally used to sign digests. For signing arbitrary messages, see
      the <citerefentry> <refentrytitle>EVP_DigestSignInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> and <citerefentry>
      <refentrytitle>EVP_SignInit</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> signing interfaces instead.
    </para>
    <para>
      After the call to EVP_PKEY_sign_init() algorithm specific control
      operations can be performed to set any appropriate parameters for the
      operation (see <citerefentry>
      <refentrytitle>EVP_PKEY_CTX_ctrl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>).
    </para>
    <para>
      The function EVP_PKEY_sign() can be called more than once on the same
      context if several operations are performed using the same
      parameters.
    </para>
  </refsection>
  <refsection xml:id="ID-86f970ce7f5bb7118f5dacbdf46ec7bd"><title>RETURN VALUES</title>
    <para>
      EVP_PKEY_sign_init() and EVP_PKEY_sign() return 1 for success and 0
      or a negative value for failure. In particular a return value of -2
      indicates the operation is not supported by the public key algorithm.
    </para>
  </refsection>
  <refsection xml:id="ID-81214e1fda2fd06249066420bd9e7e8c"><title>EXAMPLE</title>
    <para>
      Sign data using RSA with PKCS#1 padding and SHA256 digest:
    </para>
    <screen>#include &amp;lt;openssl/evp.h&amp;gt;
#include &amp;lt;openssl/rsa.h&amp;gt;

EVP_PKEY_CTX *ctx;
/* md is a SHA-256 digest in this example. */
unsigned char *md, *sig;
size_t mdlen = 32, siglen;
EVP_PKEY *signing_key;

/*
 * NB: assumes signing_key and md are set up before the next
 * step. signing_key must be an RSA private key and md must
 * point to the SHA-256 digest to be signed.
 */
ctx = EVP_PKEY_CTX_new(signing_key, NULL /* no engine */);
if (!ctx)
       /* Error occurred */
if (EVP_PKEY_sign_init(ctx) &lt;= 0)
       /* Error */
if (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_PADDING) &lt;= 0)
       /* Error */
if (EVP_PKEY_CTX_set_signature_md(ctx, EVP_sha256()) &lt;= 0)
       /* Error */

/* Determine buffer length */
if (EVP_PKEY_sign(ctx, NULL, &amp;siglen, md, mdlen) &lt;= 0)
       /* Error */

sig = OPENSSL_malloc(siglen);

if (!sig)
       /* malloc failure */

if (EVP_PKEY_sign(ctx, sig, &amp;siglen, md, mdlen) &lt;= 0)
       /* Error */

/* Signature is siglen bytes written to buffer sig */

</screen>
  </refsection>
  <refsection xml:id="ID-969ec7037fe05409edb67f0a89c9c706"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>EVP_PKEY_CTX_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_CTX_ctrl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_encrypt</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_decrypt</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_verify</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_verify_recover</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_derive</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-96aafe74aa0dc26d6ff84da319d1208d"><title>HISTORY</title>
    <para>
      These functions were first added to OpenSSL 1.0.0.
    </para>
  </refsection>
  <refsection xml:id="ID-60fdaeaf46f5aa7e3f8ce126d1662267"><title>COPYRIGHT</title>
    <para>
      Copyright 2006-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>