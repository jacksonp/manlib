<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>bn_internal.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>bn_mul_words, bn_mul_add_words, bn_sqr_words, bn_div_words,
bn_add_words, bn_sub_words, bn_mul_comba4, bn_mul_comba8,
bn_sqr_comba4, bn_sqr_comba8, bn_cmp_words, bn_mul_normal,
bn_mul_low_normal, bn_mul_recursive, bn_mul_part_recursive,
bn_mul_low_recursive, bn_mul_high, bn_sqr_normal, bn_sqr_recursive,
bn_expand, bn_wexpand, bn_expand2, bn_fix_top, bn_check_top,
bn_print, bn_dump, bn_set_max, bn_set_high, bn_set_low</refname>
<refpurpose>BIGNUM
library internal functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis format="linespecific">BN_ULONG bn_mul_words(BN_ULONG *rp, BN_ULONG *ap, int num, BN_ULONG w);
BN_ULONG bn_mul_add_words(BN_ULONG *rp, BN_ULONG *ap, int num,
  BN_ULONG w);
void     bn_sqr_words(BN_ULONG *rp, BN_ULONG *ap, int num);
BN_ULONG bn_div_words(BN_ULONG h, BN_ULONG l, BN_ULONG d);
BN_ULONG bn_add_words(BN_ULONG *rp, BN_ULONG *ap, BN_ULONG *bp,
  int num);
BN_ULONG bn_sub_words(BN_ULONG *rp, BN_ULONG *ap, BN_ULONG *bp,
  int num);</synopsis>
<synopsis format="linespecific">void bn_mul_comba4(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b);
void bn_mul_comba8(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b);
void bn_sqr_comba4(BN_ULONG *r, BN_ULONG *a);
void bn_sqr_comba8(BN_ULONG *r, BN_ULONG *a);</synopsis>
<synopsis format="linespecific">int bn_cmp_words(BN_ULONG *a, BN_ULONG *b, int n);</synopsis>
<synopsis format="linespecific">void bn_mul_normal(BN_ULONG *r, BN_ULONG *a, int na, BN_ULONG *b,
  int nb);
void bn_mul_low_normal(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b, int n);
void bn_mul_recursive(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b, int n2,
  int dna,int dnb,BN_ULONG *tmp);
void bn_mul_part_recursive(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b,
  int n, int tna,int tnb, BN_ULONG *tmp);
void bn_mul_low_recursive(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b,
  int n2, BN_ULONG *tmp);
void bn_mul_high(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b, BN_ULONG *l,
  int n2, BN_ULONG *tmp);</synopsis>
<synopsis format="linespecific">void bn_sqr_normal(BN_ULONG *r, BN_ULONG *a, int n, BN_ULONG *tmp);
void bn_sqr_recursive(BN_ULONG *r, BN_ULONG *a, int n2, BN_ULONG *tmp);</synopsis>
<synopsis format="linespecific">void mul(BN_ULONG r, BN_ULONG a, BN_ULONG w, BN_ULONG c);
void mul_add(BN_ULONG r, BN_ULONG a, BN_ULONG w, BN_ULONG c);
void sqr(BN_ULONG r0, BN_ULONG r1, BN_ULONG a);</synopsis>
<synopsis format="linespecific">BIGNUM *bn_expand(BIGNUM *a, int bits);
BIGNUM *bn_wexpand(BIGNUM *a, int n);
BIGNUM *bn_expand2(BIGNUM *a, int n);
void bn_fix_top(BIGNUM *a);</synopsis>
<synopsis format="linespecific">void bn_check_top(BIGNUM *a);
void bn_print(BIGNUM *a);
void bn_dump(BN_ULONG *d, int n);
void bn_set_max(BIGNUM *a);
void bn_set_high(BIGNUM *r, BIGNUM *a, int n);
void bn_set_low(BIGNUM *r, BIGNUM *a, int n);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.bn_internal.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      This page documents the internal functions used by the OpenSSL
      <emphasis role="bold">BIGNUM</emphasis> implementation. They are
      described here to facilitate debugging and extending the library.
      They are <emphasis role="italic">not</emphasis> to be used by
      applications.
    </para>
    <refsection xml:id="sources.openssl.doc.crypto.bn_internal.pod:The_BIGNUM_structure"><title>The BIGNUM structure</title>
      <screen>typedef struct bignum_st BIGNUM;

struct bignum_st
       {
       BN_ULONG *d;    /* Pointer to an array of 'BN_BITS2' bit chunks. */
       int top;        /* Index of last used d +1. */
       /* The next are internal book keeping for bn_expand. */
       int dmax;       /* Size of the d array. */
       int neg;        /* one if the number is negative */
       int flags;
       };

</screen>
      <para>
	The integer value is stored in <emphasis role="bold">d</emphasis>,
	a malloc()ed array of words (<emphasis role="bold">BN_ULONG</emphasis>), least significant word first. A
	<emphasis role="bold">BN_ULONG</emphasis> can be either 16, 32 or
	64 bits in size, depending on the 'number of bits' (<emphasis role="bold">BITS2</emphasis>) specified in <literal role="code">openssl/bn.h</literal>.
      </para>
      <para>
	<emphasis role="bold">dmax</emphasis> is the size of the <emphasis role="bold">d</emphasis> array that has been allocated.  <emphasis role="bold">top</emphasis> is the number of words being used, so
	for a value of 4, bn.d[0]=4 and bn.top=1.  <emphasis role="bold">neg</emphasis> is 1 if the number is negative.  When a
	<emphasis role="bold">BIGNUM</emphasis> is <emphasis role="bold">0</emphasis>, the <emphasis role="bold">d</emphasis>
	field can be <emphasis role="bold">NULL</emphasis> and <emphasis role="bold">top</emphasis> == <emphasis role="bold">0</emphasis>.
      </para>
      <para>
	<emphasis role="bold">flags</emphasis> is a bit field of flags
	which are defined in <literal role="code">openssl/bn.h</literal>. The flags begin
	with <emphasis role="bold">BN_FLG_</emphasis>. The macros
	BN_set_flags(b,n) and BN_get_flags(b,n) exist to enable or fetch
	flag(s) <emphasis role="bold">n</emphasis> from <emphasis role="bold">BIGNUM</emphasis> structure <emphasis role="bold">b</emphasis>. 
      </para>
      <para>
	Various routines in this library require the use of temporary
	<emphasis role="bold">BIGNUM</emphasis> variables during their
	execution.  Since dynamic memory allocation to create <emphasis role="bold">BIGNUM</emphasis>s is rather expensive when used in
	conjunction with repeated subroutine calls, the <emphasis role="bold">BN_CTX</emphasis> structure is used.  This structure
	contains <emphasis role="bold">BN_CTX_NUM</emphasis> <emphasis role="bold">BIGNUM</emphasis>s, see <citerefentry>
	<refentrytitle>BN_CTX_start</refentrytitle>
	<manvolnum>3</manvolnum> </citerefentry>.
      </para>
    </refsection>
    <refsection xml:id="sources.openssl.doc.crypto.bn_internal.pod:Low-level_arithmetic_operations"><title>Low-level arithmetic operations</title>
      <para>
	These functions are implemented in C and for several platforms in
	assembly language:
      </para>
      <para>
	bn_mul_words(<emphasis role="bold">rp</emphasis>, <emphasis role="bold">ap</emphasis>, <emphasis role="bold">num</emphasis>,
	<emphasis role="bold">w</emphasis>) operates on the <emphasis role="bold">num</emphasis> word arrays <emphasis role="bold">rp</emphasis> and <emphasis role="bold">ap</emphasis>. 
	It computes <emphasis role="bold">ap</emphasis> * <emphasis role="bold">w</emphasis>, places the result in <emphasis role="bold">rp</emphasis>, and returns the high word (carry).
      </para>
      <para>
	bn_mul_add_words(<emphasis role="bold">rp</emphasis>, <emphasis role="bold">ap</emphasis>, <emphasis role="bold">num</emphasis>,
	<emphasis role="bold">w</emphasis>) operates on the <emphasis role="bold">num</emphasis> word arrays <emphasis role="bold">rp</emphasis> and <emphasis role="bold">ap</emphasis>. 
	It computes <emphasis role="bold">ap</emphasis> * <emphasis role="bold">w</emphasis> + <emphasis role="bold">rp</emphasis>,
	places the result in <emphasis role="bold">rp</emphasis>, and
	returns the high word (carry).
      </para>
      <para>
	bn_sqr_words(<emphasis role="bold">rp</emphasis>, <emphasis role="bold">ap</emphasis>, <emphasis role="bold">n</emphasis>)
	operates on the <emphasis role="bold">num</emphasis> word array
	<emphasis role="bold">ap</emphasis> and the 2*<emphasis role="bold">num</emphasis> word array <emphasis role="bold">ap</emphasis>.  It computes <emphasis role="bold">ap</emphasis> * <emphasis role="bold">ap</emphasis>
	word-wise, and places the low and high bytes of the result in
	<emphasis role="bold">rp</emphasis>.
      </para>
      <para>
	bn_div_words(<emphasis role="bold">h</emphasis>, <emphasis role="bold">l</emphasis>, <emphasis role="bold">d</emphasis>)
	divides the two word number (<emphasis role="bold">h</emphasis>,<emphasis role="bold">l</emphasis>) by
	<emphasis role="bold">d</emphasis> and returns the result.
      </para>
      <para>
	bn_add_words(<emphasis role="bold">rp</emphasis>, <emphasis role="bold">ap</emphasis>, <emphasis role="bold">bp</emphasis>,
	<emphasis role="bold">num</emphasis>) operates on the <emphasis role="bold">num</emphasis> word arrays <emphasis role="bold">ap</emphasis>, <emphasis role="bold">bp</emphasis> and
	<emphasis role="bold">rp</emphasis>.  It computes <emphasis role="bold">ap</emphasis> + <emphasis role="bold">bp</emphasis>,
	places the result in <emphasis role="bold">rp</emphasis>, and
	returns the high word (carry).
      </para>
      <para>
	bn_sub_words(<emphasis role="bold">rp</emphasis>, <emphasis role="bold">ap</emphasis>, <emphasis role="bold">bp</emphasis>,
	<emphasis role="bold">num</emphasis>) operates on the <emphasis role="bold">num</emphasis> word arrays <emphasis role="bold">ap</emphasis>, <emphasis role="bold">bp</emphasis> and
	<emphasis role="bold">rp</emphasis>.  It computes <emphasis role="bold">ap</emphasis> - <emphasis role="bold">bp</emphasis>,
	places the result in <emphasis role="bold">rp</emphasis>, and
	returns the carry (1 if <emphasis role="bold">bp</emphasis> &gt;
	<emphasis role="bold">ap</emphasis>, 0 otherwise).
      </para>
      <para>
	bn_mul_comba4(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis>)
	operates on the 4 word arrays <emphasis role="bold">a</emphasis>
	and <emphasis role="bold">b</emphasis> and the 8 word array
	<emphasis role="bold">r</emphasis>.  It computes <emphasis role="bold">a</emphasis>*<emphasis role="bold">b</emphasis> and
	places the result in <emphasis role="bold">r</emphasis>.
      </para>
      <para>
	bn_mul_comba8(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis>)
	operates on the 8 word arrays <emphasis role="bold">a</emphasis>
	and <emphasis role="bold">b</emphasis> and the 16 word array
	<emphasis role="bold">r</emphasis>.  It computes <emphasis role="bold">a</emphasis>*<emphasis role="bold">b</emphasis> and
	places the result in <emphasis role="bold">r</emphasis>.
      </para>
      <para>
	bn_sqr_comba4(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis>)
	operates on the 4 word arrays <emphasis role="bold">a</emphasis>
	and <emphasis role="bold">b</emphasis> and the 8 word array
	<emphasis role="bold">r</emphasis>.
      </para>
      <para>
	bn_sqr_comba8(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis>)
	operates on the 8 word arrays <emphasis role="bold">a</emphasis>
	and <emphasis role="bold">b</emphasis> and the 16 word array
	<emphasis role="bold">r</emphasis>.
      </para>
      <para>
	The following functions are implemented in C:
      </para>
      <para>
	bn_cmp_words(<emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis>, <emphasis role="bold">n</emphasis>)
	operates on the <emphasis role="bold">n</emphasis> word arrays
	<emphasis role="bold">a</emphasis> and <emphasis role="bold">b</emphasis>.  It returns 1, 0 and -1 if <emphasis role="bold">a</emphasis> is greater than, equal and less than
	<emphasis role="bold">b</emphasis>.
      </para>
      <para>
	bn_mul_normal(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">na</emphasis>,
	<emphasis role="bold">b</emphasis>, <emphasis role="bold">nb</emphasis>) operates on the <emphasis role="bold">na</emphasis> word array <emphasis role="bold">a</emphasis>, the <emphasis role="bold">nb</emphasis>
	word array <emphasis role="bold">b</emphasis> and the <emphasis role="bold">na</emphasis>+<emphasis role="bold">nb</emphasis> word
	array <emphasis role="bold">r</emphasis>.  It computes <emphasis role="bold">a</emphasis>*<emphasis role="bold">b</emphasis> and
	places the result in <emphasis role="bold">r</emphasis>.
      </para>
      <para>
	bn_mul_low_normal(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis>,
	<emphasis role="bold">n</emphasis>) operates on the <emphasis role="bold">n</emphasis> word arrays <emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis> and
	<emphasis role="bold">b</emphasis>.  It computes the <emphasis role="bold">n</emphasis> low words of <emphasis role="bold">a</emphasis>*<emphasis role="bold">b</emphasis> and
	places the result in <emphasis role="bold">r</emphasis>.
      </para>
      <para>
	bn_mul_recursive(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis>,
	<emphasis role="bold">n2</emphasis>, <emphasis role="bold">dna</emphasis>, <emphasis role="bold">dnb</emphasis>,
	<emphasis role="bold">t</emphasis>) operates on the word arrays
	<emphasis role="bold">a</emphasis> and <emphasis role="bold">b</emphasis> of length <emphasis role="bold">n2</emphasis>+<emphasis role="bold">dna</emphasis> and
	<emphasis role="bold">n2</emphasis>+<emphasis role="bold">dnb</emphasis> (<emphasis role="bold">dna</emphasis>
	and <emphasis role="bold">dnb</emphasis> are currently allowed to
	be 0 or negative) and the 2*<emphasis role="bold">n2</emphasis>
	word arrays <emphasis role="bold">r</emphasis> and <emphasis role="bold">t</emphasis>.  <emphasis role="bold">n2</emphasis> must
	be a power of 2.  It computes <emphasis role="bold">a</emphasis>*<emphasis role="bold">b</emphasis> and
	places the result in <emphasis role="bold">r</emphasis>.
      </para>
      <para>
	bn_mul_part_recursive(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis>,
	<emphasis role="bold">n</emphasis>, <emphasis role="bold">tna</emphasis>, <emphasis role="bold">tnb</emphasis>,
	<emphasis role="bold">tmp</emphasis>) operates on the word arrays
	<emphasis role="bold">a</emphasis> and <emphasis role="bold">b</emphasis> of length <emphasis role="bold">n</emphasis>+<emphasis role="bold">tna</emphasis> and
	<emphasis role="bold">n</emphasis>+<emphasis role="bold">tnb</emphasis> and the 4*<emphasis role="bold">n</emphasis> word arrays <emphasis role="bold">r</emphasis> and <emphasis role="bold">tmp</emphasis>.
      </para>
      <para>
	bn_mul_low_recursive(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis>,
	<emphasis role="bold">n2</emphasis>, <emphasis role="bold">tmp</emphasis>) operates on the <emphasis role="bold">n2</emphasis> word arrays <emphasis role="bold">r</emphasis> and <emphasis role="bold">tmp</emphasis>
	and the <emphasis role="bold">n2</emphasis>/2 word arrays <emphasis role="bold">a</emphasis> and <emphasis role="bold">b</emphasis>.
      </para>
      <para>
	bn_mul_high(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis>,
	<emphasis role="bold">l</emphasis>, <emphasis role="bold">n2</emphasis>, <emphasis role="bold">tmp</emphasis>)
	operates on the <emphasis role="bold">n2</emphasis> word arrays
	<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">b</emphasis> and
	<emphasis role="bold">l</emphasis> (?) and the 3*<emphasis role="bold">n2</emphasis> word array <emphasis role="bold">tmp</emphasis>.
      </para>
      <para>
	BN_mul() calls bn_mul_normal(), or an optimized implementation if
	the factors have the same size: bn_mul_comba8() is used if they are
	8 words long, bn_mul_recursive() if they are larger than <emphasis role="bold">BN_MULL_SIZE_NORMAL</emphasis> and the size is an exact
	multiple of the word size, and bn_mul_part_recursive() for others
	that are larger than <emphasis role="bold">BN_MULL_SIZE_NORMAL</emphasis>.
      </para>
      <para>
	bn_sqr_normal(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">n</emphasis>,
	<emphasis role="bold">tmp</emphasis>) operates on the <emphasis role="bold">n</emphasis> word array <emphasis role="bold">a</emphasis> and the 2*<emphasis role="bold">n</emphasis> word arrays <emphasis role="bold">tmp</emphasis> and <emphasis role="bold">r</emphasis>.
      </para>
      <para>
	The implementations use the following macros which, depending on
	the architecture, may use "long long" C operations or inline
	assembler. They are defined in <literal role="code">bn_lcl.h</literal>.
      </para>
      <para>
	mul(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">w</emphasis>,
	<emphasis role="bold">c</emphasis>) computes <emphasis role="bold">w</emphasis>*<emphasis role="bold">a</emphasis>+<emphasis role="bold">c</emphasis> and
	places the low word of the result in <emphasis role="bold">r</emphasis> and the high word in <emphasis role="bold">c</emphasis>.
      </para>
      <para>
	mul_add(<emphasis role="bold">r</emphasis>, <emphasis role="bold">a</emphasis>, <emphasis role="bold">w</emphasis>,
	<emphasis role="bold">c</emphasis>) computes <emphasis role="bold">w</emphasis>*<emphasis role="bold">a</emphasis>+<emphasis role="bold">r</emphasis>+<emphasis role="bold">c</emphasis> and
	places the low word of the result in <emphasis role="bold">r</emphasis> and the high word in <emphasis role="bold">c</emphasis>.
      </para>
      <para>
	sqr(<emphasis role="bold">r0</emphasis>, <emphasis role="bold">r1</emphasis>, <emphasis role="bold">a</emphasis>)
	computes <emphasis role="bold">a</emphasis>*<emphasis role="bold">a</emphasis> and places the low word of the result in
	<emphasis role="bold">r0</emphasis> and the high word in <emphasis role="bold">r1</emphasis>.
      </para>
    </refsection>
    <refsection xml:id="sources.openssl.doc.crypto.bn_internal.pod:Size_changes"><title>Size changes</title>
      <para>
	bn_expand() ensures that <emphasis role="bold">b</emphasis> has
	enough space for a <emphasis role="bold">bits</emphasis> bit
	number.  bn_wexpand() ensures that <emphasis role="bold">b</emphasis> has enough space for an <emphasis role="bold">n</emphasis> word number.  If the number has to be
	expanded, both macros call bn_expand2(), which allocates a new
	<emphasis role="bold">d</emphasis> array and copies the data.  They
	return <emphasis role="bold">NULL</emphasis> on error, <emphasis role="bold">b</emphasis> otherwise.
      </para>
      <para>
	The bn_fix_top() macro reduces <emphasis role="bold">a-&gt;top</emphasis> to point to the most significant
	non-zero word plus one when <emphasis role="bold">a</emphasis> has
	shrunk.
      </para>
    </refsection>
    <refsection xml:id="sources.openssl.doc.crypto.bn_internal.pod:Debugging"><title>Debugging</title>
      <para>
	bn_check_top() verifies that <literal role="code">((a)-&amp;gt;top &amp;gt;= 0 &amp;amp;&amp;amp; (a)-&amp;gt;top
	&amp;lt;= (a)-&amp;gt;dmax)</literal>.  A violation will cause the
	program to abort.
      </para>
      <para>
	bn_print() prints <emphasis role="bold">a</emphasis> to stderr.
	bn_dump() prints <emphasis role="bold">n</emphasis> words at
	<emphasis role="bold">d</emphasis> (in reverse order, i.e. most
	significant word first) to stderr.
      </para>
      <para>
	bn_set_max() makes <emphasis role="bold">a</emphasis> a static
	number with a <emphasis role="bold">dmax</emphasis> of its current
	size. This is used by bn_set_low() and bn_set_high() to make
	<emphasis role="bold">r</emphasis> a read-only <emphasis role="bold">BIGNUM</emphasis> that contains the <emphasis role="bold">n</emphasis> low or high words of <emphasis role="bold">a</emphasis>.
      </para>
      <para>
	If <emphasis role="bold">BN_DEBUG</emphasis> is not defined,
	bn_check_top(), bn_print(), bn_dump() and bn_set_max() are defined
	as empty macros.
      </para>
    </refsection>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.bn_internal.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>bn</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
</refentry>