<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>ASN1_TYPE_get.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>ASN1_TYPE_get, ASN1_TYPE_set, ASN1_TYPE_set1, ASN1_TYPE_cmp</refname>
<refpurpose>ASN1_TYPE utility
functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/asn1.h&gt;</synopsis>
<synopsis format="linespecific">int ASN1_TYPE_get(ASN1_TYPE *a);
void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);
int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.ASN1_TYPE_get.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      These functions allow an ASN1_TYPE structure to be manipulated. The
      ASN1_TYPE structure can contain any ASN.1 type or constructed type
      such as a SEQUENCE: it is effectively equivalent to the ASN.1 ANY
      type.
    </para>
    <para>
      ASN1_TYPE_get() returns the type of <emphasis role="bold">a</emphasis>.
    </para>
    <para>
      ASN1_TYPE_set() sets the value of <emphasis role="bold">a</emphasis>
      to <emphasis role="bold">type</emphasis> and <emphasis role="bold">value</emphasis>. This function uses the pointer
      <emphasis role="bold">value</emphasis> internally so it must
      <emphasis role="bold">not</emphasis> be freed up after the call.
    </para>
    <para>
      ASN1_TYPE_set1() sets the value of <emphasis role="bold">a</emphasis>
      to <emphasis role="bold">type</emphasis> a copy of <emphasis role="bold">value</emphasis>.
    </para>
    <para>
      ASN1_TYPE_cmp() compares ASN.1 types <emphasis role="bold">a</emphasis> and <emphasis role="bold">b</emphasis> and
      returns 0 if they are identical and non-zero otherwise.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.ASN1_TYPE_get.pod:NOTES"><title>NOTES</title>
    <para>
      The type and meaning of the <emphasis role="bold">value</emphasis>
      parameter for ASN1_TYPE_set() and ASN1_TYPE_set1() is determined by
      the <emphasis role="bold">type</emphasis> parameter. If <emphasis role="bold">type</emphasis> is V_ASN1_NULL <emphasis role="bold">value</emphasis> is ignored. If <emphasis role="bold">type</emphasis> is V_ASN1_BOOLEAN then the boolean is set
      to TRUE if <emphasis role="bold">value</emphasis> is not NULL. If
      <emphasis role="bold">type</emphasis> is V_ASN1_OBJECT then value is
      an ASN1_OBJECT structure. Otherwise <emphasis role="bold">type</emphasis> is and ASN1_STRING structure. If
      <emphasis role="bold">type</emphasis> corresponds to a primitive type
      (or a string type) then the contents of the ASN1_STRING contain the
      content octets of the type. If <emphasis role="bold">type</emphasis>
      corresponds to a constructed type or a tagged type (V_ASN1_SEQUENCE,
      V_ASN1_SET or V_ASN1_OTHER) then the ASN1_STRING contains the entire
      ASN.1 encoding verbatim (including tag and length octets).
    </para>
    <para>
      ASN1_TYPE_cmp() may not return zero if two types are equivalent but
      have different encodings. For example the single content octet of the
      boolean TRUE value under BER can have any non-zero encoding but
      ASN1_TYPE_cmp() will only return zero if the values are the same.
    </para>
    <para>
      If either or both of the parameters passed to ASN1_TYPE_cmp() is NULL
      the return value is non-zero. Technically if both parameters are NULL
      the two types could be absent OPTIONAL fields and so should match,
      however passing NULL values could also indicate a programming error
      (for example an unparseable type which returns NULL) for types which
      do <emphasis role="bold">not</emphasis> match. So applications should
      handle the case of two absent values separately.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.ASN1_TYPE_get.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      ASN1_TYPE_get() returns the type of the ASN1_TYPE argument.
    </para>
    <para>
      ASN1_TYPE_set() does not return a value.
    </para>
    <para>
      ASN1_TYPE_set1() returns 1 for sucess and 0 for failure.
    </para>
    <para>
      ASN1_TYPE_cmp() returns 0 if the types are identical and non-zero
      otherwise.
    </para>
  </refsection>
</refentry>