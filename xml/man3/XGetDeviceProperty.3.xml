<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
<info>
    
</info>
<refmeta>
<refentrytitle>xgetdeviceproperty</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class="source"> </refmiscinfo>
<refmiscinfo class="manual"> </refmiscinfo>
</refmeta>
<refnamediv>
    <refname>XGetDeviceProperty</refname>
    <refname>XChangeDeviceProperty</refname>
    <refname>XDeleteDeviceProperty</refname>
    <refpurpose>Get, change or delete a device's    property.</refpurpose>
</refnamediv>
<refsynopsisdiv xml:id="_synopsis">
<literallayout class="monospaced">#include &lt;X11/extensions/XInput.h&gt;</literallayout>
<literallayout class="monospaced">int XGetDeviceProperty( Display *display,
                        XDevice *device,
                        Atom property,
                        long offset,
                        long length,
                        Bool delete,
                        Atom req_type,
                        Atom *actual_type_return,
                        int *actual_format_return,
                        unsigned long *nitems_return,
                        unsigned long *bytes_after_return,
                        unsigned char **prop_return)</literallayout>
<literallayout class="monospaced">void XChangeDeviceProperty( Display *display,
                            XDevice *device,
                            Atom property,
                            Atom type,
                            int format,
                            int mode,
                            const char *data,
                            int nelements)</literallayout>
<literallayout class="monospaced">void XDeleteDeviceProperty( Display *display,
                            XDevice *device,
                            Atom property)</literallayout>
<literallayout class="monospaced">actual_type_return
       Returns an atom identifier that defines the actual type
       of the property.</literallayout>
<literallayout class="monospaced">actual_format_return
       Returns the actual format of the property.</literallayout>
<literallayout class="monospaced">bytes_after_return
       Returns the number of bytes remaining to be read in the
       property if a partial read was performed.</literallayout>
<literallayout class="monospaced">data
       Specifies the property data.</literallayout>
<literallayout class="monospaced">delete
       Specifies a Boolean value that determines whether the
       property is deleted.</literallayout>
<literallayout class="monospaced">display
       Specifies the connection to the X server.</literallayout>
<literallayout class="monospaced">device
       The device to grab.</literallayout>
<literallayout class="monospaced">format
       Specifies whether the data should be viewed as a list of
       8-bit, 16-bit, or 32-bit quantities. Possible values are
       8, 16, and 32. This information allows the X server to
       correctly perform byte-swap operations as necessary. If
       the format is 16-bit or 32-bit, you must explicitly cast
       the data pointer to an (unsigned char*) in the call to
       XChangeDeviceProperty.</literallayout>
<literallayout class="monospaced">length
       Specifies the length in 32-bit multiplies of the data to
       be retrieved.</literallayout>
<literallayout class="monospaced">mode
       Specifies the mode of operation. You can pass
       PropModeReplace, PropModePrepend, or PropModeAppend.</literallayout>
<literallayout class="monospaced">nelements
       Specifies the number of elements in data.</literallayout>
<literallayout class="monospaced">nitems_return
       Returns the actual number of 8-bit, 16-bit, or 32-bit
       items stored in the prop_return array.</literallayout>
<literallayout class="monospaced">num_values
       Specifies the number of elements in the values list.</literallayout>
<literallayout class="monospaced">offset
       Specifies the offset in the specified property (in
       32-bit quantities) where the data is to be retrieved.</literallayout>
<literallayout class="monospaced">property
       Specifies the property to modify or query.</literallayout>
<literallayout class="monospaced">prop_return
       Returns the data in the specified format. If the
       returned format is 8, the returned data is represented
       as a char array. If the returned format is 16, the
       returned data is represented as an array of short int
       type and should be cast to that type to obtain the
       elements. If the returned format is 32, the property
       data will be stored as an array of longs (which in a
       64-bit application will be 64-bit values that are padded
       in the upper 4 bytes).</literallayout>
<literallayout class="monospaced">req_type
       Specifies the atom identifier associated with the
       property type or AnyPropertyType.</literallayout>
</refsynopsisdiv>
<refsect1 xml:id="_description">
<title>DESCRIPTION</title>
<simpara>The XGetDeviceProperty function returns the actual type of the
property; the actual format of the property; the number of
8-bit, 16-bit, or 32-bit items transferred; the number of bytes
remaining to be read in the property; and a pointer to the data
actually returned. For a detailed description of this function,
see the man page to XGetWindowProperty.</simpara>
<simpara>The XChangeDeviceProperty function alters the property for the
specified device and causes the server to generate a
XPropertyNotifyEvent event on that device. For a detailed
description of this function, see the man page to
XChangeProperty.</simpara>
<simpara>The XDeleteDeviceProperty function deletes the specified device
property. Note that a client cannot delete a property created
by a driver or the server. Attempting to do so will result in a
BadAtom error.</simpara>
<simpara>XGetDeviceProperty can generate a BadAtom, BadDevice error.</simpara>
<simpara>XChangeDeviceProperty can generate a BadDevice, a BadMatch, a
BadAtom, and a BadValue error.</simpara>
<simpara>XDeleteDeviceProperty can generate a BadDevice, and a BadAtom
error.</simpara>
</refsect1>
<refsect1 xml:id="_diagnosis">
<title>DIAGNOSIS</title>
<literallayout class="monospaced">BadAtom
       A value does not describe a valid named identifier or
       the client attempted to remove a driver-allocated
       property.</literallayout>
<literallayout class="monospaced">BadDevice
       An invalid device was specified. The device does not
       exist.</literallayout>
</refsect1>
<refsect1 xml:id="_see_also">
<title>SEE ALSO</title>
<literallayout class="monospaced">XListDeviceProperties(3)</literallayout>
</refsect1>
</refentry>