<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BN_bn2bin.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BN_bn2binpad,
BN_bn2bin, BN_bin2bn, BN_bn2lebinpad, BN_lebin2bn, BN_bn2hex, BN_bn2dec,
BN_hex2bn, BN_dec2bn, BN_print, BN_print_fp, BN_bn2mpi,
BN_mpi2bn</refname>
<refpurpose>format conversions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis>int BN_bn2bin(const BIGNUM *a, unsigned char *to);
int BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen);
BIGNUM *BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret);</synopsis>
<synopsis>int BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen);
BIGNUM *BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret);</synopsis>
<synopsis>char *BN_bn2hex(const BIGNUM *a);
char *BN_bn2dec(const BIGNUM *a);
int BN_hex2bn(BIGNUM **a, const char *str);
int BN_dec2bn(BIGNUM **a, const char *str);</synopsis>
<synopsis>int BN_print(BIO *fp, const BIGNUM *a);
int BN_print_fp(FILE *fp, const BIGNUM *a);</synopsis>
<synopsis>int BN_bn2mpi(const BIGNUM *a, unsigned char *to);
BIGNUM *BN_mpi2bn(unsigned char *s, int len, BIGNUM *ret);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-b7e55d6d8d813766a4c9201e23703564"><title>DESCRIPTION</title>
    <para>
      BN_bn2bin() converts the absolute value of <emphasis role="bold">a</emphasis> into big-endian form and stores it at
      <emphasis role="bold">to</emphasis>. <emphasis role="bold">to</emphasis> must point to BN_num_bytes(<emphasis role="bold">a</emphasis>) bytes of memory.
    </para>
    <para>
      BN_bn2binpad() also converts the absolute value of <emphasis role="bold">a</emphasis> into big-endian form and stores it at
      <emphasis role="bold">to</emphasis>. <emphasis role="bold">tolen</emphasis> indicates the length of the output
      buffer <emphasis role="bold">to</emphasis>. The result is padded with
      zeroes if necessary. If <emphasis role="bold">tolen</emphasis> is
      less than BN_num_bytes(<emphasis role="bold">a</emphasis>) an error
      is returned.
    </para>
    <para>
      BN_bin2bn() converts the positive integer in big-endian form of
      length <emphasis role="bold">len</emphasis> at <emphasis role="bold">s</emphasis> into a <emphasis role="bold">BIGNUM</emphasis> and places it in <emphasis role="bold">ret</emphasis>. If <emphasis role="bold">ret</emphasis>
      is NULL, a new <emphasis role="bold">BIGNUM</emphasis> is created.
    </para>
    <para>
      BN_bn2lebinpad() and BN_bin2lbn() are identical to BN_bn2binpad() and
      BN_bin2bn() except the buffer is in little-endian format.
    </para>
    <para>
      BN_bn2hex() and BN_bn2dec() return printable strings containing the
      hexadecimal and decimal encoding of <emphasis role="bold">a</emphasis> respectively. For negative numbers, the
      string is prefaced with a leading '-'. The string must be freed later
      using OPENSSL_free().
    </para>
    <para>
      BN_hex2bn() takes as many characters as possible from the string
      <emphasis role="bold">str</emphasis>, including the leading character
      '-' which means negative, to form a valid hexadecimal number
      representation and converts them to a <emphasis role="bold">BIGNUM</emphasis> and stores it in **<emphasis role="bold">bn</emphasis>. If *<emphasis role="bold">bn</emphasis> is
      NULL, a new <emphasis role="bold">BIGNUM</emphasis> is created. If
      <emphasis role="bold">bn</emphasis> is NULL, it only computes the
      length of valid representation. A "negative zero" is converted to
      zero. BN_dec2bn() is the same using the decimal system.
    </para>
    <para>
      BN_print() and BN_print_fp() write the hexadecimal encoding of
      <emphasis role="bold">a</emphasis>, with a leading '-' for negative
      numbers, to the <emphasis role="bold">BIO</emphasis> or <emphasis role="bold">FILE</emphasis> <emphasis role="bold">fp</emphasis>.
    </para>
    <para>
      BN_bn2mpi() and BN_mpi2bn() convert <emphasis role="bold">BIGNUM</emphasis>s from and to a format that consists of
      the number's length in bytes represented as a 4-byte big-endian
      number, and the number itself in big-endian format, where the most
      significant bit signals a negative number (the representation of
      numbers with the MSB set is prefixed with null byte).
    </para>
    <para>
      BN_bn2mpi() stores the representation of <emphasis role="bold">a</emphasis> at <emphasis role="bold">to</emphasis>,
      where <emphasis role="bold">to</emphasis> must be large enough to
      hold the result. The size can be determined by calling
      BN_bn2mpi(<emphasis role="bold">a</emphasis>, NULL).
    </para>
    <para>
      BN_mpi2bn() converts the <emphasis role="bold">len</emphasis> bytes
      long representation at <emphasis role="bold">s</emphasis> to a
      <emphasis role="bold">BIGNUM</emphasis> and stores it at <emphasis role="bold">ret</emphasis>, or in a newly allocated <emphasis role="bold">BIGNUM</emphasis> if <emphasis role="bold">ret</emphasis>
      is NULL.
    </para>
  </refsection>
  <refsection xml:id="ID-1292fca0123e16ae83d4df0054620dfb"><title>RETURN VALUES</title>
    <para>
      BN_bn2bin() returns the length of the big-endian number placed at
      <emphasis role="bold">to</emphasis>. BN_bin2bn() returns the
      <emphasis role="bold">BIGNUM</emphasis>, NULL on error.
    </para>
    <para>
      BN_bn2binpad() returns the number of bytes written or -1 if the
      supplied buffer is too small.
    </para>
    <para>
      BN_bn2hex() and BN_bn2dec() return a null-terminated string, or NULL
      on error. BN_hex2bn() and BN_dec2bn() return the the length of valid
      representation in hexadecimal or decimal digits, and 0 on error, in
      which case no new <emphasis role="bold">BIGNUM</emphasis> will be
      created.
    </para>
    <para>
      BN_print_fp() and BN_print() return 1 on success, 0 on write errors.
    </para>
    <para>
      BN_bn2mpi() returns the length of the representation. BN_mpi2bn()
      returns the <emphasis role="bold">BIGNUM</emphasis>, and NULL on
      error.
    </para>
    <para>
      The error codes can be obtained by <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-631806693987275623ebff3999b49bcb"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>bn</refentrytitle>
      <manvolnum>7</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>BN_zero</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>ASN1_INTEGER_to_BN</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>BN_num_bytes</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-019257d8661e4df5368c7151ff362688"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>