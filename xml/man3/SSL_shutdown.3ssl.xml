<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_shutdown.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_shutdown</refname>
<refpurpose>shut down a TLS/SSL connection</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>int SSL_shutdown(SSL *ssl);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-4f4a526c6a656b56dba537359bbe38c6"><title>DESCRIPTION</title>
    <para>
      SSL_shutdown() shuts down an active TLS/SSL connection. It sends the
      "close notify" shutdown alert to the peer.
    </para>
  </refsection>
  <refsection xml:id="ID-cabd93193a88c49b663355fbd67f9bf0"><title>NOTES</title>
    <para>
      SSL_shutdown() tries to send the "close notify" shutdown alert to the
      peer. Whether the operation succeeds or not, the SSL_SENT_SHUTDOWN
      flag is set and a currently open session is considered closed and
      good and will be kept in the session cache for further reuse.
    </para>
    <para>
      The shutdown procedure consists of 2 steps: the sending of the "close
      notify" shutdown alert and the reception of the peer's "close notify"
      shutdown alert. According to the TLS standard, it is acceptable for
      an application to only send its shutdown alert and then close the
      underlying connection without waiting for the peer's response (this
      way resources can be saved, as the process can already terminate or
      serve another connection). When the underlying connection shall be
      used for more communications, the complete shutdown procedure
      (bidirectional "close notify" alerts) must be performed, so that the
      peers stay synchronized.
    </para>
    <para>
      SSL_shutdown() supports both uni- and bidirectional shutdown by its 2
      step behaviour.
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>When the application is the first party to send the "close notify"
alert, SSL_shutdown() will only send the alert and then set the
SSL_SENT_SHUTDOWN flag (so that the session is considered good and will
be kept in cache). SSL_shutdown() will then return with 0. If a unidirectional
shutdown is enough (the underlying connection shall be closed anyway), this
first call to SSL_shutdown() is sufficient. In order to complete the
bidirectional shutdown handshake, SSL_shutdown() must be called again.
The second call will make SSL_shutdown() wait for the peer's "close notify"
shutdown alert. On success, the second call to SSL_shutdown() will return
with 1.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>If the peer already sent the "close notify" alert <emphasis role="bold">and</emphasis> it was
already processed implicitly inside another function
(<citerefentry>
  <refentrytitle>SSL_read</refentrytitle>
  <manvolnum>3</manvolnum>
</citerefentry>), the SSL_RECEIVED_SHUTDOWN flag is set.
SSL_shutdown() will send the "close notify" alert, set the SSL_SENT_SHUTDOWN
flag and will immediately return with 1.
Whether SSL_RECEIVED_SHUTDOWN is already set can be checked using the
SSL_get_shutdown() (see also <citerefentry>
  <refentrytitle>SSL_set_shutdown</refentrytitle>
  <manvolnum>3</manvolnum>
</citerefentry> call.</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      It is therefore recommended, to check the return value of
      SSL_shutdown() and call SSL_shutdown() again, if the bidirectional
      shutdown is not yet complete (return value of the first call is 0).
    </para>
    <para>
      The behaviour of SSL_shutdown() additionally depends on the
      underlying BIO.
    </para>
    <para>
      If the underlying BIO is <emphasis role="bold">blocking</emphasis>,
      SSL_shutdown() will only return once the handshake step has been
      finished or an error occurred.
    </para>
    <para>
      If the underlying BIO is <emphasis role="bold">non-blocking</emphasis>, SSL_shutdown() will also return
      when the underlying BIO could not satisfy the needs of SSL_shutdown()
      to continue the handshake. In this case a call to SSL_get_error()
      with the return value of SSL_shutdown() will yield <emphasis role="bold">SSL_ERROR_WANT_READ</emphasis> or <emphasis role="bold">SSL_ERROR_WANT_WRITE</emphasis>. The calling process then
      must repeat the call after taking appropriate action to satisfy the
      needs of SSL_shutdown(). The action depends on the underlying BIO.
      When using a non-blocking socket, nothing is to be done, but select()
      can be used to check for the required condition. When using a
      buffering BIO, like a BIO pair, data must be written into or
      retrieved out of the BIO before being able to continue.
    </para>
    <para>
      SSL_shutdown() can be modified to only set the connection to
      "shutdown" state but not actually send the "close notify" alert
      messages, see <citerefentry>
      <refentrytitle>SSL_CTX_set_quiet_shutdown</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>. When "quiet shutdown" is
      enabled, SSL_shutdown() will always succeed and return 1.
    </para>
  </refsection>
  <refsection xml:id="ID-99d18adb92c3161a2ef2087f2b22ec68"><title>RETURN VALUES</title>
    <para>
      The following return values can occur:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>0</term>
          <listitem>
            <para>
	      The shutdown is not yet finished. Call SSL_shutdown() for a
	      second time, if a bidirectional shutdown shall be performed.
	      The output of <citerefentry>
	      <refentrytitle>SSL_get_error</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> may be misleading,
	      as an erroneous SSL_ERROR_SYSCALL may be flagged even though
	      no error occurred.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>1</term>
          <listitem>
            <para>
	      The shutdown was successfully completed. The "close notify"
	      alert was sent and the peer's "close notify" alert was
	      received.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&lt;0</term>
          <listitem>
            <para>
	      The shutdown was not successful because a fatal error
	      occurred either at the protocol level or a connection failure
	      occurred. It can also occur if action is need to continue the
	      operation for non-blocking BIOs. Call <citerefentry>
	      <refentrytitle>SSL_get_error</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> with the return
	      value <emphasis role="bold">ret</emphasis> to find out the
	      reason.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-3c2c0b565104a1a6c869b71c70c15e5b"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>SSL_get_error</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_connect</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_accept</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_shutdown</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_quiet_shutdown</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_clear</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_free</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>bio</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
</refentry>