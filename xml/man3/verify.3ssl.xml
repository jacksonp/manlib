<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>verify.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>verify</refname>
<refpurpose>Utility to verify certificates</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis><emphasis role="bold">openssl</emphasis> <emphasis role="bold">verify</emphasis>
[<emphasis role="bold">-help</emphasis>]
[<emphasis role="bold">-CAfile file</emphasis>]
[<emphasis role="bold">-CApath directory</emphasis>]
[<emphasis role="bold">-no-CAfile</emphasis>]
[<emphasis role="bold">-no-CApath</emphasis>]
[<emphasis role="bold">-attime timestamp</emphasis>]
[<emphasis role="bold">-check_ss_sig</emphasis>]
[<emphasis role="bold">-CRLfile file</emphasis>]
[<emphasis role="bold">-crl_download</emphasis>]
[<emphasis role="bold">-crl_check</emphasis>]
[<emphasis role="bold">-crl_check_all</emphasis>]
[<emphasis role="bold">-engine id</emphasis>]
[<emphasis role="bold">-explicit_policy</emphasis>]
[<emphasis role="bold">-extended_crl</emphasis>]
[<emphasis role="bold">-ignore_critical</emphasis>]
[<emphasis role="bold">-inhibit_any</emphasis>]
[<emphasis role="bold">-inhibit_map</emphasis>]
[<emphasis role="bold">-no_check_time</emphasis>]
[<emphasis role="bold">-partial_chain</emphasis>]
[<emphasis role="bold">-policy arg</emphasis>]
[<emphasis role="bold">-policy_check</emphasis>]
[<emphasis role="bold">-policy_print</emphasis>]
[<emphasis role="bold">-purpose purpose</emphasis>]
[<emphasis role="bold">-suiteB_128</emphasis>]
[<emphasis role="bold">-suiteB_128_only</emphasis>]
[<emphasis role="bold">-suiteB_192</emphasis>]
[<emphasis role="bold">-trusted_first</emphasis>]
[<emphasis role="bold">-no_alt_chains</emphasis>]
[<emphasis role="bold">-untrusted file</emphasis>]
[<emphasis role="bold">-trusted file</emphasis>]
[<emphasis role="bold">-use_deltas</emphasis>]
[<emphasis role="bold">-verbose</emphasis>]
[<emphasis role="bold">-auth_level level</emphasis>]
[<emphasis role="bold">-verify_depth num</emphasis>]
[<emphasis role="bold">-verify_email email</emphasis>]
[<emphasis role="bold">-verify_hostname hostname</emphasis>]
[<emphasis role="bold">-verify_ip ip</emphasis>]
[<emphasis role="bold">-verify_name name</emphasis>]
[<emphasis role="bold">-x509_strict</emphasis>]
[<emphasis role="bold">-show_chain</emphasis>]
[<emphasis role="bold">-</emphasis>]
[certificates]</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-3d7d5012f07404e4c87fbea17c99d5f9"><title>DESCRIPTION</title>
    <para>
      The <emphasis role="bold">verify</emphasis> command verifies
      certificate chains.
    </para>
  </refsection>
  <refsection xml:id="ID-5383bd96e6c09a6c64e58fe5899c14b6"><title>COMMAND OPTIONS</title>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">-help</emphasis></term>
          <listitem>
            <para>
	      Print out a usage message.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-CAfile file</emphasis></term>
          <listitem>
            <para>
	      A <emphasis role="bold">file</emphasis> of trusted
	      certificates. The file should contain one or more
	      certificates in PEM format.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-CApath directory</emphasis></term>
          <listitem>
            <para>
	      A directory of trusted certificates. The certificates should
	      have names of the form: hash.0 or have symbolic links to them
	      of this form ("hash" is the hashed certificate subject name:
	      see the <emphasis role="bold">-hash</emphasis> option of the
	      <emphasis role="bold">x509</emphasis> utility). Under Unix
	      the <emphasis role="bold">c_rehash</emphasis> script will
	      automatically create symbolic links to a directory of
	      certificates.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no-CAfile</emphasis></term>
          <listitem>
            <para>
	      Do not load the trusted CA certificates from the default file
	      location
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no-CApath</emphasis></term>
          <listitem>
            <para>
	      Do not load the trusted CA certificates from the default
	      directory location
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-attime timestamp</emphasis></term>
          <listitem>
            <para>
	      Perform validation checks using time specified by <emphasis role="bold">timestamp</emphasis> and not current system time.
	      <emphasis role="bold">timestamp</emphasis> is the number of
	      seconds since 01.01.1970 (UNIX time).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-check_ss_sig</emphasis></term>
          <listitem>
            <para>
	      Verify the signature on the self-signed root CA. This is
	      disabled by default because it doesn't add any security.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-CRLfile file</emphasis></term>
          <listitem>
            <para>
	      The <emphasis role="bold">file</emphasis> should contain one
	      or more CRLs in PEM format. This option can be specified more
	      than once to include CRLs from multiple <emphasis role="bold">files</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-crl_download</emphasis></term>
          <listitem>
            <para>
	      Attempt to download CRL information for this certificate.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-crl_check</emphasis></term>
          <listitem>
            <para>
	      Checks end entity certificate validity by attempting to look
	      up a valid CRL. If a valid CRL cannot be found an error
	      occurs.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-crl_check_all</emphasis></term>
          <listitem>
            <para>
	      Checks the validity of <emphasis role="bold">all</emphasis>
	      certificates in the chain by attempting to look up valid
	      CRLs.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-engine id</emphasis></term>
          <listitem>
            <para>
	      Specifying an engine <emphasis role="bold">id</emphasis> will
	      cause <citerefentry> <refentrytitle>verify</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry> to attempt to load
	      the specified engine. The engine will then be set as the
	      default for all its supported algorithms. If you want to load
	      certificates or CRLs that require engine support via any of
	      the <emphasis role="bold">-trusted</emphasis>, <emphasis role="bold">-untrusted</emphasis> or <emphasis role="bold">-CRLfile</emphasis> options, the <emphasis role="bold">-engine</emphasis> option must be specified
	      before those options.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-explicit_policy</emphasis></term>
          <listitem>
            <para>
	      Set policy variable require-explicit-policy (see RFC5280).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-extended_crl</emphasis></term>
          <listitem>
            <para>
	      Enable extended CRL features such as indirect CRLs and
	      alternate CRL signing keys.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-ignore_critical</emphasis></term>
          <listitem>
            <para>
	      Normally if an unhandled critical extension is present which
	      is not supported by OpenSSL the certificate is rejected (as
	      required by RFC5280). If this option is set critical
	      extensions are ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-inhibit_any</emphasis></term>
          <listitem>
            <para>
	      Set policy variable inhibit-any-policy (see RFC5280).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-inhibit_map</emphasis></term>
          <listitem>
            <para>
	      Set policy variable inhibit-policy-mapping (see RFC5280).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no_check_time</emphasis></term>
          <listitem>
            <para>
	      This option suppresses checking the validity period of
	      certificates and CRLs against the current time. If option
	      <emphasis role="bold">-attime timestamp</emphasis> is used to
	      specify a verification time, the check is not suppressed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-partial_chain</emphasis></term>
          <listitem>
            <para>
	      Allow verification to succeed even if a <emphasis role="italic">complete</emphasis> chain cannot be built to a
	      self-signed trust-anchor, provided it is possible to
	      construct a chain to a trusted certificate that might not be
	      self-signed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-policy arg</emphasis></term>
          <listitem>
            <para>
	      Enable policy processing and add <emphasis role="bold">arg</emphasis> to the user-initial-policy-set
	      (see RFC5280). The policy <emphasis role="bold">arg</emphasis> can be an object name an OID in
	      numeric form. This argument can appear more than once.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-policy_check</emphasis></term>
          <listitem>
            <para>
	      Enables certificate policy processing.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-policy_print</emphasis></term>
          <listitem>
            <para>
	      Print out diagnostics related to policy processing.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-purpose purpose</emphasis></term>
          <listitem>
            <para>
	      The intended use for the certificate. If this option is not
	      specified, <emphasis role="bold">verify</emphasis> will not
	      consider certificate purpose during chain verification.
	      Currently accepted uses are <emphasis role="bold">sslclient</emphasis>, <emphasis role="bold">sslserver</emphasis>, <emphasis role="bold">nssslserver</emphasis>, <emphasis role="bold">smimesign</emphasis>, <emphasis role="bold">smimeencrypt</emphasis>. See the <emphasis role="bold">VERIFY OPERATION</emphasis> section for more
	      information.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-suiteB_128_only</emphasis>, <emphasis role="bold">-suiteB_128</emphasis>, <emphasis role="bold">-suiteB_192</emphasis></term>
          <listitem>
            <para>
	      enable the Suite B mode operation at 128 bit Level of
	      Security, 128 bit or 192 bit, or only 192 bit Level of
	      Security respectively. See RFC6460 for details. In particular
	      the supported signature algorithms are reduced to support
	      only ECDSA and SHA256 or SHA384 and only the elliptic curves
	      P-256 and P-384.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-trusted_first</emphasis></term>
          <listitem>
            <para>
	      When constructing the certificate chain, use the trusted
	      certificates specified via <emphasis role="bold">-CAfile</emphasis>, <emphasis role="bold">-CApath</emphasis> or <emphasis role="bold">-trusted</emphasis> before any certificates
	      specified via <emphasis role="bold">-untrusted</emphasis>.
	      This can be useful in environments with Bridge or
	      Cross-Certified CAs. As of OpenSSL 1.1.0 this option is on by
	      default and cannot be disabled.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no_alt_chains</emphasis></term>
          <listitem>
            <para>
	      By default, unless <emphasis role="bold">-trusted_first</emphasis> is specified, when
	      building a certificate chain, if the first certificate chain
	      found is not trusted, then OpenSSL will attempt to replace
	      untrusted issuer certificates with certificates from the
	      trust store to see if an alternative chain can be found that
	      is trusted. As of OpenSSL 1.1.0, with <emphasis role="bold">-trusted_first</emphasis> always on, this option
	      has no effect.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-untrusted file</emphasis></term>
          <listitem>
            <para>
	      A <emphasis role="bold">file</emphasis> of additional
	      untrusted certificates (intermediate issuer CAs) used to
	      construct a certificate chain from the subject certificate to
	      a trust-anchor. The <emphasis role="bold">file</emphasis>
	      should contain one or more certificates in PEM format. This
	      option can be specified more than once to include untrusted
	      certificates from multiple <emphasis role="bold">files</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-trusted file</emphasis></term>
          <listitem>
            <para>
	      A <emphasis role="bold">file</emphasis> of trusted
	      certificates, which must be self-signed, unless the <emphasis role="bold">-partial_chain</emphasis> option is specified.
	      The <emphasis role="bold">file</emphasis> contains one or
	      more certificates in PEM format. With this option, no
	      additional (e.g., default) certificate lists are consulted.
	      That is, the only trust-anchors are those listed in <emphasis role="bold">file</emphasis>. This option can be specified
	      more than once to include trusted certificates from multiple
	      <emphasis role="bold">files</emphasis>. This option implies
	      the <emphasis role="bold">-no-CAfile</emphasis> and <emphasis role="bold">-no-CApath</emphasis> options. This option cannot
	      be used in combination with either of the <emphasis role="bold">-CAfile</emphasis> or <emphasis role="bold">-CApath</emphasis> options.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-use_deltas</emphasis></term>
          <listitem>
            <para>
	      Enable support for delta CRLs.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verbose</emphasis></term>
          <listitem>
            <para>
	      Print extra information about the operations being performed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-auth_level level</emphasis></term>
          <listitem>
            <para>
	      Set the certificate chain authentication security level to
	      <emphasis role="bold">level</emphasis>. The authentication
	      security level determines the acceptable signature and public
	      key strength when verifying certificate chains. For a
	      certificate chain to validate, the public keys of all the
	      certificates must meet the specified security <emphasis role="bold">level</emphasis>. The signature algorithm
	      security level is enforced for all the certificates in the
	      chain except for the chain's <emphasis role="italic">trust
	      anchor</emphasis>, which is either directly trusted or
	      validated by means other than its signature. See
	      <citerefentry>
	      <refentrytitle>SSL_CTX_set_security_level</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> for the definitions
	      of the available levels. The default security level is -1, or
	      "not set". At security level 0 or lower all algorithms are
	      acceptable. Security level 1 requires at least
	      80-bit-equivalent security and is broadly interoperable,
	      though it will, for example, reject MD5 signatures or RSA
	      keys shorter than 1024 bits.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify_depth num</emphasis></term>
          <listitem>
            <para>
	      Limit the certificate chain to <emphasis role="bold">num</emphasis> intermediate CA certificates. A
	      maximal depth chain can have up to <emphasis role="bold">num+2</emphasis> certificates, since neither the
	      end-entity certificate nor the trust-anchor certificate count
	      against the <emphasis role="bold">-verify_depth</emphasis>
	      limit.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify_email email</emphasis></term>
          <listitem>
            <para>
	      Verify if the <emphasis role="bold">email</emphasis> matches
	      the email address in Subject Alternative Name or the email in
	      the subject Distinguished Name.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify_hostname hostname</emphasis></term>
          <listitem>
            <para>
	      Verify if the <emphasis role="bold">hostname</emphasis>
	      matches DNS name in Subject Alternative Name or Common Name
	      in the subject certificate.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify_ip ip</emphasis></term>
          <listitem>
            <para>
	      Verify if the <emphasis role="bold">ip</emphasis> matches the
	      IP address in Subject Alternative Name of the subject
	      certificate.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify_name name</emphasis></term>
          <listitem>
            <para>
	      Use default verification policies like trust model and
	      required certificate policies identified by <emphasis role="bold">name</emphasis>. The trust model determines which
	      auxiliary trust or reject OIDs are applicable to verifying
	      the given certificate chain. See the <emphasis role="bold">-addtrust</emphasis> and <emphasis role="bold">-addreject</emphasis> options of the
	      <citerefentry> <refentrytitle>x509</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry> command-line
	      utility. Supported policy names include: <emphasis role="bold">default</emphasis>, <emphasis role="bold">pkcs7</emphasis>, <emphasis role="bold">smime_sign</emphasis>, <emphasis role="bold">ssl_client</emphasis>, <emphasis role="bold">ssl_server</emphasis>. These mimics the
	      combinations of purpose and trust settings used in SSL, CMS
	      and S/MIME. As of OpenSSL 1.1.0, the trust model is inferred
	      from the purpose when not specified, so the <emphasis role="bold">-verify_name</emphasis> options are functionally
	      equivalent to the corresponding <emphasis role="bold">-purpose</emphasis> settings.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-x509_strict</emphasis></term>
          <listitem>
            <para>
	      For strict X.509 compliance, disable non-compliant
	      workarounds for broken certificates.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-show_chain</emphasis></term>
          <listitem>
            <para>
	      Display information about the certificate chain that has been
	      built (if successful). Certificates in the chain that came
	      from the untrusted list will be flagged as "untrusted".
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-</emphasis></term>
          <listitem>
            <para>
	      Indicates the last option. All arguments following this are
	      assumed to be certificate files. This is useful if the first
	      certificate filename begins with a <emphasis role="bold">-</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">certificates</emphasis></term>
          <listitem>
            <para>
	      One or more certificates to verify. If no certificates are
	      given, <emphasis role="bold">verify</emphasis> will attempt
	      to read a certificate from standard input. Certificates must
	      be in PEM format.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-cf4eb5f32cdfc115ea067ac6b5848994"><title>VERIFY OPERATION</title>
    <para>
      The <emphasis role="bold">verify</emphasis> program uses the same
      functions as the internal SSL and S/MIME verification, therefore this
      description applies to these verify operations too.
    </para>
    <para>
      There is one crucial difference between the verify operations
      performed by the <emphasis role="bold">verify</emphasis> program:
      wherever possible an attempt is made to continue after an error
      whereas normally the verify operation would halt on the first error.
      This allows all the problems with a certificate chain to be
      determined.
    </para>
    <para>
      The verify operation consists of a number of separate steps.
    </para>
    <para>
      Firstly a certificate chain is built up starting from the supplied
      certificate and ending in the root CA. It is an error if the whole
      chain cannot be built up. The chain is built up by looking up the
      issuers certificate of the current certificate. If a certificate is
      found which is its own issuer it is assumed to be the root CA.
    </para>
    <para>
      The process of 'looking up the issuers certificate' itself involves a
      number of steps. After all certificates whose subject name matches
      the issuer name of the current certificate are subject to further
      tests. The relevant authority key identifier components of the
      current certificate (if present) must match the subject key
      identifier (if present) and issuer and serial number of the candidate
      issuer, in addition the keyUsage extension of the candidate issuer
      (if present) must permit certificate signing.
    </para>
    <para>
      The lookup first looks in the list of untrusted certificates and if
      no match is found the remaining lookups are from the trusted
      certificates. The root CA is always looked up in the trusted
      certificate list: if the certificate to verify is a root certificate
      then an exact match must be found in the trusted list.
    </para>
    <para>
      The second operation is to check every untrusted certificate's
      extensions for consistency with the supplied purpose. If the
      <emphasis role="bold">-purpose</emphasis> option is not included then
      no checks are done. The supplied or "leaf" certificate must have
      extensions compatible with the supplied purpose and all other
      certificates must also be valid CA certificates. The precise
      extensions required are described in more detail in the <emphasis role="bold">CERTIFICATE EXTENSIONS</emphasis> section of the
      <emphasis role="bold">x509</emphasis> utility.
    </para>
    <para>
      The third operation is to check the trust settings on the root CA.
      The root CA should be trusted for the supplied purpose. For
      compatibility with previous versions of OpenSSL, a certificate with
      no trust settings is considered to be valid for all purposes.
    </para>
    <para>
      The final operation is to check the validity of the certificate
      chain. The validity period is checked against the current system time
      and the notBefore and notAfter dates in the certificate. The
      certificate signatures are also checked at this point.
    </para>
    <para>
      If all operations complete successfully then certificate is
      considered valid. If any operation fails then the certificate is not
      valid.
    </para>
  </refsection>
  <refsection xml:id="ID-041ace3d8dc45c0435183b439fb420ea"><title>DIAGNOSTICS</title>
    <para>
      When a verify operation fails the output messages can be somewhat
      cryptic. The general form of the error message is:
    </para>
    <screen>server.pem: /C=AU/ST=Queensland/O=CryptSoft Pty Ltd/CN=Test CA (1024 bit)
error 24 at 1 depth lookup:invalid CA certificate</screen>
    <para>
      The first line contains the name of the certificate being verified
      followed by the subject name of the certificate. The second line
      contains the error number and the depth. The depth is number of the
      certificate being verified when a problem was detected starting with
      zero for the certificate being verified itself then 1 for the CA that
      signed the certificate and so on. Finally a text version of the error
      number is presented.
    </para>
    <para>
      A partial list of the error codes and messages is shown below, this
      also includes the name of the error code as defined in the header
      file x509_vfy.h Some of the error codes are defined but never
      returned: these are described as "unused".
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">X509_V_OK</emphasis></term>
          <listitem>
            <para>
	      The operation was successful.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNSPECIFIED</emphasis></term>
          <listitem>
            <para>
	      Unspecified error; should not happen.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT</emphasis></term>
          <listitem>
            <para>
	      The issuer certificate of a looked up certificate could not
	      be found. This normally means the list of trusted
	      certificates is not complete.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNABLE_TO_GET_CRL</emphasis></term>
          <listitem>
            <para>
	      The CRL of a certificate could not be found.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE</emphasis></term>
          <listitem>
            <para>
	      The certificate signature could not be decrypted. This means
	      that the actual signature value could not be determined
	      rather than it not matching the expected value, this is only
	      meaningful for RSA keys.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE</emphasis></term>
          <listitem>
            <para>
	      The CRL signature could not be decrypted: this means that the
	      actual signature value could not be determined rather than it
	      not matching the expected value. Unused.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY</emphasis></term>
          <listitem>
            <para>
	      The public key in the certificate SubjectPublicKeyInfo could
	      not be read.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CERT_SIGNATURE_FAILURE</emphasis></term>
          <listitem>
            <para>
	      The signature of the certificate is invalid.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CRL_SIGNATURE_FAILURE</emphasis></term>
          <listitem>
            <para>
	      The signature of the certificate is invalid.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CERT_NOT_YET_VALID</emphasis></term>
          <listitem>
            <para>
	      The certificate is not yet valid: the notBefore date is after
	      the current time.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CERT_HAS_EXPIRED</emphasis></term>
          <listitem>
            <para>
	      The certificate has expired: that is the notAfter date is
	      before the current time.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CRL_NOT_YET_VALID</emphasis></term>
          <listitem>
            <para>
	      The CRL is not yet valid.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CRL_HAS_EXPIRED</emphasis></term>
          <listitem>
            <para>
	      The CRL has expired.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD</emphasis></term>
          <listitem>
            <para>
	      The certificate notBefore field contains an invalid time.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD</emphasis></term>
          <listitem>
            <para>
	      The certificate notAfter field contains an invalid time.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD</emphasis></term>
          <listitem>
            <para>
	      The CRL lastUpdate field contains an invalid time.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD</emphasis></term>
          <listitem>
            <para>
	      The CRL nextUpdate field contains an invalid time.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_OUT_OF_MEM</emphasis></term>
          <listitem>
            <para>
	      An error occurred trying to allocate memory. This should
	      never happen.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT</emphasis></term>
          <listitem>
            <para>
	      The passed certificate is self-signed and the same
	      certificate cannot be found in the list of trusted
	      certificates.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN</emphasis></term>
          <listitem>
            <para>
	      The certificate chain could be built up using the untrusted
	      certificates but the root could not be found locally.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY</emphasis></term>
          <listitem>
            <para>
	      The issuer certificate could not be found: this occurs if the
	      issuer certificate of an untrusted certificate cannot be
	      found.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE</emphasis></term>
          <listitem>
            <para>
	      No signatures could be verified because the chain contains
	      only one certificate and it is not self signed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CERT_CHAIN_TOO_LONG</emphasis></term>
          <listitem>
            <para>
	      The certificate chain length is greater than the supplied
	      maximum depth. Unused.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CERT_REVOKED</emphasis></term>
          <listitem>
            <para>
	      The certificate has been revoked.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_INVALID_CA</emphasis></term>
          <listitem>
            <para>
	      A CA certificate is invalid. Either it is not a CA or its
	      extensions are not consistent with the supplied purpose.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_PATH_LENGTH_EXCEEDED</emphasis></term>
          <listitem>
            <para>
	      The basicConstraints pathlength parameter has been exceeded.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_INVALID_PURPOSE</emphasis></term>
          <listitem>
            <para>
	      The supplied certificate cannot be used for the specified
	      purpose.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CERT_UNTRUSTED</emphasis></term>
          <listitem>
            <para>
	      the root CA is not marked as trusted for the specified
	      purpose.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CERT_REJECTED</emphasis></term>
          <listitem>
            <para>
	      The root CA is marked to reject the specified purpose.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_SUBJECT_ISSUER_MISMATCH</emphasis></term>
          <listitem>
            <para>
	      not used as of OpenSSL 1.1.0 as a result of the deprecation
	      of the <emphasis role="bold">-issuer_checks</emphasis>
	      option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_AKID_SKID_MISMATCH</emphasis></term>
          <listitem>
            <para>
	      Not used as of OpenSSL 1.1.0 as a result of the deprecation
	      of the <emphasis role="bold">-issuer_checks</emphasis>
	      option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH</emphasis></term>
          <listitem>
            <para>
	      Not used as of OpenSSL 1.1.0 as a result of the deprecation
	      of the <emphasis role="bold">-issuer_checks</emphasis>
	      option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_KEYUSAGE_NO_CERTSIGN</emphasis></term>
          <listitem>
            <para>
	      Not used as of OpenSSL 1.1.0 as a result of the deprecation
	      of the <emphasis role="bold">-issuer_checks</emphasis>
	      option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER</emphasis></term>
          <listitem>
            <para>
	      Unable to get CRL issuer certificate.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION</emphasis></term>
          <listitem>
            <para>
	      Unhandled critical extension.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_KEYUSAGE_NO_CRL_SIGN</emphasis></term>
          <listitem>
            <para>
	      Key usage does not include CRL signing.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION</emphasis></term>
          <listitem>
            <para>
	      Unhandled critical CRL extension.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_INVALID_NON_CA</emphasis></term>
          <listitem>
            <para>
	      Invalid non-CA certificate has CA markings.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED</emphasis></term>
          <listitem>
            <para>
	      Proxy path length constraint exceeded.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE</emphasis></term>
          <listitem>
            <para>
	      Key usage does not include digital signature.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED</emphasis></term>
          <listitem>
            <para>
	      Proxy certificates not allowed, please set the appropriate
	      flag.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_INVALID_EXTENSION</emphasis></term>
          <listitem>
            <para>
	      Invalid or inconsistent certificate extension.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_INVALID_POLICY_EXTENSION</emphasis></term>
          <listitem>
            <para>
	      Invalid or inconsistent certificate policy extension.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_NO_EXPLICIT_POLICY</emphasis></term>
          <listitem>
            <para>
	      No explicit policy.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_DIFFERENT_CRL_SCOPE</emphasis></term>
          <listitem>
            <para>
	      Different CRL scope.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE</emphasis></term>
          <listitem>
            <para>
	      Unsupported extension feature.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNNESTED_RESOURCE</emphasis></term>
          <listitem>
            <para>
	      RFC 3779 resource not subset of parent's resources.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_PERMITTED_VIOLATION</emphasis></term>
          <listitem>
            <para>
	      Permitted subtree violation.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_EXCLUDED_VIOLATION</emphasis></term>
          <listitem>
            <para>
	      Excluded subtree violation.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_SUBTREE_MINMAX</emphasis></term>
          <listitem>
            <para>
	      Name constraints minimum and maximum not supported.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_APPLICATION_VERIFICATION</emphasis></term>
          <listitem>
            <para>
	      Application verification failure. Unused.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE</emphasis></term>
          <listitem>
            <para>
	      Unsupported name constraint type.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX</emphasis></term>
          <listitem>
            <para>
	      Unsupported or invalid name constraint syntax.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_UNSUPPORTED_NAME_SYNTAX</emphasis></term>
          <listitem>
            <para>
	      Unsupported or invalid name syntax.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_CRL_PATH_VALIDATION_ERROR</emphasis></term>
          <listitem>
            <para>
	      CRL path validation error.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_PATH_LOOP</emphasis></term>
          <listitem>
            <para>
	      Path loop.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_SUITE_B_INVALID_VERSION</emphasis></term>
          <listitem>
            <para>
	      Suite B: certificate version invalid.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_SUITE_B_INVALID_ALGORITHM</emphasis></term>
          <listitem>
            <para>
	      Suite B: invalid public key algorithm.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_SUITE_B_INVALID_CURVE</emphasis></term>
          <listitem>
            <para>
	      Suite B: invalid ECC curve.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM</emphasis></term>
          <listitem>
            <para>
	      Suite B: invalid signature algorithm.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED</emphasis></term>
          <listitem>
            <para>
	      Suite B: curve not allowed for this LOS.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256</emphasis></term>
          <listitem>
            <para>
	      Suite B: cannot sign P-384 with P-256.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_HOSTNAME_MISMATCH</emphasis></term>
          <listitem>
            <para>
	      Hostname mismatch.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_EMAIL_MISMATCH</emphasis></term>
          <listitem>
            <para>
	      Email address mismatch.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_IP_ADDRESS_MISMATCH</emphasis></term>
          <listitem>
            <para>
	      IP address mismatch.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">X509_V_ERR_DANE_NO_MATCH</emphasis></term>
          <listitem>
            <para>
	      DANE TLSA authentication is enabled, but no TLSA records
	      matched the certificate chain. This error is only possible in
	      <citerefentry> <refentrytitle>s_client</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-a375db7e67b709c32eb92d1c449f7f18"><title>BUGS</title>
    <para>
      Although the issuer checks are a considerable improvement over the
      old technique they still suffer from limitations in the underlying
      X509_LOOKUP API. One consequence of this is that trusted certificates
      with matching subject name must either appear in a file (as specified
      by the <emphasis role="bold">-CAfile</emphasis> option) or a
      directory (as specified by <emphasis role="bold">-CApath</emphasis>).
      If they occur in both then only the certificates in the file will be
      recognised.
    </para>
    <para>
      Previous versions of OpenSSL assume certificates with matching
      subject name are identical and mishandled them.
    </para>
    <para>
      Previous versions of this documentation swapped the meaning of the
      <emphasis role="bold">X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT</emphasis>
      and <emphasis role="bold">X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY</emphasis>
      error codes.
    </para>
  </refsection>
  <refsection xml:id="ID-ef469cfcecc46cd0218c2ae163e5bf31"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>x509</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-d921e1cf6cc48357e2f61c30bb56cce7"><title>HISTORY</title>
    <para>
      The <emphasis role="bold">-show_chain</emphasis> option was first
      added to OpenSSL 1.1.0.
    </para>
    <para>
      The <emphasis role="bold">-issuer_checks</emphasis> option is
      deprecated as of OpenSSL 1.1.0 and is silently ignored.
    </para>
  </refsection>
  <refsection xml:id="ID-4bf82978c36d2c75baafd09e0216fcca"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>