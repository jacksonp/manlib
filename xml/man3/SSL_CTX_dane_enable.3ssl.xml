<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_dane_enable.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_dane_enable, SSL_CTX_dane_mtype_set, SSL_dane_enable,
SSL_dane_tlsa_add, SSL_get0_dane_authority, SSL_get0_dane_tlsa</refname>
<refpurpose>enable DANE TLS authentication of the remote TLS server in the local
TLS client</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>int SSL_CTX_dane_enable(SSL_CTX *ctx);
int SSL_CTX_dane_mtype_set(SSL_CTX *ctx, const EVP_MD *md,
                           uint8_t mtype, uint8_t ord);
int SSL_dane_enable(SSL *s, const char *basedomain);
int SSL_dane_tlsa_add(SSL *s, uint8_t usage, uint8_t selector,
                      uint8_t mtype, unsigned char *data, size_t dlen);
int SSL_get0_dane_authority(SSL *s, X509 **mcert, EVP_PKEY **mspki);
int SSL_get0_dane_tlsa(SSL *s, uint8_t *usage, uint8_t *selector,
                       uint8_t *mtype, unsigned const char **data,
                       size_t *dlen);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-00211776a316ea8d43eda7052e1e855e"><title>DESCRIPTION</title>
    <para>
      These functions implement support for DANE TLSA (RFC6698 and RFC7671)
      peer authentication.
    </para>
    <para>
      SSL_CTX_dane_enable() must be called first to initialize the shared
      state required for DANE support. Individual connections associated
      with the context can then enable per-connection DANE support as
      appropriate. DANE authentication is implemented in the <citerefentry>
      <refentrytitle>X509_verify_cert</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> function, and applications
      that override <citerefentry>
      <refentrytitle>X509_verify_cert</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> via <citerefentry>
      <refentrytitle>SSL_CTX_set_cert_verify_callback</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> are responsible to
      authenticate the peer chain in whatever manner they see fit.
    </para>
    <para>
      SSL_CTX_dane_mtype_set() may then be called zero or more times to to
      adjust the supported digest algorithms. This must be done before any
      SSL handles are created for the context.
    </para>
    <para>
      The <emphasis role="bold">mtype</emphasis> argument specifies a DANE
      TLSA matching type and the <emphasis role="bold">md</emphasis>
      argument specifies the associated digest algorithm handle. The
      <emphasis role="bold">ord</emphasis> argument specifies a strength
      ordinal. Algorithms with a larger strength ordinal are considered
      more secure. Strength ordinals are used to implement RFC7671 digest
      algorithm agility. Specifying a <emphasis role="bold">NULL</emphasis>
      digest algorithm for a matching type disables support for that
      matching type. Matching type Full(0) cannot be modified or disabled.
    </para>
    <para>
      By default, matching type <literal role="code">SHA2-256(1)</literal> (see RFC7218 for
      definitions of the DANE TLSA parameter acronyms) is mapped to
      <literal role="code">EVP_sha256()</literal> with a
      strength ordinal of <literal role="code">1</literal> and
      matching type <literal role="code">SHA2-512(2)</literal>
      is mapped to <literal role="code">EVP_sha512()</literal>
      with a strength ordinal of <literal role="code">2</literal>.
    </para>
    <para>
      SSL_dane_enable() must be called before the SSL handshake is
      initiated with <citerefentry>
      <refentrytitle>SSL_connect</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> if (and only if) you want to enable DANE for that
      connection. (The connection must be associated with a DANE-enabled
      SSL context). The <emphasis role="bold">basedomain</emphasis>
      argument specifies the RFC7671 TLSA base domain, which will be the
      primary peer reference identifier for certificate name checks.
      Additional server names can be specified via <citerefentry>
      <refentrytitle>SSL_add1_host</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>. The <emphasis role="bold">basedomain</emphasis> is
      used as the default SNI hint if none has yet been specified via
      <citerefentry>
      <refentrytitle>SSL_set_tlsext_host_name</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
    <para>
      SSL_dane_tlsa_add() may then be called one or more times, to load
      each of the TLSA records that apply to the remote TLS peer. (This too
      must be done prior to the beginning of the SSL handshake). The
      arguments specify the fields of the TLSA record. The <emphasis role="bold">data</emphasis> field is provided in binary (wire RDATA)
      form, not the hexadecimal ASCII presentation form, with an explicit
      length passed via <emphasis role="bold">dlen</emphasis>. A return
      value of 0 indicates that "unusable" TLSA records (with invalid or
      unsupported parameters) were provided, a negative return value
      indicates an internal error in processing the records. If DANE
      authentication is enabled, but no TLSA records are added
      successfully, authentication will fail, and the handshake may not
      complete, depending on the <emphasis role="bold">mode</emphasis>
      argument of <citerefentry>
      <refentrytitle>SSL_set_verify</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> and any verification
      callback.
    </para>
    <para>
      SSL_get0_dane_authority() can be used to get more detailed
      information about the matched DANE trust-anchor after successful
      connection completion. The return value is negative if DANE
      verification failed (or was not enabled), 0 if an EE TLSA record
      directly matched the leaf certificate, or a positive number
      indicating the depth at which a TA record matched an issuer
      certificate.
    </para>
    <para>
      If the <emphasis role="bold">mcert</emphasis> argument is not
      <emphasis role="bold">NULL</emphasis> and a TLSA record matched a
      chain certificate, a pointer to the matching certificate is returned
      via <emphasis role="bold">mcert</emphasis>. The returned address is a
      short-term internal reference to the certificate and must not be
      freed by the application. Applications that want to retain access to
      the certificate can call <citerefentry>
      <refentrytitle>X509_up_ref</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> to obtain a long-term reference which must then be
      freed via <citerefentry> <refentrytitle>X509_free</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> once no longer needed.
    </para>
    <para>
      If no TLSA records directly matched any elements of the certificate
      chain, but a DANE-TA(2) SPKI(1) Full(0) record provided the public
      key that signed an element of the chain, then that key is returned
      via <emphasis role="bold">mspki</emphasis> argument (if not NULL). In
      this case the return value is the depth of the top-most element of
      the validated certificate chain. As with <emphasis role="bold">mcert</emphasis> this is a short-term internal reference,
      and <citerefentry> <refentrytitle>EVP_PKEY_up_ref</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> and <citerefentry>
      <refentrytitle>EVP_PKEY_free</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> can be used to acquire and release long-term
      references respectively.
    </para>
    <para>
      SSL_get0_dane_tlsa() can be used to retrieve the fields of the TLSA
      record that matched the peer certificate chain. The return value
      indicates the match depth or failure to match just as with
      SSL_get0_dane_authority(). When the return value is non-negative, the
      storage pointed to by the <emphasis role="bold">usage</emphasis>,
      <emphasis role="bold">selector</emphasis>, <emphasis role="bold">mtype</emphasis> and <emphasis role="bold">data</emphasis> parameters is updated to the
      corresponding TLSA record fields. The <emphasis role="bold">data</emphasis> field is in binary wire form, and is
      therefore not NUL-terminated, its length is returned via the
      <emphasis role="bold">dlen</emphasis> parameter. If any of these
      parameters is NULL, the corresponding field is not returned. The
      <emphasis role="bold">data</emphasis> parameter is set to a
      short-term internal-copy of the associated data field and must not be
      freed by the application. Applications that need long-term access to
      this field need to copy the content.
    </para>
  </refsection>
  <refsection xml:id="ID-895826caef40067212fe543b7ba169f7"><title>RETURN VALUES</title>
    <para>
      The functions SSL_CTX_dane_enable(), SSL_CTX_dane_mtype_set(),
      SSL_dane_enable() and SSL_dane_tlsa_add() return a positive value on
      success. Negative return values indicate resource problems (out of
      memory, etc.) in the SSL library, while a return value of <emphasis role="bold">0</emphasis> indicates incorrect usage or invalid input,
      such as an unsupported TLSA record certificate usage, selector or
      matching type. Invalid input also includes malformed data, either a
      digest length that does not match the digest algorithm, or a <literal role="code">Full(0)</literal> (binary ASN.1 DER form)
      certificate or a public key that fails to parse.
    </para>
    <para>
      The functions SSL_get0_dane_authority() and SSL_get0_dane_tlsa()
      return a negative value when DANE authentication failed or was not
      enabled, a non-negative value indicates the chain depth at which the
      TLSA record matched a chain certificate, or the depth of the top-most
      certificate, when the TLSA record is a full public key that is its
      signer.
    </para>
  </refsection>
  <refsection xml:id="ID-e65e618aae2c5e817b60ed6d4c0b6e02"><title>EXAMPLE</title>
    <para>
      Suppose "smtp.example.com" is the MX host of the domain
      "example.com", and has DNSSEC-validated TLSA records. The calls below
      will perform DANE authentication and arrange to match either the MX
      hostname or the destination domain name in the SMTP server
      certificate. Wildcards are supported, but must match the entire
      label. The actual name matched in the certificate (which might be a
      wildcard) is retrieved, and must be copied by the application if it
      is to be retained beyond the lifetime of the SSL connection.
    </para>
    <screen>SSL_CTX *ctx;
SSL *ssl;
int num_usable = 0;
const char *nexthop_domain = "example.com";
const char *dane_tlsa_domain = "smtp.example.com";
uint8_t usage, selector, mtype;

if ((ctx = SSL_CTX_new(TLS_client_method())) == NULL)
  /* handle error */
if (SSL_CTX_dane_enable(ctx) &lt;= 0)
  /* handle error */

if ((ssl = SSL_new(ctx)) == NULL)
  /* handle error */

if (SSL_dane_enable(ssl, dane_tlsa_domain) &lt;= 0)
  /* handle error */
if (!SSL_add1_host(ssl, nexthop_domain))
  /* handle error */
SSL_set_hostflags(ssl, X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);

for (... each TLSA record ...) {
  unsigned char *data;
  size_t len;
  int ret;

/* set usage, selector, mtype, data, len */

/* Opportunistic DANE TLS clients treat usages 0, 1 as unusable. */
switch (usage) {
case 0:     /* PKIX-TA(0) */
case 1:     /* PKIX-EE(1) */
    continue;
}

ret = SSL_dane_tlsa_add(ssl, usage, selector, mtype, data, len);
/* free data as appropriate */

  if (ret &lt; 0)
      /* handle SSL library internal error */
  else if (ret == 0)
      /* handle unusable TLSA record */
  else
    ++num_usable;
}

/*
 * Opportunistic DANE clients use unauthenticated TLS when all TLSA records
 * are unusable, so continue the handshake even if authentication fails.
 */
if (num_usable == 0) {
  int (*cb)(int ok, X509_STORE_CTX *sctx) = NULL;

/* Log all records unusable? */
/* Set cb to a non-NULL callback of your choice? */

  SSL_set_verify(ssl, SSL_VERIFY_NONE, cb);
}

/* Perform SSL_connect() handshake and handle errors here */

if (SSL_get_verify_result(ssl) == X509_V_OK) {
  const char *peername = SSL_get0_peername(ssl);
  EVP_PKEY *mspki = NULL;

  int depth = SSL_get0_dane_authority(ssl, NULL, &amp;mspki);
  if (depth &gt;= 0) {
      (void) SSL_get0_dane_tlsa(ssl, &amp;usage, &amp;selector, &amp;mtype, NULL, NULL);
      printf("DANE TLSA %d %d %d %s at depth %d\n", usage, selector, mtype,
             (mspki != NULL) ? "TA public key verified certificate" :
             depth ? "matched TA certificate" : "matched EE certificate",
             depth);
  }
  if (peername != NULL) {
    /* Name checks were in scope and matched the peername */
    printf(bio, "Verified peername: %s\n", peername);
  }
} else {
  /*
   * Not authenticated, presumably all TLSA rrs unusable, but possibly a
   * callback suppressed connection termination despite presence of TLSA
   * usable RRs none of which matched.  Do whatever is appropriate for
   * unauthenticated connections.
   */
}</screen>
  </refsection>
  <refsection xml:id="ID-b591e03b73bf3dd432e0c699841d079b"><title>NOTES</title>
    <para>
      It is expected that the majority of clients employing DANE TLS will
      be doing "opportunistic DANE TLS" in the sense of RFC7672 and
      RFC7435. That is, they will use DANE authentication when
      DNSSEC-validated TLSA records are published for a given peer, and
      otherwise will use unauthenticated TLS or even cleartext.
    </para>
    <para>
      Such applications should generally treat any TLSA records published
      by the peer with usages PKIX-TA(0) and PKIX-EE(1) as "unusable", and
      should not include them among the TLSA records used to authenticate
      peer connections. In addition, some TLSA records with supported
      usages may be "unusable" as a result of invalid or unsupported
      parameters.
    </para>
    <para>
      When a peer has TLSA records, but none are "usable",  an
      opportunistic application must avoid cleartext, but cannot
      authenticate the peer, and so should generally proceed with an
      unauthenticated connection. Opportunistic applications need to note
      the return value of each call to SSL_dane_tlsa_add(), and if all
      return 0 (due to invalid or unsupported parameters) disable peer
      authentication by calling <citerefentry>
      <refentrytitle>SSL_set_verify</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> with <emphasis role="bold">mode</emphasis> equal to <emphasis role="bold">SSL_VERIFY_NONE</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-4840b66ca9c28d28286a5461d3eaf92c"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>SSL_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_add1_host</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_hostflags</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_tlsext_host_name</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_verify</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_cert_verify_callback</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_verify_cert</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_connect</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get0_peername</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_get_digestbyname</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_up_ref</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>X509_free</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_up_ref</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_PKEY_free</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-9c77dcde1ee926aacaea141803906cdd"><title>HISTORY</title>
    <para>
      These functions were first added to OpenSSL 1.1.0.
    </para>
  </refsection>
</refentry>