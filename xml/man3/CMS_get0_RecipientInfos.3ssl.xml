<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>CMS_get0_RecipientInfos.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>CMS_get0_RecipientInfos, CMS_RecipientInfo_type, CMS_RecipientInfo_ktri_get0_signer_id,CMS_RecipientInfo_ktri_cert_cmp, CMS_RecipientInfo_set0_pkey, CMS_RecipientInfo_kekri_get0_id, CMS_RecipientInfo_kekri_id_cmp, CMS_RecipientInfo_set0_key, CMS_RecipientInfo_decrypt, CMS_RecipientInfo_encrypt</refname>
<refpurpose>CMS envelopedData RecipientInfo routines</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/cms.h&gt;</synopsis>
<synopsis>STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms);
int CMS_RecipientInfo_type(CMS_RecipientInfo *ri);</synopsis>
<synopsis>int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri, ASN1_OCTET_STRING **keyid, X509_NAME **issuer, ASN1_INTEGER **sno);
int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert);
int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey);</synopsis>
<synopsis>int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri, X509_ALGOR **palg, ASN1_OCTET_STRING **pid, ASN1_GENERALIZEDTIME **pdate, ASN1_OBJECT **potherid, ASN1_TYPE **pothertype);
int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri, const unsigned char *id, size_t idlen);
int CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri, unsigned char *key, size_t keylen);</synopsis>
<synopsis>int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
int CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-b358a19c3ba135aba1d7e6196d308fd4"><title>DESCRIPTION</title>
    <para>
      The function CMS_get0_RecipientInfos() returns all the
      CMS_RecipientInfo structures associated with a CMS EnvelopedData
      structure.
    </para>
    <para>
      CMS_RecipientInfo_type() returns the type of CMS_RecipientInfo
      structure <emphasis role="bold">ri</emphasis>. It will currently
      return CMS_RECIPINFO_TRANS, CMS_RECIPINFO_AGREE, CMS_RECIPINFO_KEK,
      CMS_RECIPINFO_PASS, or CMS_RECIPINFO_OTHER.
    </para>
    <para>
      CMS_RecipientInfo_ktri_get0_signer_id() retrieves the certificate
      recipient identifier associated with a specific CMS_RecipientInfo
      structure <emphasis role="bold">ri</emphasis>, which must be of type
      CMS_RECIPINFO_TRANS. Either the keyidentifier will be set in
      <emphasis role="bold">keyid</emphasis> or <emphasis role="bold">both</emphasis> issuer name and serial number in
      <emphasis role="bold">issuer</emphasis> and <emphasis role="bold">sno</emphasis>.
    </para>
    <para>
      CMS_RecipientInfo_ktri_cert_cmp() compares the certificate <emphasis role="bold">cert</emphasis> against the CMS_RecipientInfo structure
      <emphasis role="bold">ri</emphasis>, which must be of type
      CMS_RECIPINFO_TRANS. It returns zero if the comparison is successful
      and non zero if not.
    </para>
    <para>
      CMS_RecipientInfo_set0_pkey() associates the private key <emphasis role="bold">pkey</emphasis> with the CMS_RecipientInfo structure
      <emphasis role="bold">ri</emphasis>, which must be of type
      CMS_RECIPINFO_TRANS.
    </para>
    <para>
      CMS_RecipientInfo_kekri_get0_id() retrieves the key information from
      the CMS_RecipientInfo structure <emphasis role="bold">ri</emphasis>
      which must be of type CMS_RECIPINFO_KEK.	Any of the remaining
      parameters can be NULL if the application is not interested in the
      value of a field. Where a field is optional and absent NULL will be
      written to the corresponding parameter. The keyEncryptionAlgorithm
      field is written to <emphasis role="bold">palg</emphasis>, the
      <emphasis role="bold">keyIdentifier</emphasis> field is written to
      <emphasis role="bold">pid</emphasis>, the <emphasis role="bold">date</emphasis> field if present is written to <emphasis role="bold">pdate</emphasis>, if the <emphasis role="bold">other</emphasis> field is present the components
      <emphasis role="bold">keyAttrId</emphasis> and <emphasis role="bold">keyAttr</emphasis> are written to parameters <emphasis role="bold">potherid</emphasis> and <emphasis role="bold">pothertype</emphasis>.
    </para>
    <para>
      CMS_RecipientInfo_kekri_id_cmp() compares the ID in the <emphasis role="bold">id</emphasis> and <emphasis role="bold">idlen</emphasis>
      parameters against the <emphasis role="bold">keyIdentifier</emphasis>
      CMS_RecipientInfo structure <emphasis role="bold">ri</emphasis>,
      which must be of type CMS_RECIPINFO_KEK.	It returns zero if the
      comparison is successful and non zero if not.
    </para>
    <para>
      CMS_RecipientInfo_set0_key() associates the symmetric key <emphasis role="bold">key</emphasis> of length <emphasis role="bold">keylen</emphasis> with the CMS_RecipientInfo structure
      <emphasis role="bold">ri</emphasis>, which must be of type
      CMS_RECIPINFO_KEK.
    </para>
    <para>
      CMS_RecipientInfo_decrypt() attempts to decrypt CMS_RecipientInfo
      structure <emphasis role="bold">ri</emphasis> in structure <emphasis role="bold">cms</emphasis>. A key must have been associated with the
      structure first.
    </para>
    <para>
      CMS_RecipientInfo_encrypt() attempts to encrypt CMS_RecipientInfo
      structure <emphasis role="bold">ri</emphasis> in structure <emphasis role="bold">cms</emphasis>. A key must have been associated with the
      structure first and the content encryption key must be available: for
      example by a previous call to CMS_RecipientInfo_decrypt().
    </para>
  </refsection>
  <refsection xml:id="ID-98c039e6fc691a25683b06b1fe5c3059"><title>NOTES</title>
    <para>
      The main purpose of these functions is to enable an application to
      lookup recipient keys using any appropriate technique when the
      simpler method of CMS_decrypt() is not appropriate.
    </para>
    <para>
      In typical usage and application will retrieve all CMS_RecipientInfo
      structures using CMS_get0_RecipientInfos() and check the type of each
      using CMS_RecpientInfo_type(). Depending on the type the
      CMS_RecipientInfo structure can be ignored or its key identifier data
      retrieved using an appropriate function. Then if the corresponding
      secret or private key can be obtained by any appropriate means it can
      then associated with the structure and CMS_RecpientInfo_decrypt()
      called. If successful CMS_decrypt() can be called with a NULL key to
      decrypt the enveloped content.
    </para>
    <para>
      The CMS_RecipientInfo_encrypt() can be used to add a new recipient to
      an existing enveloped data structure. Typically an application will
      first decrypt an appropriate CMS_RecipientInfo structure to make the
      content encrypt key available, it will then add a new recipient using
      a function such as CMS_add1_recipient_cert() and finally encrypt the
      content encryption key using CMS_RecipientInfo_encrypt().
    </para>
  </refsection>
  <refsection xml:id="ID-7a92d1991d3d8ea4ae160f1d581f9035"><title>RETURN VALUES</title>
    <para>
      CMS_get0_RecipientInfos() returns all CMS_RecipientInfo structures,
      or NULL if an error occurs.
    </para>
    <para>
      CMS_RecipientInfo_ktri_get0_signer_id(),
      CMS_RecipientInfo_set0_pkey(), CMS_RecipientInfo_kekri_get0_id(),
      CMS_RecipientInfo_set0_key() and CMS_RecipientInfo_decrypt() return 1
      for success or 0 if an error occurs. CMS_RecipientInfo_encrypt()
      return 1 for success or 0 if an error occurs.
    </para>
    <para>
      CMS_RecipientInfo_ktri_cert_cmp() and CMS_RecipientInfo_kekri_cmp()
      return 0 for a successful comparison and non zero otherwise.
    </para>
    <para>
      Any error can be obtained from <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-4a1e371873e2835dddc290d218e21062"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ERR_get_error</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>CMS_decrypt</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-2806075fc952ec730791c5152f77ac23"><title>COPYRIGHT</title>
    <para>
      Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>