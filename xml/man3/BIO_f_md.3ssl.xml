<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_f_md.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_f_md, BIO_set_md, BIO_get_md, BIO_get_md_ctx</refname>
<refpurpose>message digest BIO filter</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bio.h&gt;
#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis>const BIO_METHOD *     BIO_f_md(void);
int BIO_set_md(BIO *b,EVP_MD *md);
int BIO_get_md(BIO *b,EVP_MD **mdp);
int BIO_get_md_ctx(BIO *b,EVP_MD_CTX **mdcp);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-8431a763e51cb17c89e1d3d62320acdb"><title>DESCRIPTION</title>
    <para>
      BIO_f_md() returns the message digest BIO method. This is a filter
      BIO that digests any data passed through it, it is a BIO wrapper for
      the digest routines EVP_DigestInit(), EVP_DigestUpdate() and
      EVP_DigestFinal().
    </para>
    <para>
      Any data written or read through a digest BIO using BIO_read() and
      BIO_write() is digested.
    </para>
    <para>
      BIO_gets(), if its <emphasis role="bold">size</emphasis> parameter is
      large enough finishes the digest calculation and returns the digest
      value. BIO_puts() is not supported.
    </para>
    <para>
      BIO_reset() reinitialises a digest BIO.
    </para>
    <para>
      BIO_set_md() sets the message digest of BIO <emphasis role="bold">b</emphasis> to <emphasis role="bold">md</emphasis>: this
      must be called to initialize a digest BIO before any data is passed
      through it. It is a BIO_ctrl() macro.
    </para>
    <para>
      BIO_get_md() places the a pointer to the digest BIOs digest method in
      <emphasis role="bold">mdp</emphasis>, it is a BIO_ctrl() macro.
    </para>
    <para>
      BIO_get_md_ctx() returns the digest BIOs context into <emphasis role="bold">mdcp</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-a2c9d8a973a72d5b6e1c5714f7d7b4f7"><title>NOTES</title>
    <para>
      The context returned by BIO_get_md_ctx() can be used in calls to
      EVP_DigestFinal() and also the signature routines EVP_SignFinal() and
      EVP_VerifyFinal().
    </para>
    <para>
      The context returned by BIO_get_md_ctx() is an internal context
      structure. Changes made to this context will affect the digest BIO
      itself and the context pointer will become invalid when the digest
      BIO is freed.
    </para>
    <para>
      After the digest has been retrieved from a digest BIO it must be
      reinitialized by calling BIO_reset(), or BIO_set_md() before any more
      data is passed through it.
    </para>
    <para>
      If an application needs to call BIO_gets() or BIO_puts() through a
      chain containing digest BIOs then this can be done by prepending a
      buffering BIO.
    </para>
    <para>
      Calling BIO_get_md_ctx() will return the context and initialize the
      BIO state. This allows applications to initialize the context
      externally if the standard calls such as BIO_set_md() are not
      sufficiently flexible.
    </para>
  </refsection>
  <refsection xml:id="ID-4a0bcf1dc4a04436cfa0033b07c32e42"><title>RETURN VALUES</title>
    <para>
      BIO_f_md() returns the digest BIO method.
    </para>
    <para>
      BIO_set_md(), BIO_get_md() and BIO_md_ctx() return 1 for success and
      0 for failure.
    </para>
  </refsection>
  <refsection xml:id="ID-4745ee0604f03d1fdd5c628517f98e70"><title>EXAMPLES</title>
    <para>
      The following example creates a BIO chain containing an SHA1 and MD5
      digest BIO and passes the string "Hello World" through it. Error
      checking has been omitted for clarity.
    </para>
    <screen>BIO *bio, *mdtmp;
char message[] = "Hello World";
bio = BIO_new(BIO_s_null());
mdtmp = BIO_new(BIO_f_md());
BIO_set_md(mdtmp, EVP_sha1());
/* For BIO_push() we want to append the sink BIO and keep a note of
 * the start of the chain.
 */
bio = BIO_push(mdtmp, bio);
mdtmp = BIO_new(BIO_f_md());
BIO_set_md(mdtmp, EVP_md5());
bio = BIO_push(mdtmp, bio);
/* Note: mdtmp can now be discarded */
BIO_write(bio, message, strlen(message));</screen>
    <para>
      The next example digests data by reading through a chain instead:
    </para>
    <screen>BIO *bio, *mdtmp;
char buf[1024];
int rdlen;
bio = BIO_new_file(file, "rb");
mdtmp = BIO_new(BIO_f_md());
BIO_set_md(mdtmp, EVP_sha1());
bio = BIO_push(mdtmp, bio);
mdtmp = BIO_new(BIO_f_md());
BIO_set_md(mdtmp, EVP_md5());
bio = BIO_push(mdtmp, bio);
do {
       rdlen = BIO_read(bio, buf, sizeof(buf));
       /* Might want to do something with the data here */
} while(rdlen &gt; 0);</screen>
    <para>
      This next example retrieves the message digests from a BIO chain and
      outputs them. This could be used with the examples above.
    </para>
    <screen>BIO *mdtmp;
unsigned char mdbuf[EVP_MAX_MD_SIZE];
int mdlen;
int i;
mdtmp = bio;   /* Assume bio has previously been set up */
do {
       EVP_MD *md;
       mdtmp = BIO_find_type(mdtmp, BIO_TYPE_MD);
       if(!mdtmp) break;
       BIO_get_md(mdtmp, &amp;md);
       printf("%s digest", OBJ_nid2sn(EVP_MD_type(md)));
       mdlen = BIO_gets(mdtmp, mdbuf, EVP_MAX_MD_SIZE);
       for(i = 0; i &lt; mdlen; i++) printf(":%02X", mdbuf[i]);
       printf("\n");
       mdtmp = BIO_next(mdtmp);
} while(mdtmp);

BIO_free_all(bio);</screen>
  </refsection>
  <refsection xml:id="ID-24431df29bd4dcc0044de320f8cb9c7d"><title>BUGS</title>
    <para>
      The lack of support for BIO_puts() and the non standard behaviour of
      BIO_gets() could be regarded as anomalous. It could be argued that
      BIO_gets() and BIO_puts() should be passed to the next BIO in the
      chain and digest the data passed through and that digests should be
      retrieved using a separate BIO_ctrl() call.
    </para>
  </refsection>
  <refsection xml:id="ID-adc261d265ccf3329234a61b6aaf7da4"><title>HISTORY</title>
    <para>
      Before OpenSSL 1.0.0., the call to BIO_get_md_ctx() would only work
      if the BIO was initialized first.
    </para>
  </refsection>
  <refsection xml:id="ID-6c14f5e308014b13fb574fbd92ea05fb"><title>SEE ALSO</title>
    <para>
      TBA
    </para>
  </refsection>
</refentry>