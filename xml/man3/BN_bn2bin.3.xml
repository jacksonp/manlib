<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BN_bn2bin.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BN_bn2bin, BN_bin2bn, BN_bn2hex, BN_bn2dec, BN_hex2bn, BN_dec2bn,
BN_print, BN_print_fp, BN_bn2mpi, BN_mpi2bn</refname>
<refpurpose>format conversions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis format="linespecific">int BN_bn2bin(const BIGNUM *a, unsigned char *to);
BIGNUM *BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret);</synopsis>
<synopsis format="linespecific">char *BN_bn2hex(const BIGNUM *a);
char *BN_bn2dec(const BIGNUM *a);
int BN_hex2bn(BIGNUM **a, const char *str);
int BN_dec2bn(BIGNUM **a, const char *str);</synopsis>
<synopsis format="linespecific">int BN_print(BIO *fp, const BIGNUM *a);
int BN_print_fp(FILE *fp, const BIGNUM *a);</synopsis>
<synopsis format="linespecific">int BN_bn2mpi(const BIGNUM *a, unsigned char *to);
BIGNUM *BN_mpi2bn(unsigned char *s, int len, BIGNUM *ret);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.BN_bn2bin.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      BN_bn2bin() converts the absolute value of <emphasis role="bold">a</emphasis> into big-endian form and stores it at
      <emphasis role="bold">to</emphasis>. <emphasis role="bold">to</emphasis> must point to BN_num_bytes(<emphasis role="bold">a</emphasis>) bytes of memory.
    </para>
    <para>
      BN_bin2bn() converts the positive integer in big-endian form of
      length <emphasis role="bold">len</emphasis> at <emphasis role="bold">s</emphasis> into a <emphasis role="bold">BIGNUM</emphasis> and places it in <emphasis role="bold">ret</emphasis>. If <emphasis role="bold">ret</emphasis>
      is NULL, a new <emphasis role="bold">BIGNUM</emphasis> is created.
    </para>
    <para>
      BN_bn2hex() and BN_bn2dec() return printable strings containing the
      hexadecimal and decimal encoding of <emphasis role="bold">a</emphasis> respectively. For negative numbers, the
      string is prefaced with a leading '-'. The string must be freed later
      using OPENSSL_free().
    </para>
    <para>
      BN_hex2bn() converts the string <emphasis role="bold">str</emphasis>
      containing a hexadecimal number to a <emphasis role="bold">BIGNUM</emphasis> and stores it in **<emphasis role="bold">bn</emphasis>. If *<emphasis role="bold">bn</emphasis> is
      NULL, a new <emphasis role="bold">BIGNUM</emphasis> is created. If
      <emphasis role="bold">bn</emphasis> is NULL, it only computes the
      number's length in hexadecimal digits. If the string starts with '-',
      the number is negative. BN_dec2bn() is the same using the decimal
      system.
    </para>
    <para>
      BN_print() and BN_print_fp() write the hexadecimal encoding of
      <emphasis role="bold">a</emphasis>, with a leading '-' for negative
      numbers, to the <emphasis role="bold">BIO</emphasis> or <emphasis role="bold">FILE</emphasis> <emphasis role="bold">fp</emphasis>.
    </para>
    <para>
      BN_bn2mpi() and BN_mpi2bn() convert <emphasis role="bold">BIGNUM</emphasis>s from and to a format that consists of
      the number's length in bytes represented as a 4-byte big-endian
      number, and the number itself in big-endian format, where the most
      significant bit signals a negative number (the representation of
      numbers with the MSB set is prefixed with null byte).
    </para>
    <para>
      BN_bn2mpi() stores the representation of <emphasis role="bold">a</emphasis> at <emphasis role="bold">to</emphasis>,
      where <emphasis role="bold">to</emphasis> must be large enough to
      hold the result. The size can be determined by calling
      BN_bn2mpi(<emphasis role="bold">a</emphasis>, NULL).
    </para>
    <para>
      BN_mpi2bn() converts the <emphasis role="bold">len</emphasis> bytes
      long representation at <emphasis role="bold">s</emphasis> to a
      <emphasis role="bold">BIGNUM</emphasis> and stores it at <emphasis role="bold">ret</emphasis>, or in a newly allocated <emphasis role="bold">BIGNUM</emphasis> if <emphasis role="bold">ret</emphasis>
      is NULL.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BN_bn2bin.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      BN_bn2bin() returns the length of the big-endian number placed at
      <emphasis role="bold">to</emphasis>. BN_bin2bn() returns the
      <emphasis role="bold">BIGNUM</emphasis>, NULL on error.
    </para>
    <para>
      BN_bn2hex() and BN_bn2dec() return a null-terminated string, or NULL
      on error. BN_hex2bn() and BN_dec2bn() return the number's length in
      hexadecimal or decimal digits, and 0 on error.
    </para>
    <para>
      BN_print_fp() and BN_print() return 1 on success, 0 on write errors.
    </para>
    <para>
      BN_bn2mpi() returns the length of the representation. BN_mpi2bn()
      returns the <emphasis role="bold">BIGNUM</emphasis>, and NULL on
      error.
    </para>
    <para>
      The error codes can be obtained by ERR_get_error(3).
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BN_bn2bin.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      bn(3), ERR_get_error(3), BN_zero(3), ASN1_INTEGER_to_BN(3),
      BN_num_bytes(3)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BN_bn2bin.pod:HISTORY"><title>HISTORY</title>
    <para>
      BN_bn2bin(), BN_bin2bn(), BN_print_fp() and BN_print() are available
      in all versions of SSLeay and OpenSSL.
    </para>
    <para>
      BN_bn2hex(), BN_bn2dec(), BN_hex2bn(), BN_dec2bn(), BN_bn2mpi() and
      BN_mpi2bn() were added in SSLeay 0.9.0.
    </para>
  </refsection>
</refentry>