<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>ssl.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL</refname>
<refpurpose>OpenSSL SSL/TLS library</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis/>
  </refsynopsisdiv>
  <refsection xml:id="ID-1e1e5438af893b1a5fe317bcffd31962"><title>DESCRIPTION</title>
    <para>
      The OpenSSL <emphasis role="bold">ssl</emphasis> library implements
      the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security
      (TLS v1) protocols. It provides a rich API which is documented here.
    </para>
    <para>
      At first the library must be initialized; see <citerefentry>
      <refentrytitle>SSL_library_init</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
    <para>
      Then an <emphasis role="bold">SSL_CTX</emphasis> object is created as
      a framework to establish TLS/SSL enabled connections (see
      <citerefentry> <refentrytitle>SSL_CTX_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>). Various options regarding
      certificates, algorithms etc. can be set in this object.
    </para>
    <para>
      When a network connection has been created, it can be assigned to an
      <emphasis role="bold">SSL</emphasis> object. After the <emphasis role="bold">SSL</emphasis> object has been created using
      <citerefentry> <refentrytitle>SSL_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_fd</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> or <citerefentry>
      <refentrytitle>SSL_set_bio</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> can be used to associate the network connection with
      the object.
    </para>
    <para>
      Then the TLS/SSL handshake is performed using <citerefentry>
      <refentrytitle>SSL_accept</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> or <citerefentry>
      <refentrytitle>SSL_connect</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> respectively. <citerefentry>
      <refentrytitle>SSL_read</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> and <citerefentry>
      <refentrytitle>SSL_write</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> are used to read and write data on the TLS/SSL
      connection. <citerefentry>
      <refentrytitle>SSL_shutdown</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> can be used to shut down the TLS/SSL connection.
    </para>
  </refsection>
  <refsection xml:id="ID-1c5fc8143c498120b5afe0d34ecb8e46"><title>DATA STRUCTURES</title>
    <para>
      Currently the OpenSSL <emphasis role="bold">ssl</emphasis> library
      functions deals with the following data structures:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">SSL_METHOD</emphasis> (SSL Method)</term>
          <listitem>
            <para>
	      That's a dispatch structure describing the internal <emphasis role="bold">ssl</emphasis> library methods/functions which
	      implement the various protocol versions (SSLv3 TLSv1, ...).
	      It's needed to create an <emphasis role="bold">SSL_CTX</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">SSL_CIPHER</emphasis> (SSL Cipher)</term>
          <listitem>
            <para>
	      This structure holds the algorithm information for a
	      particular cipher which are a core part of the SSL/TLS
	      protocol. The available ciphers are configured on a <emphasis role="bold">SSL_CTX</emphasis> basis and the actually used
	      ones are then part of the <emphasis role="bold">SSL_SESSION</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">SSL_CTX</emphasis> (SSL Context)</term>
          <listitem>
            <para>
	      That's the global context structure which is created by a
	      server or client once per program life-time and which holds
	      mainly default values for the <emphasis role="bold">SSL</emphasis> structures which are later created
	      for the connections.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">SSL_SESSION</emphasis> (SSL Session)</term>
          <listitem>
            <para>
	      This is a structure containing the current TLS/SSL session
	      details for a connection: <emphasis role="bold">SSL_CIPHER</emphasis>s, client and server
	      certificates, keys, etc.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">SSL</emphasis> (SSL Connection)</term>
          <listitem>
            <para>
	      That's the main SSL/TLS structure which is created by a
	      server or client per established connection. This actually is
	      the core structure in the SSL API. Under run-time the
	      application usually deals with this structure which has links
	      to mostly all other structures.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <screen></screen>
  </refsection>
  <refsection xml:id="ID-8df1590957be23fd0e5497cbf2cb0f3c"><title>HEADER FILES</title>
    <para>
      Currently the OpenSSL <emphasis role="bold">ssl</emphasis> library
      provides the following C header files containing the prototypes for
      the data structures and and functions:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">ssl.h</emphasis></term>
          <listitem>
            <para>
	      That's the common header file for the SSL/TLS API.  Include
	      it into your program to make the API of the <emphasis role="bold">ssl</emphasis> library available. It internally
	      includes both more private SSL headers and headers from the
	      <emphasis role="bold">crypto</emphasis> library. Whenever you
	      need hard-core details on the internals of the SSL API, look
	      inside this header file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">ssl2.h</emphasis></term>
          <listitem>
            <para>
	      Unused. Present for backwards compatibility only.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">ssl3.h</emphasis></term>
          <listitem>
            <para>
	      That's the sub header file dealing with the SSLv3 protocol
	      only. <emphasis role="italic">Usually you don't have to
	      include it explicitly because it's already included by
	      ssl.h</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">tls1.h</emphasis></term>
          <listitem>
            <para>
	      That's the sub header file dealing with the TLSv1 protocol
	      only. <emphasis role="italic">Usually you don't have to
	      include it explicitly because it's already included by
	      ssl.h</emphasis>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-d7243cb3c4629966621f8bdec646660c"><title>API FUNCTIONS</title>
    <para>
      Currently the OpenSSL <emphasis role="bold">ssl</emphasis> library
      exports 214 API functions. They are documented in the following:
    </para>
    <refsection xml:id="ID-bb9058a7a893b7333ae0fcd595fac76a"><title>DEALING WITH PROTOCOL METHODS</title>
      <para>
	Here we document the various API functions which deal with the
	SSL/TLS protocol methods defined in <emphasis role="bold">SSL_METHOD</emphasis> structures.
      </para>
      <para>
        <variablelist>
          <varlistentry>
            <term>const SSL_METHOD *<emphasis role="bold">SSLv3_client_method</emphasis>(void);</term>
            <listitem>
              <para>
		Constructor for the SSLv3 SSL_METHOD structure for a
		dedicated client.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>const SSL_METHOD *<emphasis role="bold">SSLv3_server_method</emphasis>(void);</term>
            <listitem>
              <para>
		Constructor for the SSLv3 SSL_METHOD structure for a
		dedicated server.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>const SSL_METHOD *<emphasis role="bold">SSLv3_method</emphasis>(void);</term>
            <listitem>
              <para>
		Constructor for the SSLv3 SSL_METHOD structure for combined
		client and server.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>const SSL_METHOD *<emphasis role="bold">TLSv1_client_method</emphasis>(void);</term>
            <listitem>
              <para>
		Constructor for the TLSv1 SSL_METHOD structure for a
		dedicated client.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>const SSL_METHOD *<emphasis role="bold">TLSv1_server_method</emphasis>(void);</term>
            <listitem>
              <para>
		Constructor for the TLSv1 SSL_METHOD structure for a
		dedicated server.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>const SSL_METHOD *<emphasis role="bold">TLSv1_method</emphasis>(void);</term>
            <listitem>
              <para>
		Constructor for the TLSv1 SSL_METHOD structure for combined
		client and server.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </refsection>
    <refsection xml:id="ID-ae73a63baf0bde0c4687f80f718c4313"><title>DEALING WITH CIPHERS</title>
      <para>
	Here we document the various API functions which deal with the
	SSL/TLS ciphers defined in <emphasis role="bold">SSL_CIPHER</emphasis> structures.
      </para>
      <para>
        <variablelist>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_CIPHER_description</emphasis>(SSL_CIPHER *cipher, char *buf, int len);</term>
            <listitem>
              <para>
		Write a string to <emphasis role="italic">buf</emphasis>
		(with a maximum size of <emphasis role="italic">len</emphasis>) containing a human readable
		description of <emphasis role="italic">cipher</emphasis>.
		Returns <emphasis role="italic">buf</emphasis>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CIPHER_get_bits</emphasis>(SSL_CIPHER *cipher, int *alg_bits);</term>
            <listitem>
              <para>
		Determine the number of bits in <emphasis role="italic">cipher</emphasis>. Because of export crippled
		ciphers there are two bits: The bits the algorithm supports
		in general (stored to <emphasis role="italic">alg_bits</emphasis>) and the bits which are
		actually used (the return value).
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>const char *<emphasis role="bold">SSL_CIPHER_get_name</emphasis>(SSL_CIPHER *cipher);</term>
            <listitem>
              <para>
		Return the internal name of <emphasis role="italic">cipher</emphasis> as a string. These are the
		various strings defined by the <emphasis role="italic">SSL3_TXT_xxx</emphasis> and <emphasis role="italic">TLS1_TXT_xxx</emphasis> definitions in the
		header files.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_CIPHER_get_version</emphasis>(SSL_CIPHER *cipher);</term>
            <listitem>
              <para>
		Returns a string like "<literal role="code">SSLv3</literal>" or "<literal role="code">TLSv1.2</literal>" which indicates
		the SSL/TLS protocol version to which <emphasis role="italic">cipher</emphasis> belongs (i.e. where it was
		defined in the specification the first time).
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </refsection>
    <refsection xml:id="ID-c61502b6124f0b77d2b2d8846b24f502"><title>DEALING WITH PROTOCOL CONTEXTS</title>
      <para>
	Here we document the various API functions which deal with the
	SSL/TLS protocol context defined in the <emphasis role="bold">SSL_CTX</emphasis> structure.
      </para>
      <para>
        <variablelist>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_add_client_CA</emphasis>(SSL_CTX *ctx, X509 *x);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_CTX_add_extra_chain_cert</emphasis>(SSL_CTX *ctx, X509 *x509);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_add_session</emphasis>(SSL_CTX *ctx, SSL_SESSION *c);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_check_private_key</emphasis>(const SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_CTX_ctrl</emphasis>(SSL_CTX *ctx, int cmd, long larg, char *parg);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_flush_sessions</emphasis>(SSL_CTX *s, long t);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_free</emphasis>(SSL_CTX *a);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_CTX_get_app_data</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>X509_STORE *<emphasis role="bold">SSL_CTX_get_cert_store</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>STACK *<emphasis role="bold">SSL_CTX_get_client_CA_list</emphasis>(const SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int (*<emphasis role="bold">SSL_CTX_get_client_cert_cb</emphasis>(SSL_CTX *ctx))(SSL *ssl, X509 **x509, EVP_PKEY **pkey);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_get_default_read_ahead</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_CTX_get_ex_data</emphasis>(const SSL_CTX *s, int idx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_get_ex_new_index</emphasis>(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void (*<emphasis role="bold">SSL_CTX_get_info_callback</emphasis>(SSL_CTX *ctx))(SSL *ssl, int cb, int ret);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_get_quiet_shutdown</emphasis>(const SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_get_read_ahead</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_get_session_cache_mode</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_CTX_get_timeout</emphasis>(const SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int (*<emphasis role="bold">SSL_CTX_get_verify_callback</emphasis>(const SSL_CTX *ctx))(int ok, X509_STORE_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_get_verify_mode</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_load_verify_locations</emphasis>(SSL_CTX *ctx, char *CAfile, char *CApath);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_CTX_need_tmp_RSA</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSL_CTX *<emphasis role="bold">SSL_CTX_new</emphasis>(const SSL_METHOD *meth);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_remove_session</emphasis>(SSL_CTX *ctx, SSL_SESSION *c);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_accept</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_accept_good</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_accept_renegotiate</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_cache_full</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_cb_hits</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_connect</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_connect_good</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_connect_renegotiate</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_get_cache_size</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSL_SESSION *(*<emphasis role="bold">SSL_CTX_sess_get_get_cb</emphasis>(SSL_CTX *ctx))(SSL *ssl, unsigned char *data, int len, int *copy);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int (*<emphasis role="bold">SSL_CTX_sess_get_new_cb</emphasis>(SSL_CTX *ctx)(SSL *ssl, SSL_SESSION *sess);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void (*<emphasis role="bold">SSL_CTX_sess_get_remove_cb</emphasis>(SSL_CTX *ctx)(SSL_CTX *ctx, SSL_SESSION *sess);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_hits</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_misses</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_number</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_sess_set_cache_size</emphasis>(SSL_CTX *ctx,t);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_sess_set_get_cb</emphasis>(SSL_CTX *ctx, SSL_SESSION *(*cb)(SSL *ssl, unsigned char *data, int len, int *copy));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_sess_set_new_cb</emphasis>(SSL_CTX *ctx, int (*cb)(SSL *ssl, SSL_SESSION *sess));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_sess_set_remove_cb</emphasis>(SSL_CTX *ctx, void (*cb)(SSL_CTX *ctx, SSL_SESSION *sess));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_sess_timeouts</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>LHASH *<emphasis role="bold">SSL_CTX_sessions</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_app_data</emphasis>(SSL_CTX *ctx, void *arg);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_cert_store</emphasis>(SSL_CTX *ctx, X509_STORE *cs);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_cert_verify_cb</emphasis>(SSL_CTX *ctx, int (*cb)(), char *arg)</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_set_cipher_list</emphasis>(SSL_CTX *ctx, char *str);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_client_CA_list</emphasis>(SSL_CTX *ctx, STACK *list);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_client_cert_cb</emphasis>(SSL_CTX *ctx, int (*cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_default_passwd_cb</emphasis>(SSL_CTX *ctx, int (*cb);(void))</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_default_read_ahead</emphasis>(SSL_CTX *ctx, int m);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_set_default_verify_paths</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para>
		Use the default paths to locate trusted CA certificates.
		There is one default directory path and one default file
		path. Both are set via this call.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_set_default_verify_dir</emphasis>(SSL_CTX *ctx)</term>
            <listitem>
              <para>
		Use the default directory path to locate trusted CA
		certficates.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_set_default_verify_file</emphasis>(SSL_CTX *ctx)</term>
            <listitem>
              <para>
		Use the file path to locate trusted CA certficates.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_set_ex_data</emphasis>(SSL_CTX *s, int idx, char *arg);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_info_callback</emphasis>(SSL_CTX *ctx, void (*cb)(SSL *ssl, int cb, int ret));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_msg_callback</emphasis>(SSL_CTX *ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_msg_callback_arg</emphasis>(SSL_CTX *ctx, void *arg);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_options</emphasis>(SSL_CTX *ctx, unsigned long op);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_quiet_shutdown</emphasis>(SSL_CTX *ctx, int mode);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_read_ahead</emphasis>(SSL_CTX *ctx, int m);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_session_cache_mode</emphasis>(SSL_CTX *ctx, int mode);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_set_ssl_version</emphasis>(SSL_CTX *ctx, const SSL_METHOD *meth);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_timeout</emphasis>(SSL_CTX *ctx, long t);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_CTX_set_tmp_dh</emphasis>(SSL_CTX* ctx, DH *dh);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_CTX_set_tmp_dh_callback</emphasis>(SSL_CTX *ctx, DH *(*cb)(void));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_CTX_set_tmp_rsa</emphasis>(SSL_CTX *ctx, RSA *rsa);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSL_CTX_set_tmp_rsa_callback</term>
            <listitem>
              <para>
		<literal role="code">long &lt;emphasis
		role="bold"&gt;SSL_CTX_set_tmp_rsa_callback&lt;/emphasis&gt;(SSL_CTX
		*&lt;emphasis role="bold"&gt;ctx&lt;/emphasis&gt;, RSA *(*&lt;emphasis
		role="bold"&gt;cb&lt;/emphasis&gt;)(SSL *&lt;emphasis
		role="bold"&gt;ssl&lt;/emphasis&gt;, int &lt;emphasis
		role="bold"&gt;export&lt;/emphasis&gt;, int &lt;emphasis
		role="bold"&gt;keylength&lt;/emphasis&gt;));</literal>
              </para>
              <para>
		Sets the callback which will be called when a temporary
		private key is required. The <emphasis role="bold"><literal role="code">export</literal></emphasis> flag
		will be set if the reason for needing a temp key is that an
		export ciphersuite is in use, in which case, <emphasis role="bold"><literal role="code">keylength</literal></emphasis> will
		contain the required keylength in bits. Generate a key of
		appropriate size (using ???) and return it.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSL_set_tmp_rsa_callback</term>
            <listitem>
              <para>
		long <emphasis role="bold">SSL_set_tmp_rsa_callback</emphasis>(SSL *ssl,
		RSA *(*cb)(SSL *ssl, int export, int keylength));
              </para>
              <para>
		The same as <emphasis role="bold">SSL_CTX_set_tmp_rsa_callback</emphasis>, except
		it operates on an SSL session instead of a context.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_verify</emphasis>(SSL_CTX *ctx, int mode, int (*cb);(void))</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_use_PrivateKey</emphasis>(SSL_CTX *ctx, EVP_PKEY *pkey);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_use_PrivateKey_ASN1</emphasis>(int type, SSL_CTX *ctx, unsigned char *d, long len);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_use_PrivateKey_file</emphasis>(SSL_CTX *ctx, char *file, int type);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_use_RSAPrivateKey</emphasis>(SSL_CTX *ctx, RSA *rsa);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_use_RSAPrivateKey_ASN1</emphasis>(SSL_CTX *ctx, unsigned char *d, long len);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_use_RSAPrivateKey_file</emphasis>(SSL_CTX *ctx, char *file, int type);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_use_certificate</emphasis>(SSL_CTX *ctx, X509 *x);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_use_certificate_ASN1</emphasis>(SSL_CTX *ctx, int len, unsigned char *d);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_use_certificate_file</emphasis>(SSL_CTX *ctx, char *file, int type);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>X509 *<emphasis role="bold">SSL_CTX_get0_certificate</emphasis>(const SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>EVP_PKEY *<emphasis role="bold">SSL_CTX_get0_privatekey</emphasis>(const SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_psk_client_callback</emphasis>(SSL_CTX *ctx, unsigned int (*callback)(SSL *ssl, const char *hint, char *identity, unsigned int max_identity_len, unsigned char *psk, unsigned int max_psk_len));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_CTX_use_psk_identity_hint</emphasis>(SSL_CTX *ctx, const char *hint);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_CTX_set_psk_server_callback</emphasis>(SSL_CTX *ctx, unsigned int (*callback)(SSL *ssl, const char *identity, unsigned char *psk, int max_psk_len));</term>
            <listitem>
              <screen>



</screen>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </refsection>
    <refsection xml:id="ID-ce20c39088ff75ed145930f34112b932"><title>DEALING WITH SESSIONS</title>
      <para>
	Here we document the various API functions which deal with the
	SSL/TLS sessions defined in the <emphasis role="bold">SSL_SESSION</emphasis> structures.
      </para>
      <para>
        <variablelist>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_SESSION_cmp</emphasis>(const SSL_SESSION *a, const SSL_SESSION *b);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_SESSION_free</emphasis>(SSL_SESSION *ss);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_SESSION_get_app_data</emphasis>(SSL_SESSION *s);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_SESSION_get_ex_data</emphasis>(const SSL_SESSION *s, int idx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_SESSION_get_ex_new_index</emphasis>(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_SESSION_get_time</emphasis>(const SSL_SESSION *s);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_SESSION_get_timeout</emphasis>(const SSL_SESSION *s);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>unsigned long <emphasis role="bold">SSL_SESSION_hash</emphasis>(const SSL_SESSION *a);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSL_SESSION *<emphasis role="bold">SSL_SESSION_new</emphasis>(void);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_SESSION_print</emphasis>(BIO *bp, const SSL_SESSION *x);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_SESSION_print_fp</emphasis>(FILE *fp, const SSL_SESSION *x);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_SESSION_set_app_data</emphasis>(SSL_SESSION *s, char *a);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_SESSION_set_ex_data</emphasis>(SSL_SESSION *s, int idx, char *arg);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_SESSION_set_time</emphasis>(SSL_SESSION *s, long t);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_SESSION_set_timeout</emphasis>(SSL_SESSION *s, long t);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </refsection>
    <refsection xml:id="ID-9626d5773d644219266c825909995c62"><title>DEALING WITH CONNECTIONS</title>
      <para>
	Here we document the various API functions which deal with the
	SSL/TLS connection defined in the <emphasis role="bold">SSL</emphasis> structure.
      </para>
      <para>
        <variablelist>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_accept</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_add_dir_cert_subjects_to_stack</emphasis>(STACK *stack, const char *dir);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_add_file_cert_subjects_to_stack</emphasis>(STACK *stack, const char *file);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_add_client_CA</emphasis>(SSL *ssl, X509 *x);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_alert_desc_string</emphasis>(int value);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_alert_desc_string_long</emphasis>(int value);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_alert_type_string</emphasis>(int value);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_alert_type_string_long</emphasis>(int value);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_check_private_key</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_clear</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_clear_num_renegotiations</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_connect</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_copy_session_id</emphasis>(SSL *t, const SSL *f);</term>
            <listitem>
              <para>
		Sets the session details for <emphasis role="bold">t</emphasis> to be the same as in <emphasis role="bold">f</emphasis>. Returns 1 on success or 0 on
		failure.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_ctrl</emphasis>(SSL *ssl, int cmd, long larg, char *parg);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_do_handshake</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSL *<emphasis role="bold">SSL_dup</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>STACK *<emphasis role="bold">SSL_dup_CA_list</emphasis>(STACK *sk);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_free</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSL_CTX *<emphasis role="bold">SSL_get_SSL_CTX</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_get_app_data</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>X509 *<emphasis role="bold">SSL_get_certificate</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>const char *<emphasis role="bold">SSL_get_cipher</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_get_cipher_bits</emphasis>(const SSL *ssl, int *alg_bits);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_get_cipher_list</emphasis>(const SSL *ssl, int n);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_get_cipher_name</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_get_cipher_version</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>STACK *<emphasis role="bold">SSL_get_ciphers</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>STACK *<emphasis role="bold">SSL_get_client_CA_list</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSL_CIPHER *<emphasis role="bold">SSL_get_current_cipher</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_get_default_timeout</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_get_error</emphasis>(const SSL *ssl, int i);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_get_ex_data</emphasis>(const SSL *ssl, int idx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_get_ex_data_X509_STORE_CTX_idx</emphasis>(void);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_get_ex_new_index</emphasis>(long argl, char *argp, int (*new_func);(void), int (*dup_func)(void), void (*free_func)(void))</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_get_fd</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void (*<emphasis role="bold">SSL_get_info_callback</emphasis>(const SSL *ssl);)()</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>STACK *<emphasis role="bold">SSL_get_peer_cert_chain</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>X509 *<emphasis role="bold">SSL_get_peer_certificate</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>EVP_PKEY *<emphasis role="bold">SSL_get_privatekey</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_get_quiet_shutdown</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>BIO *<emphasis role="bold">SSL_get_rbio</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_get_read_ahead</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSL_SESSION *<emphasis role="bold">SSL_get_session</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_get_shared_ciphers</emphasis>(const SSL *ssl, char *buf, int len);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_get_shutdown</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>const SSL_METHOD *<emphasis role="bold">SSL_get_ssl_method</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_get_state</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_get_time</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_get_timeout</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int (*<emphasis role="bold">SSL_get_verify_callback</emphasis>(const SSL *ssl))(int,X509_STORE_CTX *)</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_get_verify_mode</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_get_verify_result</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_get_version</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>BIO *<emphasis role="bold">SSL_get_wbio</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_in_accept_init</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_in_before</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_in_connect_init</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_in_init</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_is_init_finished</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>STACK *<emphasis role="bold">SSL_load_client_CA_file</emphasis>(char *file);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_load_error_strings</emphasis>(void);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSL *<emphasis role="bold">SSL_new</emphasis>(SSL_CTX *ctx);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_num_renegotiations</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_peek</emphasis>(SSL *ssl, void *buf, int num);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_pending</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_read</emphasis>(SSL *ssl, void *buf, int num);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_renegotiate</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_rstate_string</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_rstate_string_long</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_session_reused</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_accept_state</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_app_data</emphasis>(SSL *ssl, char *arg);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_bio</emphasis>(SSL *ssl, BIO *rbio, BIO *wbio);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_set_cipher_list</emphasis>(SSL *ssl, char *str);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_client_CA_list</emphasis>(SSL *ssl, STACK *list);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_connect_state</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_set_ex_data</emphasis>(SSL *ssl, int idx, char *arg);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_set_fd</emphasis>(SSL *ssl, int fd);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_info_callback</emphasis>(SSL *ssl, void (*cb);(void))</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_msg_callback</emphasis>(SSL *ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_msg_callback_arg</emphasis>(SSL *ctx, void *arg);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_options</emphasis>(SSL *ssl, unsigned long op);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_quiet_shutdown</emphasis>(SSL *ssl, int mode);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_read_ahead</emphasis>(SSL *ssl, int yes);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_set_rfd</emphasis>(SSL *ssl, int fd);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_set_session</emphasis>(SSL *ssl, SSL_SESSION *session);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_shutdown</emphasis>(SSL *ssl, int mode);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_set_ssl_method</emphasis>(SSL *ssl, const SSL_METHOD *meth);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_time</emphasis>(SSL *ssl, long t);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_timeout</emphasis>(SSL *ssl, long t);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_verify</emphasis>(SSL *ssl, int mode, int (*callback);(void))</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_verify_result</emphasis>(SSL *ssl, long arg);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_set_wfd</emphasis>(SSL *ssl, int fd);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_shutdown</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>OSSL_HANDSHAKE_STATE <emphasis role="bold">SSL_get_state</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para>
		Returns the current handshake state.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_state_string</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>char *<emphasis role="bold">SSL_state_string_long</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>long <emphasis role="bold">SSL_total_renegotiations</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_use_PrivateKey</emphasis>(SSL *ssl, EVP_PKEY *pkey);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_use_PrivateKey_ASN1</emphasis>(int type, SSL *ssl, unsigned char *d, long len);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_use_PrivateKey_file</emphasis>(SSL *ssl, char *file, int type);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_use_RSAPrivateKey</emphasis>(SSL *ssl, RSA *rsa);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_use_RSAPrivateKey_ASN1</emphasis>(SSL *ssl, unsigned char *d, long len);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_use_RSAPrivateKey_file</emphasis>(SSL *ssl, char *file, int type);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_use_certificate</emphasis>(SSL *ssl, X509 *x);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_use_certificate_ASN1</emphasis>(SSL *ssl, int len, unsigned char *d);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_use_certificate_file</emphasis>(SSL *ssl, char *file, int type);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_version</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_want</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_want_nothing</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_want_read</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_want_write</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_want_x509_lookup</emphasis>(const SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_write</emphasis>(SSL *ssl, const void *buf, int num);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_psk_client_callback</emphasis>(SSL *ssl, unsigned int (*callback)(SSL *ssl, const char *hint, char *identity, unsigned int max_identity_len, unsigned char *psk, unsigned int max_psk_len));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>int <emphasis role="bold">SSL_use_psk_identity_hint</emphasis>(SSL *ssl, const char *hint);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>void <emphasis role="bold">SSL_set_psk_server_callback</emphasis>(SSL *ssl, unsigned int (*callback)(SSL *ssl, const char *identity, unsigned char *psk, int max_psk_len));</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>const char *<emphasis role="bold">SSL_get_psk_identity_hint</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>const char *<emphasis role="bold">SSL_get_psk_identity</emphasis>(SSL *ssl);</term>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </refsection>
  </refsection>
  <refsection xml:id="ID-ab8802a077896c0244262ea672e57d01"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>openssl</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>crypto</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_accept</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_clear</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_connect</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CIPHER_get_name</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_COMP_add_compression_method</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_add_extra_chain_cert</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_add_session</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_ctrl</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_flush_sessions</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_get_ex_new_index</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_get_verify_mode</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_load_verify_locations</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> <citerefentry>
      <refentrytitle>SSL_CTX_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_sess_number</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_sess_set_cache_size</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_sess_set_get_cb</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_sessions</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_cert_store</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_cert_verify_callback</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_cipher_list</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_client_CA_list</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_client_cert_cb</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_default_passwd_cb</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_generate_session_id</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_info_callback</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_max_cert_list</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_mode</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_msg_callback</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_options</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_quiet_shutdown</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_read_ahead</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_session_cache_mode</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_session_id_context</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_ssl_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_timeout</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_tmp_rsa_callback</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_tmp_dh_callback</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_verify</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_use_certificate</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_alert_type_string</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_do_handshake</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_SSL_CTX</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_ciphers</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_client_CA_list</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_default_timeout</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_ex_data_X509_STORE_CTX_idx</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_ex_new_index</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_fd</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_peer_cert_chain</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_rbio</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_session</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_verify_result</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_library_init</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_load_client_CA_file</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_pending</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_read</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_rstate_string</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_session_reused</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_bio</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_connect_state</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_fd</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_session</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_shutdown</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_shutdown</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_state_string</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_want</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_write</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_SESSION_free</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_SESSION_get_ex_new_index</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_SESSION_get_time</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>d2i_SSL_SESSION</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_psk_client_callback</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_use_psk_identity_hint</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_psk_identity</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, DTLSv1_listen(3)
    </para>
  </refsection>
  <refsection xml:id="ID-5ed13e58d2bcc046a9f798b0be082d1a"><title>HISTORY</title>
    <para>
      <emphasis role="bold">SSLv2_client_method</emphasis>, <emphasis role="bold">SSLv2_server_method</emphasis> and <emphasis role="bold">SSLv2_method</emphasis> where removed in OpenSSL 1.1.0.
    </para>
    <para>
      The return type of <emphasis role="bold">SSL_copy_session_id</emphasis> was changed from void to
      int in OpenSSL 1.1.0.
    </para>
  </refsection>
</refentry>