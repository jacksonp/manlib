<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_set_generate_session_id.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_set_generate_session_id, SSL_set_generate_session_id, SSL_has_matching_session_id</refname>
<refpurpose>manipulate generation of SSL session IDs (server only)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>typedef int (*GEN_SESSION_CB)(const SSL *ssl, unsigned char *id,
                              unsigned int *id_len);</synopsis>
<synopsis>int SSL_CTX_set_generate_session_id(SSL_CTX *ctx, GEN_SESSION_CB cb);
int SSL_set_generate_session_id(SSL *ssl, GEN_SESSION_CB, cb);
int SSL_has_matching_session_id(const SSL *ssl, const unsigned char *id,
                                unsigned int id_len);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-991eb7901be7d59a607b1dd2c2ad82b8"><title>DESCRIPTION</title>
    <para>
      SSL_CTX_set_generate_session_id() sets the callback function for
      generating new session ids for SSL/TLS sessions for <emphasis role="bold">ctx</emphasis> to be <emphasis role="bold">cb</emphasis>.
    </para>
    <para>
      SSL_set_generate_session_id() sets the callback function for
      generating new session ids for SSL/TLS sessions for <emphasis role="bold">ssl</emphasis> to be <emphasis role="bold">cb</emphasis>.
    </para>
    <para>
      SSL_has_matching_session_id() checks, whether a session with id
      <emphasis role="bold">id</emphasis> (of length <emphasis role="bold">id_len</emphasis>) is already contained in the internal
      session cache of the parent context of <emphasis role="bold">ssl</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-ff448eae968d16edde1bca66d05f150d"><title>NOTES</title>
    <para>
      When a new session is established between client and server, the
      server generates a session id. The session id is an arbitrary
      sequence of bytes. The length of the session id is between 1 and 32
      bytes.  The session id is not security critical but must be unique
      for the server. Additionally, the session id is transmitted in the
      clear when reusing the session so it must not contain sensitive
      information.
    </para>
    <para>
      Without a callback being set, an OpenSSL server will generate a
      unique session id from pseudo random numbers of the maximum possible
      length. Using the callback function, the session id can be changed to
      contain additional information like e.g. a host id in order to
      improve load balancing or external caching techniques.
    </para>
    <para>
      The callback function receives a pointer to the memory location to
      put <emphasis role="bold">id</emphasis> into and a pointer to the
      maximum allowed length <emphasis role="bold">id_len</emphasis>. The
      buffer at location <emphasis role="bold">id</emphasis> is only
      guaranteed to have the size <emphasis role="bold">id_len</emphasis>.
      The callback is only allowed to generate a shorter id and reduce
      <emphasis role="bold">id_len</emphasis>; the callback <emphasis role="bold">must never</emphasis> increase <emphasis role="bold">id_len</emphasis> or write to the location <emphasis role="bold">id</emphasis> exceeding the given limit.
    </para>
    <para>
      The location <emphasis role="bold">id</emphasis> is filled with 0x00
      before the callback is called, so the callback may only fill part of
      the possible length and leave <emphasis role="bold">id_len</emphasis>
      untouched while maintaining reproducibility.
    </para>
    <para>
      Since the sessions must be distinguished, session ids must be unique.
      Without the callback a random number is used, so that the probability
      of generating the same session id is extremely small (2^256 for
      SSLv3/TLSv1). In order to assure the uniqueness of the generated
      session id, the callback must call SSL_has_matching_session_id() and
      generate another id if a conflict occurs. If an id conflict is not
      resolved, the handshake will fail. If the application codes e.g. a
      unique host id, a unique process number, and a unique sequence number
      into the session id, uniqueness could easily be achieved without
      randomness added (it should however be taken care that no
      confidential information is leaked this way). If the application can
      not guarantee uniqueness, it is recommended to use the maximum
      <emphasis role="bold">id_len</emphasis> and fill in the bytes not
      used to code special information with random data to avoid
      collisions.
    </para>
    <para>
      SSL_has_matching_session_id() will only query the internal session
      cache, not the external one. Since the session id is generated before
      the handshake is completed, it is not immediately added to the cache.
      If another thread is using the same internal session cache, a race
      condition can occur in that another thread generates the same session
      id. Collisions can also occur when using an external session cache,
      since the external cache is not tested with
      SSL_has_matching_session_id() and the same race condition applies.
    </para>
    <para>
      The callback must return 0 if it cannot generate a session id for
      whatever reason and return 1 on success.
    </para>
  </refsection>
  <refsection xml:id="ID-36367f38b4690e2c735c71cdc1f0f903"><title>EXAMPLES</title>
    <para>
      The callback function listed will generate a session id with the
      server id given, and will fill the rest with pseudo random bytes:
    </para>
    <screen>const char session_id_prefix = "www-18";

#define MAX_SESSION_ID_ATTEMPTS 10
static int generate_session_id(const SSL *ssl, unsigned char *id,
                             unsigned int *id_len)
     {
     unsigned int count = 0;
     do      {
             RAND_pseudo_bytes(id, *id_len);
             /* Prefix the session_id with the required prefix. NB: If our
              * prefix is too long, clip it - but there will be worse effects
              * anyway, eg. the server could only possibly create 1 session
              * ID (ie. the prefix!) so all future session negotiations will
              * fail due to conflicts. */
             memcpy(id, session_id_prefix,
                     (strlen(session_id_prefix) &lt; *id_len) ?
                     strlen(session_id_prefix) : *id_len);
             }
     while(SSL_has_matching_session_id(ssl, id, *id_len) &amp;&amp;
             (++count &lt; MAX_SESSION_ID_ATTEMPTS));
     if(count &gt;= MAX_SESSION_ID_ATTEMPTS)
             return 0;
     return 1;
     }

</screen>
  </refsection>
  <refsection xml:id="ID-e228333042f3c814850db93620dde094"><title>RETURN VALUES</title>
    <para>
      SSL_CTX_set_generate_session_id() and SSL_set_generate_session_id()
      always return 1.
    </para>
    <para>
      SSL_has_matching_session_id() returns 1 if another session with the
      same id is already in the cache.
    </para>
  </refsection>
  <refsection xml:id="ID-ada9403b5fa37fec41fdb44eb95633f2"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
</refentry>