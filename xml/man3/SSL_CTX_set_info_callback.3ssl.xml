<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_set_info_callback.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_set_info_callback, SSL_CTX_get_info_callback, SSL_set_info_callback, SSL_get_info_callback</refname>
<refpurpose>handle information callback for SSL connections</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>void SSL_CTX_set_info_callback(SSL_CTX *ctx, void (*callback)());
void (*SSL_CTX_get_info_callback(const SSL_CTX *ctx))();</synopsis>
<synopsis>void SSL_set_info_callback(SSL *ssl, void (*callback)());
void (*SSL_get_info_callback(const SSL *ssl))();</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-265dbe42798123d8b073278aad433051"><title>DESCRIPTION</title>
    <para>
      SSL_CTX_set_info_callback() sets the <emphasis role="bold">callback</emphasis> function, that can be used to obtain
      state information for SSL objects created from <emphasis role="bold">ctx</emphasis> during connection setup and use. The
      setting for <emphasis role="bold">ctx</emphasis> is overridden from
      the setting for a specific SSL object, if specified. When <emphasis role="bold">callback</emphasis> is NULL, no callback function is
      used.
    </para>
    <para>
      SSL_set_info_callback() sets the <emphasis role="bold">callback</emphasis> function, that can be used to obtain
      state information for <emphasis role="bold">ssl</emphasis> during
      connection setup and use. When <emphasis role="bold">callback</emphasis> is NULL, the callback setting
      currently valid for <emphasis role="bold">ctx</emphasis> is used.
    </para>
    <para>
      SSL_CTX_get_info_callback() returns a pointer to the currently set
      information callback function for <emphasis role="bold">ctx</emphasis>.
    </para>
    <para>
      SSL_get_info_callback() returns a pointer to the currently set
      information callback function for <emphasis role="bold">ssl</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-70f6ba79de6874c12aba7206e263f38c"><title>NOTES</title>
    <para>
      When setting up a connection and during use, it is possible to obtain
      state information from the SSL/TLS engine. When set, an information
      callback function is called whenever the state changes, an alert
      appears, or an error occurs.
    </para>
    <para>
      The callback function is called as <emphasis role="bold">callback(SSL
      *ssl, int where, int ret)</emphasis>. The <emphasis role="bold">where</emphasis> argument specifies information about
      where (in which context) the callback function was called. If
      <emphasis role="bold">ret</emphasis> is 0, an error condition
      occurred. If an alert is handled, SSL_CB_ALERT is set and <emphasis role="bold">ret</emphasis> specifies the alert information.
    </para>
    <para>
      <emphasis role="bold">where</emphasis> is a bitmask made up of the
      following bits:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>SSL_CB_LOOP</term>
          <listitem>
            <para>
	      Callback has been called to indicate state change inside a
	      loop.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_EXIT</term>
          <listitem>
            <para>
	      Callback has been called to indicate error exit of a
	      handshake function. (May be soft error with retry option for
	      non-blocking setups.)
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_READ</term>
          <listitem>
            <para>
	      Callback has been called during read operation.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_WRITE</term>
          <listitem>
            <para>
	      Callback has been called during write operation.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_ALERT</term>
          <listitem>
            <para>
	      Callback has been called due to an alert being sent or
	      received.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_READ_ALERT               (SSL_CB_ALERT|SSL_CB_READ)</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_WRITE_ALERT              (SSL_CB_ALERT|SSL_CB_WRITE)</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_ACCEPT_LOOP              (SSL_ST_ACCEPT|SSL_CB_LOOP)</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_ACCEPT_EXIT              (SSL_ST_ACCEPT|SSL_CB_EXIT)</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_CONNECT_LOOP             (SSL_ST_CONNECT|SSL_CB_LOOP)</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_CONNECT_EXIT             (SSL_ST_CONNECT|SSL_CB_EXIT)</term>
          <listitem>
            <para/>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_HANDSHAKE_START</term>
          <listitem>
            <para>
	      Callback has been called because a new handshake is started.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL_CB_HANDSHAKE_DONE           0x20</term>
          <listitem>
            <para>
	      Callback has been called because a handshake is finished.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      The current state information can be obtained using the
      <citerefentry> <refentrytitle>SSL_state_string</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> family of functions.
    </para>
    <para>
      The <emphasis role="bold">ret</emphasis> information can be evaluated
      using the <citerefentry>
      <refentrytitle>SSL_alert_type_string</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> family of functions.
    </para>
  </refsection>
  <refsection xml:id="ID-25f77029741784790eae289615a4c872"><title>RETURN VALUES</title>
    <para>
      SSL_set_info_callback() does not provide diagnostic information.
    </para>
    <para>
      SSL_get_info_callback() returns the current setting.
    </para>
  </refsection>
  <refsection xml:id="ID-4803473b3aa7591eb6a3eb74b676a514"><title>EXAMPLES</title>
    <para>
      The following example callback function prints state strings,
      information about alerts being handled and error messages to the
      <emphasis role="bold">bio_err</emphasis> BIO.
    </para>
    <screen>void apps_ssl_info_callback(SSL *s, int where, int ret)
       {
       const char *str;
       int w;

w = where &amp; ~SSL_ST_MASK;

if (w &amp; SSL_ST_CONNECT) str = "SSL_connect";
else if (w &amp; SSL_ST_ACCEPT) str = "SSL_accept";
else str = "undefined";

if (where &amp; SSL_CB_LOOP)
        {
        BIO_printf(bio_err, "%s:%s\n", str, SSL_state_string_long(s));
        }
else if (where &amp; SSL_CB_ALERT)
        {
        str = (where &amp; SSL_CB_READ) ? "read" : "write";
        BIO_printf(bio_err, "SSL3 alert %s:%s:%s\n",
                str,
                SSL_alert_type_string_long(ret),
                SSL_alert_desc_string_long(ret));
        }
else if (where &amp; SSL_CB_EXIT)
        {
        if (ret == 0)
                BIO_printf(bio_err, "%s:failed in %s\n",
                        str, SSL_state_string_long(s));
        else if (ret &lt; 0)
                {
                BIO_printf(bio_err, "%s:error in %s\n",
                        str, SSL_state_string_long(s));
                }
        }
}</screen>
  </refsection>
  <refsection xml:id="ID-fde5923d2d34531ea5becd8b7187738b"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_state_string</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_alert_type_string</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-9e897e7edde3b99c5914ce0a9721f560"><title>COPYRIGHT</title>
    <para>
      Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>