<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_read.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_read_ex, BIO_write_ex, BIO_read, BIO_write, BIO_gets, BIO_puts</refname>
<refpurpose>BIO I/O functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bio.h&gt;</synopsis>
<synopsis>int BIO_read_ex(BIO *b, void *out, size_t outl, size_t *read);
int BIO_write_ex(BIO *b, const void *in, size_t inl, size_t *written);</synopsis>
<synopsis>int BIO_read(BIO *b, void *buf, int len);
int BIO_gets(BIO *b, char *buf, int size);
int BIO_write(BIO *b, const void *buf, int len);
int BIO_puts(BIO *b, const char *buf);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-439d0ee9003b067e3f9d98e396b725c8"><title>DESCRIPTION</title>
    <para>
      BIO_read_ex() attempts to read <emphasis role="bold">outl</emphasis>
      bytes from BIO <emphasis role="bold">b</emphasis> and places the data
      in <emphasis role="bold">out</emphasis>. If any bytes were
      successfully read then the number of bytes read is stored in
      <emphasis role="bold">*read</emphasis>.
    </para>
    <para>
      BIO_write_ex() attempts to write <emphasis role="bold">inl</emphasis>
      bytes from <emphasis role="bold">in</emphasis> to BIO <emphasis role="bold">b</emphasis>. If successful then the number of bytes
      written is stored in <emphasis role="bold">*written</emphasis>.
    </para>
    <para>
      BIO_read() attempts to read <emphasis role="bold">len</emphasis>
      bytes from BIO <emphasis role="bold">b</emphasis> and places the data
      in <emphasis role="bold">buf</emphasis>.
    </para>
    <para>
      BIO_gets() performs the BIOs "gets" operation and places the data in
      <emphasis role="bold">buf</emphasis>. Usually this operation will
      attempt to read a line of data from the BIO of maximum length
      <emphasis role="bold">len-1</emphasis>. There are exceptions to this,
      however; for example, BIO_gets() on a digest BIO will calculate and
      return the digest and other BIOs may not support BIO_gets() at all.
      The returned string is always NUL-terminated.
    </para>
    <para>
      BIO_write() attempts to write <emphasis role="bold">len</emphasis>
      bytes from <emphasis role="bold">buf</emphasis> to BIO <emphasis role="bold">b</emphasis>.
    </para>
    <para>
      BIO_puts() attempts to write a NUL-terminated string <emphasis role="bold">buf</emphasis> to BIO <emphasis role="bold">b</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-8778c1a28395b3d911007c802379a6ea"><title>RETURN VALUES</title>
    <para>
      BIO_read_ex() and BIO_write_ex() return 1 if data was successfully
      read or written, and 0 otherwise.
    </para>
    <para>
      All other functions return either the amount of data successfully
      read or written (if the return value is positive) or that no data was
      successfully read or written if the result is 0 or -1. If the return
      value is -2 then the operation is not implemented in the specific BIO
      type.  The trailing NUL is not included in the length returned by
      BIO_gets().
    </para>
  </refsection>
  <refsection xml:id="ID-353835aa224902ff971b95ba8c265641"><title>NOTES</title>
    <para>
      A 0 or -1 return is not necessarily an indication of an error. In
      particular when the source/sink is non-blocking or of a certain type
      it may merely be an indication that no data is currently available
      and that the application should retry the operation later.
    </para>
    <para>
      One technique sometimes used with blocking sockets is to use a system
      call (such as select(), poll() or equivalent) to determine when data
      is available and then call read() to read the data. The equivalent
      with BIOs (that is call select() on the underlying I/O structure and
      then call BIO_read() to read the data) should <emphasis role="bold">not</emphasis> be used because a single call to
      BIO_read() can cause several reads (and writes in the case of SSL
      BIOs) on the underlying I/O structure and may block as a result.
      Instead select() (or equivalent) should be combined with non blocking
      I/O so successive reads will request a retry instead of blocking.
    </para>
    <para>
      See <citerefentry> <refentrytitle>BIO_should_retry</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> for details of how to
      determine the cause of a retry and other I/O issues.
    </para>
    <para>
      If the BIO_gets() function is not supported by a BIO then it possible
      to work around this by adding a buffering BIO <citerefentry>
      <refentrytitle>BIO_f_buffer</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> to the chain.
    </para>
  </refsection>
  <refsection xml:id="ID-855a4def14147371d6b804d142db3a97"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>BIO_should_retry</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-2c9be7c6bc86d43bef1a9b57caa15f08"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>