<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EVP_PKEY_derive.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EVP_PKEY_derive_init, EVP_PKEY_derive_set_peer, EVP_PKEY_derive</refname>
<refpurpose>derive public key algorithm shared secret.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis format="linespecific">int EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx);
int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer);
int EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_PKEY_derive.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      The EVP_PKEY_derive_init() function initializes a public key
      algorithm context using key <emphasis role="bold">pkey</emphasis> for
      shared secret derivation.
    </para>
    <para>
      The EVP_PKEY_derive_set_peer() function sets the peer key: this will
      normally be a public key.
    </para>
    <para>
      The EVP_PKEY_derive() derives a shared secret using <emphasis role="bold">ctx</emphasis>. If <emphasis role="bold">key</emphasis>
      is <emphasis role="bold">NULL</emphasis> then the maximum size of the
      output buffer is written to the <emphasis role="bold">keylen</emphasis> parameter. If <emphasis role="bold">key</emphasis> is not <emphasis role="bold">NULL</emphasis> then before the call the <emphasis role="bold">keylen</emphasis> parameter should contain the length of
      the <emphasis role="bold">key</emphasis> buffer, if the call is
      successful the shared secret is written to <emphasis role="bold">key</emphasis> and the amount of data written to
      <emphasis role="bold">keylen</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_PKEY_derive.pod:NOTES"><title>NOTES</title>
    <para>
      After the call to EVP_PKEY_derive_init() algorithm specific control
      operations can be performed to set any appropriate parameters for the
      operation.
    </para>
    <para>
      The function EVP_PKEY_derive() can be called more than once on the
      same context if several operations are performed using the same
      parameters.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_PKEY_derive.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      EVP_PKEY_derive_init() and EVP_PKEY_derive() return 1 for success and
      0 or a negative value for failure. In particular a return value of -2
      indicates the operation is not supported by the public key algorithm.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_PKEY_derive.pod:EXAMPLE"><title>EXAMPLE</title>
    <para>
      Derive shared secret (for example DH or EC keys):
    </para>
    <screen>#include &amp;lt;openssl/evp.h&amp;gt;
#include &amp;lt;openssl/rsa.h&amp;gt;

EVP_PKEY_CTX *ctx;
unsigned char *skey;
size_t skeylen;
EVP_PKEY *pkey, *peerkey;
/* NB: assumes pkey, peerkey have been already set up */

ctx = EVP_PKEY_CTX_new(pkey);
if (!ctx)
       /* Error occurred */
if (EVP_PKEY_derive_init(ctx) &lt;= 0)
       /* Error */
if (EVP_PKEY_derive_set_peer(ctx, peerkey) &lt;= 0)
       /* Error */

/* Determine buffer length */
if (EVP_PKEY_derive(ctx, NULL, &amp;skeylen) &lt;= 0)
       /* Error */

skey = OPENSSL_malloc(skeylen);

if (!skey)
       /* malloc failure */

if (EVP_PKEY_derive(ctx, skey, &amp;skeylen) &lt;= 0)
       /* Error */

/* Shared secret is skey bytes written to buffer skey */</screen>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_PKEY_derive.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      EVP_PKEY_CTX_new(3), EVP_PKEY_encrypt(3), EVP_PKEY_decrypt(3),
      EVP_PKEY_sign(3), EVP_PKEY_verify(3), EVP_PKEY_verify_recover(3),
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_PKEY_derive.pod:HISTORY"><title>HISTORY</title>
    <para>
      These functions were first added to OpenSSL 1.0.0.
    </para>
  </refsection>
</refentry>