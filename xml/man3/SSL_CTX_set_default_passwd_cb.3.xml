<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_set_default_passwd_cb.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_set_default_passwd_cb, SSL_CTX_set_default_passwd_cb_userdata</refname>
<refpurpose>set passwd callback for encrypted PEM file handling</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis format="linespecific">void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb);
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u);</synopsis>
<synopsis format="linespecific">int pem_passwd_cb(char *buf, int size, int rwflag, void *userdata);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_default_passwd_cb.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      SSL_CTX_set_default_passwd_cb() sets the default password callback
      called when loading/storing a PEM certificate with encryption.
    </para>
    <para>
      SSL_CTX_set_default_passwd_cb_userdata() sets a pointer to <emphasis role="bold">userdata</emphasis> which will be provided to the
      password callback on invocation.
    </para>
    <para>
      The pem_passwd_cb(), which must be provided by the application, hands
      back the password to be used during decryption. On invocation a
      pointer to <emphasis role="bold">userdata</emphasis> is provided. The
      pem_passwd_cb must write the password into the provided buffer
      <emphasis role="bold">buf</emphasis> which is of size <emphasis role="bold">size</emphasis>. The actual length of the password must
      be returned to the calling function. <emphasis role="bold">rwflag</emphasis> indicates whether the callback is used
      for reading/decryption (rwflag=0) or writing/encryption (rwflag=1).
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_default_passwd_cb.pod:NOTES"><title>NOTES</title>
    <para>
      When loading or storing private keys, a password might be supplied to
      protect the private key. The way this password can be supplied may
      depend on the application. If only one private key is handled, it can
      be practical to have pem_passwd_cb() handle the password dialog
      interactively. If several keys have to be handled, it can be
      practical to ask for the password once, then keep it in memory and
      use it several times. In the last case, the password could be stored
      into the <emphasis role="bold">userdata</emphasis> storage and the
      pem_passwd_cb() only returns the password already stored.
    </para>
    <para>
      When asking for the password interactively, pem_passwd_cb() can use
      <emphasis role="bold">rwflag</emphasis> to check, whether an item
      shall be encrypted (rwflag=1). In this case the password dialog may
      ask for the same password twice for comparison in order to catch
      typos, that would make decryption impossible.
    </para>
    <para>
      Other items in PEM formatting (certificates) can also be encrypted,
      it is however not usual, as certificate information is considered
      public.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_default_passwd_cb.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      SSL_CTX_set_default_passwd_cb() and
      SSL_CTX_set_default_passwd_cb_userdata() do not provide diagnostic
      information.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_default_passwd_cb.pod:EXAMPLES"><title>EXAMPLES</title>
    <para>
      The following example returns the password provided as <emphasis role="bold">userdata</emphasis> to the calling function. The password
      is considered to be a '\0' terminated string. If the password does
      not fit into the buffer, the password is truncated.
    </para>
    <screen>int pem_passwd_cb(char *buf, int size, int rwflag, void *password)
{
 strncpy(buf, (char *)(password), size);
 buf[size - 1] = '\0';
 return(strlen(buf));
}</screen>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_default_passwd_cb.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      ssl(3), SSL_CTX_use_certificate(3)
    </para>
  </refsection>
</refentry>