<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>ASYNC_start_job.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>ASYNC_get_wait_ctx,
ASYNC_init_thread, ASYNC_cleanup_thread, ASYNC_start_job, ASYNC_pause_job,
ASYNC_get_current_job, ASYNC_block_pause, ASYNC_unblock_pause, ASYNC_is_capable</refname>
<refpurpose>asynchronous job management functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/async.h&gt;</synopsis>
<synopsis>int ASYNC_init_thread(size_t max_size, size_t init_size);
void ASYNC_cleanup_thread(void);</synopsis>
<synopsis>int ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *ctx, int *ret,
                    int (*func)(void *), void *args, size_t size);
int ASYNC_pause_job(void);</synopsis>
<synopsis>ASYNC_JOB *ASYNC_get_current_job(void);
ASYNC_WAIT_CTX *ASYNC_get_wait_ctx(ASYNC_JOB *job);
void ASYNC_block_pause(void);
void ASYNC_unblock_pause(void);</synopsis>
<synopsis>int ASYNC_is_capable(void);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-76d38805cb9e4f37d19ed5efb6c6f2ef"><title>DESCRIPTION</title>
    <para>
      OpenSSL implements asynchronous capabilities through an ASYNC_JOB.
      This represents code that can be started and executes until some
      event occurs. At that point the code can be paused and control
      returns to user code until some subsequent event indicates that the
      job can be resumed.
    </para>
    <para>
      The creation of an ASYNC_JOB is a relatively expensive operation.
      Therefore, for efficiency reasons, jobs can be created up front and
      reused many times. They are held in a pool until they are needed, at
      which point they are removed from the pool, used, and then returned
      to the pool when the job completes. If the user application is
      multi-threaded, then ASYNC_init_thread() may be called for each
      thread that will initiate asynchronous jobs. Before user code exits
      per-thread resources need to be cleaned up. This will normally occur
      automatically (see <citerefentry>
      <refentrytitle>OPENSSL_init_crypto</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>) but may be explicitly
      initiated by using ASYNC_cleanup_thread(). No asynchronous jobs must
      be outstanding for the thread when ASYNC_cleanup_thread() is called.
      Failing to ensure this will result in memory leaks.
    </para>
    <para>
      The <emphasis role="bold">max_size</emphasis> argument limits the
      number of ASYNC_JOBs that will be held in the pool. If <emphasis role="bold">max_size</emphasis> is set to 0 then no upper limit is
      set. When an ASYNC_JOB is needed but there are none available in the
      pool already then one will be automatically created, as long as the
      total of ASYNC_JOBs managed by the pool does not exceed <emphasis role="bold">max_size</emphasis>. When the pool is first initialised
      <emphasis role="bold">init_size</emphasis> ASYNC_JOBs will be created
      immediately. If ASYNC_init_thread() is not called before the pool is
      first used then it will be called automatically with a <emphasis role="bold">max_size</emphasis> of 0 (no upper limit) and an
      <emphasis role="bold">init_size</emphasis> of 0 (no ASYNC_JOBs
      created up front).
    </para>
    <para>
      An asynchronous job is started by calling the ASYNC_start_job()
      function. Initially <emphasis role="bold">*job</emphasis> should be
      NULL. <emphasis role="bold">ctx</emphasis> should point to an
      ASYNC_WAIT_CTX object created through the <citerefentry>
      <refentrytitle>ASYNC_WAIT_CTX_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> function. <emphasis role="bold">ret</emphasis> should point to a location where the
      return value of the asynchronous function should be stored on
      completion of the job. <emphasis role="bold">func</emphasis>
      represents the function that should be started asynchronously. The
      data pointed to by <emphasis role="bold">args</emphasis> and of size
      <emphasis role="bold">size</emphasis> will be copied and then passed
      as an argument to <emphasis role="bold">func</emphasis> when the job
      starts. ASYNC_start_job will return one of the following values:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">ASYNC_ERR</emphasis></term>
          <listitem>
            <para>
	      An error occurred trying to start the job. Check the OpenSSL
	      error queue (e.g. see <citerefentry>
	      <refentrytitle>ERR_print_errors</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry>) for more details.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">ASYNC_NO_JOBS</emphasis></term>
          <listitem>
            <para>
	      There are no jobs currently available in the pool. This call
	      can be retried again at a later time.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">ASYNC_PAUSE</emphasis></term>
          <listitem>
            <para>
	      The job was successfully started but was "paused" before it
	      completed (see ASYNC_pause_job() below). A handle to the job
	      is placed in <emphasis role="bold">*job</emphasis>. Other
	      work can be performed (if desired) and the job restarted at a
	      later time. To restart a job call ASYNC_start_job() again
	      passing the job handle in <emphasis role="bold">*job</emphasis>. The <emphasis role="bold">func</emphasis>, <emphasis role="bold">args</emphasis> and <emphasis role="bold">size</emphasis> parameters will be ignored when
	      restarting a job. When restarting a job ASYNC_start_job()
	      <emphasis role="bold">must</emphasis> be called from the same
	      thread that the job was originally started from.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">ASYNC_FINISH</emphasis></term>
          <listitem>
            <para>
	      The job completed. <emphasis role="bold">*job</emphasis> will
	      be NULL and the return value from <emphasis role="bold">func</emphasis> will be placed in <emphasis role="bold">*ret</emphasis>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      At any one time there can be a maximum of one job actively running
      per thread (you can have many that are paused).
      ASYNC_get_current_job() can be used to get a pointer to the currently
      executing ASYNC_JOB. If no job is currently executing then this will
      return NULL.
    </para>
    <para>
      If executing within the context of a job (i.e. having been called
      directly or indirectly by the function "func" passed as an argument
      to ASYNC_start_job()) then ASYNC_pause_job() will immediately return
      control to the calling application with ASYNC_PAUSE returned from the
      ASYNC_start_job() call. A subsequent call to ASYNC_start_job passing
      in the relevant ASYNC_JOB in the <emphasis role="bold">*job</emphasis> parameter will resume execution from the
      ASYNC_pause_job() call. If ASYNC_pause_job() is called whilst not
      within the context of a job then no action is taken and
      ASYNC_pause_job() returns immediately.
    </para>
    <para>
      ASYNC_get_wait_ctx() can be used to get a pointer to the
      ASYNC_WAIT_CTX for the <emphasis role="bold">job</emphasis>.
      ASYNC_WAIT_CTXs can have a "wait" file descriptor associated with
      them. Applications can wait for the file descriptor to be ready for
      "read" using a system function call such as select or poll (being
      ready for "read" indicates that the job should be resumed). If no
      file descriptor is made available then an application will have to
      periodically "poll" the job by attempting to restart it to see if it
      is ready to continue.
    </para>
    <para>
      An example of typical usage might be an async capable engine. User
      code would initiate cryptographic operations. The engine would
      initiate those operations asynchronously and then call <citerefentry>
      <refentrytitle>ASYNC_WAIT_CTX_set_wait_fd</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> followed by
      ASYNC_pause_job() to return control to the user code. The user code
      can then perform other tasks or wait for the job to be ready by
      calling "select" or other similar function on the wait file
      descriptor. The engine can signal to the user code that the job
      should be resumed by making the wait file descriptor "readable". Once
      resumed the engine should clear the wake signal on the wait file
      descriptor.
    </para>
    <para>
      The ASYNC_block_pause() function will prevent the currently active
      job from pausing. The block will remain in place until a subsequent
      call to ASYNC_unblock_pause(). These functions can be nested, e.g. if
      you call ASYNC_block_pause() twice then you must call
      ASYNC_unblock_pause() twice in order to reenable pausing. If these
      functions are called while there is no currently active job then they
      have no effect. This functionality can be useful to avoid deadlock
      scenarios. For example during the execution of an ASYNC_JOB an
      application acquires a lock. It then calls some cryptographic
      function which invokes ASYNC_pause_job(). This returns control back
      to the code that created the ASYNC_JOB. If that code then attempts to
      acquire the same lock before resuming the original job then a
      deadlock can occur. By calling ASYNC_block_pause() immediately after
      acquiring the lock and ASYNC_unblock_pause() immediately before
      releasing it then this situation cannot occur.
    </para>
    <para>
      Some platforms cannot support async operations. The
      ASYNC_is_capable() function can be used to detect whether the current
      platform is async capable or not.
    </para>
  </refsection>
  <refsection xml:id="ID-5b81ed1eeaec45d15e5803917b43a2c2"><title>RETURN VALUES</title>
    <para>
      ASYNC_init_thread returns 1 on success or 0 otherwise.
    </para>
    <para>
      ASYNC_start_job returns one of ASYNC_ERR, ASYNC_NO_JOBS, ASYNC_PAUSE
      or ASYNC_FINISH as described above.
    </para>
    <para>
      ASYNC_pause_job returns 0 if an error occurred or 1 on success. If
      called when not within the context of an ASYNC_JOB then this is
      counted as success so 1 is returned.
    </para>
    <para>
      ASYNC_get_current_job returns a pointer to the currently executing
      ASYNC_JOB or NULL if not within the context of a job.
    </para>
    <para>
      ASYNC_get_wait_ctx() returns a pointer to the ASYNC_WAIT_CTX for the
      job.
    </para>
    <para>
      ASYNC_is_capable() returns 1 if the current platform is async capable
      or 0 otherwise.
    </para>
  </refsection>
  <refsection xml:id="ID-31aa59d43111928c325937966762ead1"><title>NOTES</title>
    <para>
      On Windows platforms the openssl/async.h header is dependent on some
      of the types customarily made available by including windows.h. The
      application developer is likely to require control over when the
      latter is included, commonly as one of the first included headers.
      Therefore it is defined as an application developer's responsibility
      to include windows.h prior to async.h.
    </para>
  </refsection>
  <refsection xml:id="ID-8dc79891f5a8247cfc0f1d8b6c19e83d"><title>EXAMPLE</title>
    <para>
      The following example demonstrates how to use most of the core async
      APIs:
    </para>
    <screen>#ifdef _WIN32
# include &lt;windows.h&amp;gt;
#endif
#include &lt;stdio.h&amp;gt;
#include &lt;unistd.h&amp;gt;
#include &amp;lt;openssl/async.h&amp;gt;
#include &amp;lt;openssl/crypto.h&amp;gt;

int unique = 0;

void cleanup(ASYNC_WAIT_CTX *ctx, const void *key, OSSL_ASYNC_FD r, void *vw)
{
    OSSL_ASYNC_FD *w = (OSSL_ASYNC_FD *)vw;
    close(r);
    close(*w);
    OPENSSL_free(w);
}

int jobfunc(void *arg)
{
    ASYNC_JOB *currjob;
    unsigned char *msg;
    int pipefds[2] = {0, 0};
    OSSL_ASYNC_FD *wptr;
    char buf = 'X';

currjob = ASYNC_get_current_job();
if (currjob != NULL) {
    printf("Executing within a job\n");
} else {
    printf("Not executing within a job - should not happen\n");
    return 0;
}

msg = (unsigned char *)arg;
printf("Passed in message is: %s\n", msg);

if (pipe(pipefds) != 0) {
    printf("Failed to create pipe\n");
    return 0;
}
wptr = OPENSSL_malloc(sizeof(OSSL_ASYNC_FD));
if (wptr == NULL) {
    printf("Failed to malloc\n");
    return 0;
}
*wptr = pipefds[1];
ASYNC_WAIT_CTX_set_wait_fd(ASYNC_get_wait_ctx(currjob), &amp;unique,
                           pipefds[0], wptr, cleanup);

/*
 * Normally some external event would cause this to happen at some
 * later point - but we do it here for demo purposes, i.e.
 * immediately signalling that the job is ready to be woken up after
 * we return to main via ASYNC_pause_job().
 */
write(pipefds[1], &amp;buf, 1);

/* Return control back to main */
ASYNC_pause_job();

/* Clear the wake signal */
read(pipefds[0], &amp;buf, 1);

printf ("Resumed the job after a pause\n");

    return 1;
}

int main(void)
{
    ASYNC_JOB *job = NULL;
    ASYNC_WAIT_CTX *ctx = NULL;
    int ret;
    OSSL_ASYNC_FD waitfd;
    fd_set waitfdset;
    size_t numfds;
    unsigned char msg[13] = "Hello world!";

printf("Starting...\n");

ctx = ASYNC_WAIT_CTX_new();
if (ctx == NULL) {
    printf("Failed to create ASYNC_WAIT_CTX\n");
    abort();
}

for (;;) {
    switch(ASYNC_start_job(&amp;job, ctx, &amp;ret, jobfunc, msg, sizeof(msg))) {
    case ASYNC_ERR:
    case ASYNC_NO_JOBS:
            printf("An error occurred\n");
            goto end;
    case ASYNC_PAUSE:
            printf("Job was paused\n");
            break;
    case ASYNC_FINISH:
            printf("Job finished with return value %d\n", ret);
            goto end;
    }

/* Wait for the job to be woken */
printf("Waiting for the job to be woken up\n");

    if (!ASYNC_WAIT_CTX_get_all_fds(ctx, NULL, &amp;numfds)
            || numfds &gt; 1) {
        printf("Unexpected number of fds\n");
        abort();
    }
    ASYNC_WAIT_CTX_get_all_fds(ctx, &amp;waitfd, &amp;numfds);
    FD_ZERO(&amp;waitfdset);
    FD_SET(waitfd, &amp;waitfdset);
    select(waitfd + 1, &amp;waitfdset, NULL, NULL, NULL);
}

end:
    ASYNC_WAIT_CTX_free(ctx);
    printf("Finishing\n");

    return 0;
}</screen>
    <para>
      The expected output from executing the above example program is:
    </para>
    <screen>Starting...
Executing within a job
Passed in message is: Hello world!
Job was paused
Waiting for the job to be woken up
Resumed the job after a pause
Job finished with return value 1
Finishing</screen>
  </refsection>
  <refsection xml:id="ID-79e582e268384016b6e319e03f32be94"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>crypto</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ERR_print_errors</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-abb59d852112ced2abc124a74e0e0b38"><title>HISTORY</title>
    <para>
      ASYNC_init_thread, ASYNC_cleanup_thread, ASYNC_start_job,
      ASYNC_pause_job, ASYNC_get_current_job, ASYNC_get_wait_ctx(),
      ASYNC_block_pause(), ASYNC_unblock_pause() and ASYNC_is_capable()
      were first added to OpenSSL 1.1.0.
    </para>
  </refsection>
  <refsection xml:id="ID-f6a9f0e6d7cba3334bafc6867cc497e7"><title>COPYRIGHT</title>
    <para>
      Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>