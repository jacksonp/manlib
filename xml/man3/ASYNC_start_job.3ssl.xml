<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>ASYNC_start_job.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>ASYNC_init, ASYNC_cleanup, ASYNC_init_thread, ASYNC_cleanup_thread,
ASYNC_start_job, ASYNC_pause_job, ASYNC_in_job, ASYNC_get_wait_fd,
ASYNC_get_current_job, ASYNC_wake, ASYNC_clear_wake, ASYNC_block_pause,
ASYNC_unblock_pause</refname>
<refpurpose>asynchronous job management functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/async.h&gt;</synopsis>
<synopsis>int ASYNC_init(int init_thread, size_t max_size, size_t init_size);
void ASYNC_cleanup(int cleanupthread);</synopsis>
<synopsis>int ASYNC_init_thread(size_t max_size, size_t init_size);
void ASYNC_cleanup_thread(void);</synopsis>
<synopsis>int ASYNC_start_job(ASYNC_JOB **job, int *ret, int (*func)(void *),
                    void *args, size_t size);
int ASYNC_pause_job(void);</synopsis>
<synopsis>int ASYNC_get_wait_fd(ASYNC_JOB *job);
ASYNC_JOB *ASYNC_get_current_job(void);
void ASYNC_wake(ASYNC_JOB *job);
void ASYNC_clear_wake(ASYNC_JOB *job);
void ASYNC_block_pause(void);
void ASYNC_unblock_pause(void);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-76d38805cb9e4f37d19ed5efb6c6f2ef"><title>DESCRIPTION</title>
    <para>
      OpenSSL implements asynchronous capabilities through an ASYNC_JOB.
      This represents code that can be started and executes until some
      event occurs. At that point the code can be paused and control
      returns to user code until some subsequent event indicates that the
      job can be resumed.
    </para>
    <para>
      The creation of an ASYNC_JOB is a relatively expensive operation.
      Therefore, for efficiency reasons, jobs can be created up front and
      reused many times. They are held in a pool until they are needed, at
      which point they are removed from the pool, used, and then returned
      to the pool when the job completes. Before using any of the
      asynchronous job functions, user code should first call ASYNC_init().
      If the user application is multi-threaded, then ASYNC_init_thread()
      should be called for each thread that will initiate asynchronous
      jobs. If the <emphasis role="bold">init_thread</emphasis> parameter
      to ASYNC_init() is non-zero then ASYNC_init_thread is automatically
      called for the current thread. Before user code exits it should free
      up resources for each thread that was initialised using
      ASYNC_cleanup_thread(). No asynchronous jobs must be outstanding for
      the thread when ASYNC_cleanup_thread() is called. Failing to ensure
      this will result in memory leaks. Additionally an application should
      call ASYNC_cleanup() when all asynchronous work is complete across
      all threads. If <emphasis role="bold">cleanupthread</emphasis> is
      non-zero then ASYNC_cleanup_thread() is automatically called for the
      current thread.
    </para>
    <para>
      The <emphasis role="bold">max_size</emphasis> argument limits the
      number of ASYNC_JOBs that will be held in the pool. If <emphasis role="bold">max_size</emphasis> is set to 0 then no upper limit is
      set. When an ASYNC_JOB is needed but there are none available in the
      pool already then one will be automatically created, as long as the
      total of ASYNC_JOBs managed by the pool does not exceed <emphasis role="bold">max_size</emphasis>. When the pool is first initialised
      <emphasis role="bold">init_size</emphasis> ASYNC_JOBs will be created
      immediately. If ASYNC_init_thread() is not called before the pool is
      first used then it will be called automatically with a <emphasis role="bold">max_size</emphasis> of 0 (no upper limit) and an
      <emphasis role="bold">init_size</emphasis> of 0 (no ASYNC_JOBs
      created up front). If a pool is created in this way it must still be
      cleaned up with an explicit call to ASYNC_cleanup_thread().
    </para>
    <para>
      An asynchronous job is started by calling the ASYNC_start_job()
      function. Initially <emphasis role="bold">*job</emphasis> should be
      NULL. <emphasis role="bold">ret</emphasis> should point to a location
      where the return value of the asynchronous function should be stored
      on completion of the job. <emphasis role="bold">func</emphasis>
      represents the function that should be started asynchronously. The
      data pointed to by <emphasis role="bold">args</emphasis> and of size
      <emphasis role="bold">size</emphasis> will be copied and then passed
      as an argument to <emphasis role="bold">func</emphasis> when the job
      starts. ASYNC_start_job will return one of the following values:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">ASYNC_ERR</emphasis></term>
          <listitem>
            <para>
	      An error occurred trying to start the job. Check the OpenSSL
	      error queue (e.g. see <citerefentry>
	      <refentrytitle>ERR_print_errors</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry>) for more details.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">ASYNC_NO_JOBS</emphasis></term>
          <listitem>
            <para>
	      There are no jobs currently available in the pool. This call
	      can be retried again at a later time.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">ASYNC_PAUSE</emphasis></term>
          <listitem>
            <para>
	      The job was successfully started but was "paused" before it
	      completed (see ASYNC_pause_job() below). A handle to the job
	      is placed in <emphasis role="bold">*job</emphasis>. Other
	      work can be performed (if desired) and the job restarted at a
	      later time. To restart a job call ASYNC_start_job() again
	      passing the job handle in <emphasis role="bold">*job</emphasis>. The <emphasis role="bold">func</emphasis>, <emphasis role="bold">args</emphasis> and <emphasis role="bold">size</emphasis> parameters will be ignored when
	      restarting a job. When restarting a job ASYNC_start_job()
	      <emphasis role="bold">must</emphasis> be called from the same
	      thread that the job was originally started from.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">ASYNC_FINISH</emphasis></term>
          <listitem>
            <para>
	      The job completed. <emphasis role="bold">*job</emphasis> will
	      be NULL and the return value from <emphasis role="bold">func</emphasis> will be placed in <emphasis role="bold">*ret</emphasis>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      At any one time there can be a maximum of one job actively running
      per thread (you can have many that are paused).
      ASYNC_get_current_job() can be used to get a pointer to the currently
      executing ASYNC_JOB. If no job is currently executing then this will
      return NULL.
    </para>
    <para>
      If executing within the context of a job (i.e. having been called
      directly or indirectly by the function "func" passed as an argument
      to ASYNC_start_job()) then ASYNC_pause_job() will immediately return
      control to the calling application with ASYNC_PAUSE returned from the
      ASYNC_start_job() call. A subsequent call to ASYNC_start_job passing
      in the relevant ASYNC_JOB in the <emphasis role="bold">*job</emphasis> parameter will resume execution from the
      ASYNC_pause_job() call. If ASYNC_pause_job() is called whilst not
      within the context of a job then no action is taken and
      ASYNC_pause_job() returns immediately.
    </para>
    <para>
      Every ASYNC_JOB has a "wait" file descriptor associated with it.
      Calling ASYNC_get_wait_fd() and passing in a pointer to an ASYNC_JOB
      in the <emphasis role="bold">job</emphasis> parameter will return the
      wait file descriptor associated with that job. This file descriptor
      can be used to signal that the job should be resumed. Applications
      can wait for the file descriptor to be ready for "read" using a
      system function call such as select or poll (being ready for "read"
      indicates that the job should be resumed). Applications can signal
      that a job is ready to resume using ASYNC_wake() or clear an existing
      signal using ASYNC_clear_wake().
    </para>
    <para>
      An example of typical usage might be an async capable engine. User
      code would initiate cryptographic operations. The engine would
      initiate those operations asynchronously and then call
      ASYNC_pause_job() to return control to the user code. The user code
      can then perform other tasks or wait for the job to be ready by
      calling "select" or other similar function on the wait file
      descriptor. The engine can signal to the user code that the job
      should be resumed using ASYNC_wake(). Once resumed the engine would
      clear the wake signal by calling ASYNC_clear_wake().
    </para>
    <para>
      The ASYNC_block_pause() function will prevent the currently active
      job from pausing. The block will remain in place until a subsequent
      call to ASYNC_unblock_pause(). These functions can be nested, e.g. if
      you call ASYNC_block_pause() twice then you must call
      ASYNC_unblock_pause() twice in order to reenable pausing. If these
      functions are called while there is no currently active job then they
      have no effect. This functionality can be useful to avoid deadlock
      scenarios. For example during the execution of an ASYNC_JOB an
      application aquires a lock. It then calls some cryptographic function
      which invokes ASYNC_pause_job(). This returns control back to the
      code that created the ASYNC_JOB. If that code then attempts to aquire
      the same lock before resuming the original job then a deadlock can
      occur. By calling ASYNC_block_pause() immediately after aquiring the
      lock and ASYNC_unblock_pause() immediately before releasing it then
      this situation cannot occur.
    </para>
  </refsection>
  <refsection xml:id="ID-5b81ed1eeaec45d15e5803917b43a2c2"><title>RETURN VALUES</title>
    <para>
      ASYNC_init and ASYNC_init_thread return 1 on success or 0 otherwise.
    </para>
    <para>
      ASYNC_start_job returns one of ASYNC_ERR, ASYNC_NO_JOBS, ASYNC_PAUSE
      or ASYNC_FINISH as described above.
    </para>
    <para>
      ASYNC_pause_job returns 0 if an error occured or 1 on success. If
      called when not within the context of an ASYNC_JOB then this is
      counted as success so 1 is returned.
    </para>
    <para>
      ASYNC_get_wait_fd returns the "wait" file descriptor associated with
      the ASYNC_JOB provided as an argument.
    </para>
    <para>
      ASYNC_get_current_job returns a pointer to the currently executing
      ASYNC_JOB or NULL if not within the context of a job.
    </para>
  </refsection>
  <refsection xml:id="ID-8dc79891f5a8247cfc0f1d8b6c19e83d"><title>EXAMPLE</title>
    <para>
      The following example demonstrates how to use most of the core async
      APIs:
    </para>
    <screen>#include &lt;stdio.h&amp;gt;
#include &amp;lt;openssl/async.h&amp;gt;

int jobfunc(void *arg)
{
    ASYNC_JOB *currjob;
    unsigned char *msg;

currjob = ASYNC_get_current_job();
if (currjob != NULL) {
    printf("Executing within a job\n");
} else {
    printf("Not executing within a job - should not happen\n");
    return 0;
}

msg = (unsigned char *)arg;
printf("Passed in message is: %s\n", msg);

/*
 * Normally some external event would cause this to happen at some
 * later point - but we do it here for demo purposes, i.e.
 * immediately signalling that the job is ready to be woken up after
 * we return to main via ASYNC_pause_job().
 */
ASYNC_wake(currjob);

/* Return control back to main */
ASYNC_pause_job();

/* Clear the wake signal */
ASYNC_clear_wake(currjob);

printf ("Resumed the job after a pause\n");

    return 1;
}

int main(void)
{
    ASYNC_JOB *job = NULL;
    int ret, waitfd;
    fd_set waitfdset;
    unsigned char msg[13] = "Hello world!";

/*
 * We're only expecting 1 job to be used here so we're only creating
 * a pool of 1
 */
if (!ASYNC_init(1, 1, 1)) {
    printf("Error creating pool\n");
    goto end;
}

printf("Starting...\n");

for (;;) {
    switch(ASYNC_start_job(&amp;job, &amp;ret, jobfunc, msg, sizeof(msg))) {
    case ASYNC_ERR:
    case ASYNC_NO_JOBS:
            printf("An error occurred\n");
            goto end;
    case ASYNC_PAUSE:
            printf("Job was paused\n");
            break;
    case ASYNC_FINISH:
            printf("Job finished with return value %d\n", ret);
            goto end;
    }

    /* Wait for the job to be woken */
    printf("Waiting for the job to be woken up\n");
    waitfd = ASYNC_get_wait_fd(job);
    FD_ZERO(&amp;waitfdset);
    FD_SET(waitfd, &amp;waitfdset);
    select(waitfd + 1, &amp;waitfdset, NULL, NULL, NULL);
}

end:
    printf("Finishing\n");
    ASYNC_cleanup(1);

    return 0;
}</screen>
    <para>
      The expected output from executing the above example program is:
    </para>
    <screen>Starting...
Executing within a job
Passed in message is: Hello world!
Job was paused
Waiting for the job to be woken up
Resumed the job after a pause
Job finished with return value 1
Finishing</screen>
  </refsection>
  <refsection xml:id="ID-79e582e268384016b6e319e03f32be94"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>crypto</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ERR_print_errors</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-abb59d852112ced2abc124a74e0e0b38"><title>HISTORY</title>
    <para>
      ASYNC_init, ASYNC_init_thread, ASYNC_cleanup, ASYNC_cleanup_thread,
      ASYNC_start_job, ASYNC_pause_job, ASYNC_get_wait_fd,
      ASYNC_get_current_job, ASYNC_wake, ASYNC_clear_wake were first added
      to OpenSSL 1.1.0.
    </para>
  </refsection>
</refentry>