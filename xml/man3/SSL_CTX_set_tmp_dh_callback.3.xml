<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_set_tmp_dh_callback.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_set_tmp_dh_callback, SSL_CTX_set_tmp_dh, SSL_set_tmp_dh_callback, SSL_set_tmp_dh</refname>
<refpurpose>handle DH keys for ephemeral key exchange</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis format="linespecific">void SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,
           DH *(*tmp_dh_callback)(SSL *ssl, int is_export, int keylength));
long SSL_CTX_set_tmp_dh(SSL_CTX *ctx, DH *dh);</synopsis>
<synopsis format="linespecific">void SSL_set_tmp_dh_callback(SSL *ctx,
           DH *(*tmp_dh_callback)(SSL *ssl, int is_export, int keylength));
long SSL_set_tmp_dh(SSL *ssl, DH *dh)</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_tmp_dh_callback.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      SSL_CTX_set_tmp_dh_callback() sets the callback function for
      <emphasis role="bold">ctx</emphasis> to be used when a DH parameters
      are required to <emphasis role="bold">tmp_dh_callback</emphasis>. The
      callback is inherited by all <emphasis role="bold">ssl</emphasis>
      objects created from <emphasis role="bold">ctx</emphasis>.
    </para>
    <para>
      SSL_CTX_set_tmp_dh() sets DH parameters to be used to be <emphasis role="bold">dh</emphasis>. The key is inherited by all <emphasis role="bold">ssl</emphasis> objects created from <emphasis role="bold">ctx</emphasis>.
    </para>
    <para>
      SSL_set_tmp_dh_callback() sets the callback only for <emphasis role="bold">ssl</emphasis>.
    </para>
    <para>
      SSL_set_tmp_dh() sets the parameters only for <emphasis role="bold">ssl</emphasis>.
    </para>
    <para>
      These functions apply to SSL/TLS servers only.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_tmp_dh_callback.pod:NOTES"><title>NOTES</title>
    <para>
      When using a cipher with RSA authentication, an ephemeral DH key
      exchange can take place. Ciphers with DSA keys always use ephemeral
      DH keys as well. In these cases, the session data are negotiated
      using the ephemeral/temporary DH key and the key supplied and
      certified by the certificate chain is only used for signing.
      Anonymous ciphers (without a permanent server key) also use ephemeral
      DH keys.
    </para>
    <para>
      Using ephemeral DH key exchange yields forward secrecy, as the
      connection can only be decrypted, when the DH key is known. By
      generating a temporary DH key inside the server application that is
      lost when the application is left, it becomes impossible for an
      attacker to decrypt past sessions, even if he gets hold of the normal
      (certified) key, as this key was only used for signing.
    </para>
    <para>
      In order to perform a DH key exchange the server must use a DH group
      (DH parameters) and generate a DH key. The server will always
      generate a new DH key during the negotiation if either the DH
      parameters are supplied via callback or the SSL_OP_SINGLE_DH_USE
      option of SSL_CTX_set_options(3) is set (or both). It will 
      immediately create a DH key if DH parameters are supplied via
      SSL_CTX_set_tmp_dh() and SSL_OP_SINGLE_DH_USE is not set. In this
      case, it may happen that a key is generated on initialization without
      later being needed, while on the other hand the computer time during
      the negotiation is being saved.
    </para>
    <para>
      If "strong" primes were used to generate the DH parameters, it is not
      strictly necessary to generate a new key for each handshake but it
      does improve forward secrecy. If it is not assured that "strong"
      primes were used, SSL_OP_SINGLE_DH_USE must be used in order to
      prevent small subgroup attacks. Always using SSL_OP_SINGLE_DH_USE has
      an impact on the computer time needed during negotiation, but it is
      not very large, so application authors/users should consider always
      enabling this option. The option is required to implement perfect
      forward secrecy (PFS).
    </para>
    <para>
      As generating DH parameters is extremely time consuming, an
      application should not generate the parameters on the fly but supply
      the parameters. DH parameters can be reused, as the actual key is
      newly generated during the negotiation. The risk in reusing DH
      parameters is that an attacker may specialize on a very often used DH
      group. Applications should therefore generate their own DH parameters
      during the installation process using the openssl <citerefentry>
      <refentrytitle>dhparam</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry> application. This application guarantees that
      "strong" primes are used.
    </para>
    <para>
      Files dh2048.pem, and dh4096.pem in the 'apps' directory of the
      current version of the OpenSSL distribution contain the 'SKIP' DH
      parameters, which use safe primes and were generated verifiably
      pseudo-randomly. These files can be converted into C code using the
      <emphasis role="bold">-C</emphasis> option of the <citerefentry>
      <refentrytitle>dhparam</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry> application. Generation of custom DH parameters
      during installation should still be preferred to stop an attacker
      from specializing on a commonly used group. File dh1024.pem contains
      old parameters that must not be used by applications.
    </para>
    <para>
      An application may either directly specify the DH parameters or can
      supply the DH parameters via a callback function.
    </para>
    <para>
      Previous versions of the callback used <emphasis role="bold">is_export</emphasis> and <emphasis role="bold">keylength</emphasis> parameters to control parameter
      generation for export and non-export cipher suites. Modern servers
      that do not support export ciphersuites are advised to either use
      SSL_CTX_set_tmp_dh() in combination with SSL_OP_SINGLE_DH_USE, or
      alternatively, use the callback but ignore <emphasis role="bold">keylength</emphasis> and <emphasis role="bold">is_export</emphasis> and simply supply at least 2048-bit
      parameters in the callback.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_tmp_dh_callback.pod:EXAMPLES"><title>EXAMPLES</title>
    <para>
      Setup DH parameters with a key length of 2048 bits. (Error handling
      partly left out.)
    </para>
    <screen>Command-line parameter generation:
$ openssl dhparam -out dh_param_2048.pem 2048

Code for setting up parameters during server initialization:

...
SSL_CTX ctx = SSL_CTX_new();
...

/* Set up ephemeral DH parameters. */
DH *dh_2048 = NULL;
FILE *paramfile;
paramfile = fopen("dh_param_2048.pem", "r");
if (paramfile) {
  dh_2048 = PEM_read_DHparams(paramfile, NULL, NULL, NULL);
  fclose(paramfile);
} else {
  /* Error. */
}
if (dh_2048 == NULL) {
 /* Error. */
}
if (SSL_CTX_set_tmp_dh(ctx, dh_2048) != 1) {
  /* Error. */
}
SSL_CTX_set_options(ctx, SSL_OP_SINGLE_DH_USE);
...</screen>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_tmp_dh_callback.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      SSL_CTX_set_tmp_dh_callback() and SSL_set_tmp_dh_callback() do not
      return diagnostic output.
    </para>
    <para>
      SSL_CTX_set_tmp_dh() and SSL_set_tmp_dh() do return 1 on success and
      0 on failure. Check the error queue to find out the reason of
      failure.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_tmp_dh_callback.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_cipher_list</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_tmp_rsa_callback</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_options</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ciphers</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>dhparam</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>
    </para>
  </refsection>
</refentry>