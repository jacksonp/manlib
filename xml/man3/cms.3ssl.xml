<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>cms.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>cms</refname>
<refpurpose>CMS utility</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis><emphasis role="bold">openssl</emphasis> <emphasis role="bold">cms</emphasis>
[<emphasis role="bold">-help</emphasis>]
[<emphasis role="bold">-encrypt</emphasis>]
[<emphasis role="bold">-decrypt</emphasis>]
[<emphasis role="bold">-sign</emphasis>]
[<emphasis role="bold">-verify</emphasis>]
[<emphasis role="bold">-cmsout</emphasis>]
[<emphasis role="bold">-resign</emphasis>]
[<emphasis role="bold">-data_create</emphasis>]
[<emphasis role="bold">-data_out</emphasis>]
[<emphasis role="bold">-digest_create</emphasis>]
[<emphasis role="bold">-digest_verify</emphasis>]
[<emphasis role="bold">-compress</emphasis>]
[<emphasis role="bold">-uncompress</emphasis>]
[<emphasis role="bold">-EncryptedData_encrypt</emphasis>]
[<emphasis role="bold">-sign_receipt</emphasis>]
[<emphasis role="bold">-verify_receipt receipt</emphasis>]
[<emphasis role="bold">-in filename</emphasis>]
[<emphasis role="bold">-inform SMIME|PEM|DER</emphasis>]
[<emphasis role="bold">-rctform SMIME|PEM|DER</emphasis>]
[<emphasis role="bold">-out filename</emphasis>]
[<emphasis role="bold">-outform SMIME|PEM|DER</emphasis>]
[<emphasis role="bold">-stream -indef -noindef</emphasis>]
[<emphasis role="bold">-noindef</emphasis>]
[<emphasis role="bold">-content filename</emphasis>]
[<emphasis role="bold">-text</emphasis>]
[<emphasis role="bold">-noout</emphasis>]
[<emphasis role="bold">-print</emphasis>]
[<emphasis role="bold">-CAfile file</emphasis>]
[<emphasis role="bold">-CApath dir</emphasis>]
[<emphasis role="bold">-no-CAfile</emphasis>]
[<emphasis role="bold">-no-CApath</emphasis>]
[<emphasis role="bold">-attime timestamp</emphasis>]
[<emphasis role="bold">-check_ss_sig</emphasis>]
[<emphasis role="bold">-crl_check</emphasis>]
[<emphasis role="bold">-crl_check_all</emphasis>]
[<emphasis role="bold">-explicit_policy</emphasis>]
[<emphasis role="bold">-extended_crl</emphasis>]
[<emphasis role="bold">-ignore_critical</emphasis>]
[<emphasis role="bold">-inhibit_any</emphasis>]
[<emphasis role="bold">-inhibit_map</emphasis>]
[<emphasis role="bold">-no_check_time</emphasis>]
[<emphasis role="bold">-partial_chain</emphasis>]
[<emphasis role="bold">-policy arg</emphasis>]
[<emphasis role="bold">-policy_check</emphasis>]
[<emphasis role="bold">-policy_print</emphasis>]
[<emphasis role="bold">-purpose purpose</emphasis>]
[<emphasis role="bold">-suiteB_128</emphasis>]
[<emphasis role="bold">-suiteB_128_only</emphasis>]
[<emphasis role="bold">-suiteB_192</emphasis>]
[<emphasis role="bold">-trusted_first</emphasis>]
[<emphasis role="bold">-no_alt_chains</emphasis>]
[<emphasis role="bold">-use_deltas</emphasis>]
[<emphasis role="bold">-auth_level num</emphasis>]
[<emphasis role="bold">-verify_depth num</emphasis>]
[<emphasis role="bold">-verify_email email</emphasis>]
[<emphasis role="bold">-verify_hostname hostname</emphasis>]
[<emphasis role="bold">-verify_ip ip</emphasis>]
[<emphasis role="bold">-verify_name name</emphasis>]
[<emphasis role="bold">-x509_strict</emphasis>]
[<emphasis role="bold">-md digest</emphasis>]
[<emphasis role="bold">-[cipher]</emphasis>]
[<emphasis role="bold">-nointern</emphasis>]
[<emphasis role="bold">-no_signer_cert_verify</emphasis>]
[<emphasis role="bold">-nocerts</emphasis>]
[<emphasis role="bold">-noattr</emphasis>]
[<emphasis role="bold">-nosmimecap</emphasis>]
[<emphasis role="bold">-binary</emphasis>]
[<emphasis role="bold">-crlfeol</emphasis>]
[<emphasis role="bold">-asciicrlf</emphasis>]
[<emphasis role="bold">-nodetach</emphasis>]
[<emphasis role="bold">-certfile file</emphasis>]
[<emphasis role="bold">-certsout file</emphasis>]
[<emphasis role="bold">-signer file</emphasis>]
[<emphasis role="bold">-recip file</emphasis>]
[<emphasis role="bold">-keyid</emphasis>]
[<emphasis role="bold">-receipt_request_all -receipt_request_first</emphasis>]
[<emphasis role="bold">-receipt_request_from emailaddress</emphasis>]
[<emphasis role="bold">-receipt_request_to emailaddress</emphasis>]
[<emphasis role="bold">-receipt_request_print</emphasis>]
[<emphasis role="bold">-secretkey key</emphasis>]
[<emphasis role="bold">-secretkeyid id</emphasis>]
[<emphasis role="bold">-econtent_type type</emphasis>]
[<emphasis role="bold">-inkey file</emphasis>]
[<emphasis role="bold">-keyopt name:parameter</emphasis>]
[<emphasis role="bold">-passin arg</emphasis>]
[<emphasis role="bold">-rand file(s)</emphasis>]
[<emphasis role="bold">cert.pem...</emphasis>]
[<emphasis role="bold">-to addr</emphasis>]
[<emphasis role="bold">-from addr</emphasis>]
[<emphasis role="bold">-subject subj</emphasis>]
[cert.pem]...</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-3ce3c3acd2f68e697724493cc5e3755e"><title>DESCRIPTION</title>
    <para>
      The <emphasis role="bold">cms</emphasis> command handles S/MIME v3.1
      mail. It can encrypt, decrypt, sign and verify, compress and
      uncompress S/MIME messages.
    </para>
  </refsection>
  <refsection xml:id="ID-3d553c63587b50cf18a88729b9bf4d24"><title>COMMAND OPTIONS</title>
    <para>
      There are fourteen operation options that set the type of operation
      to be performed. The meaning of the other options varies according to
      the operation type.
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">-help</emphasis></term>
          <listitem>
            <para>
	      Print out a usage message.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-encrypt</emphasis></term>
          <listitem>
            <para>
	      encrypt mail for the given recipient certificates. Input file
	      is the message to be encrypted. The output file is the
	      encrypted mail in MIME format. The actual CMS type is
	      &lt;B&gt;EnvelopedData&lt;B&gt;.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-decrypt</emphasis></term>
          <listitem>
            <para>
	      decrypt mail using the supplied certificate and private key.
	      Expects an encrypted mail message in MIME format for the
	      input file. The decrypted mail is written to the output file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-debug_decrypt</emphasis></term>
          <listitem>
            <para>
	      this option sets the <emphasis role="bold">CMS_DEBUG_DECRYPT</emphasis> flag. This option
	      should be used with caution: see the notes section below.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-sign</emphasis></term>
          <listitem>
            <para>
	      sign mail using the supplied certificate and private key.
	      Input file is the message to be signed. The signed message in
	      MIME format is written to the output file.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify</emphasis></term>
          <listitem>
            <para>
	      verify signed mail. Expects a signed mail message on input
	      and outputs the signed data. Both clear text and opaque
	      signing is supported.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-cmsout</emphasis></term>
          <listitem>
            <para>
	      takes an input message and writes out a PEM encoded CMS
	      structure.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-resign</emphasis></term>
          <listitem>
            <para>
	      resign a message: take an existing message and one or more
	      new signers.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-data_create</emphasis></term>
          <listitem>
            <para>
	      Create a CMS <emphasis role="bold">Data</emphasis> type.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-data_out</emphasis></term>
          <listitem>
            <para>
	      <emphasis role="bold">Data</emphasis> type and output the
	      content.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-digest_create</emphasis></term>
          <listitem>
            <para>
	      Create a CMS <emphasis role="bold">DigestedData</emphasis>
	      type.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-digest_verify</emphasis></term>
          <listitem>
            <para>
	      Verify a CMS <emphasis role="bold">DigestedData</emphasis>
	      type and output the content.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-compress</emphasis></term>
          <listitem>
            <para>
	      Create a CMS <emphasis role="bold">CompressedData</emphasis>
	      type. OpenSSL must be compiled with <emphasis role="bold">zlib</emphasis> support for this option to work,
	      otherwise it will output an error.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-uncompress</emphasis></term>
          <listitem>
            <para>
	      Uncompress a CMS <emphasis role="bold">CompressedData</emphasis> type and output the
	      content. OpenSSL must be compiled with <emphasis role="bold">zlib</emphasis> support for this option to work,
	      otherwise it will output an error.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-EncryptedData_encrypt</emphasis></term>
          <listitem>
            <para>
	      Encrypt content using supplied symmetric key and algorithm
	      using a CMS <emphasis role="bold">EncrytedData</emphasis>
	      type and output the content.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-sign_receipt</emphasis></term>
          <listitem>
            <para>
	      Generate and output a signed receipt for the supplied
	      message. The input message <emphasis role="bold">must</emphasis> contain a signed receipt request.
	      Functionality is otherwise similar to the <emphasis role="bold">-sign</emphasis> operation.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify_receipt receipt</emphasis></term>
          <listitem>
            <para>
	      Verify a signed receipt in filename <emphasis role="bold">receipt</emphasis>. The input message <emphasis role="bold">must</emphasis> contain the original receipt
	      request. Functionality is otherwise similar to the <emphasis role="bold">-verify</emphasis> operation.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-in filename</emphasis></term>
          <listitem>
            <para>
	      the input message to be encrypted or signed or the message to
	      be decrypted or verified.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-inform SMIME|PEM|DER</emphasis></term>
          <listitem>
            <para>
	      this specifies the input format for the CMS structure. The
	      default is <emphasis role="bold">SMIME</emphasis> which reads
	      an S/MIME format message. <emphasis role="bold">PEM</emphasis> and <emphasis role="bold">DER</emphasis> format change this to expect PEM
	      and DER format CMS structures instead. This currently only
	      affects the input format of the CMS structure, if no CMS
	      structure is being input (for example with <emphasis role="bold">-encrypt</emphasis> or <emphasis role="bold">-sign</emphasis>) this option has no effect.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-rctform SMIME|PEM|DER</emphasis></term>
          <listitem>
            <para>
	      specify the format for a signed receipt for use with the
	      <emphasis role="bold">-receipt_verify</emphasis> operation.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-out filename</emphasis></term>
          <listitem>
            <para>
	      the message text that has been decrypted or verified or the
	      output MIME format message that has been signed or verified.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-outform SMIME|PEM|DER</emphasis></term>
          <listitem>
            <para>
	      this specifies the output format for the CMS structure. The
	      default is <emphasis role="bold">SMIME</emphasis> which
	      writes an S/MIME format message. <emphasis role="bold">PEM</emphasis> and <emphasis role="bold">DER</emphasis> format change this to write PEM
	      and DER format CMS structures instead. This currently only
	      affects the output format of the CMS structure, if no CMS
	      structure is being output (for example with <emphasis role="bold">-verify</emphasis> or <emphasis role="bold">-decrypt</emphasis>) this option has no effect.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-stream -indef -noindef</emphasis></term>
          <listitem>
            <para>
	      the <emphasis role="bold">-stream</emphasis> and <emphasis role="bold">-indef</emphasis> options are equivalent and
	      enable streaming I/O for encoding operations. This permits
	      single pass processing of data without the need to hold the
	      entire contents in memory, potentially supporting very large
	      files. Streaming is automatically set for S/MIME signing with
	      detached data if the output format is <emphasis role="bold">SMIME</emphasis> it is currently off by default
	      for all other operations.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-noindef</emphasis></term>
          <listitem>
            <para>
	      disable streaming I/O where it would produce and indefinite
	      length constructed encoding. This option currently has no
	      effect. In future streaming will be enabled by default on all
	      relevant operations and this option will disable it.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-content filename</emphasis></term>
          <listitem>
            <para>
	      This specifies a file containing the detached content, this
	      is only useful with the <emphasis role="bold">-verify</emphasis> command. This is only usable
	      if the CMS structure is using the detached signature form
	      where the content is not included. This option will override
	      any content if the input format is S/MIME and it uses the
	      multipart/signed MIME content type.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-text</emphasis></term>
          <listitem>
            <para>
	      this option adds plain text (text/plain) MIME headers to the
	      supplied message if encrypting or signing. If decrypting or
	      verifying it strips off text headers: if the decrypted or
	      verified message is not of MIME type text/plain then an error
	      occurs.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-noout</emphasis></term>
          <listitem>
            <para>
	      for the <emphasis role="bold">-cmsout</emphasis> operation do
	      not output the parsed CMS structure. This is useful when
	      combined with the <emphasis role="bold">-print</emphasis>
	      option or if the syntax of the CMS structure is being
	      checked.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-print</emphasis></term>
          <listitem>
            <para>
	      for the <emphasis role="bold">-cmsout</emphasis> operation
	      print out all fields of the CMS structure. This is mainly
	      useful for testing purposes.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-CAfile file</emphasis></term>
          <listitem>
            <para>
	      a file containing trusted CA certificates, only used with
	      <emphasis role="bold">-verify</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-CApath dir</emphasis></term>
          <listitem>
            <para>
	      a directory containing trusted CA certificates, only used
	      with <emphasis role="bold">-verify</emphasis>. This directory
	      must be a standard certificate directory: that is a hash of
	      each subject name (using <emphasis role="bold">x509
	      -hash</emphasis>) should be linked to each certificate.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no-CAfile</emphasis></term>
          <listitem>
            <para>
	      Do not load the trusted CA certificates from the default file
	      location
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no-CApath</emphasis></term>
          <listitem>
            <para>
	      Do not load the trusted CA certificates from the default
	      directory location
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-md digest</emphasis></term>
          <listitem>
            <para>
	      digest algorithm to use when signing or resigning. If not
	      present then the default digest algorithm for the signing key
	      will be used (usually SHA1).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-[cipher]</emphasis></term>
          <listitem>
            <para>
	      the encryption algorithm to use. For example triple DES (168
	      bits) - <emphasis role="bold">-des3</emphasis> or 256 bit AES
	      - <emphasis role="bold">-aes256</emphasis>. Any standard
	      algorithm name (as used by the EVP_get_cipherbyname()
	      function) can also be used preceded by a dash, for example
	      <emphasis role="bold">-aes-128-cbc</emphasis>. See <emphasis role="bold">enc</emphasis> for a list of ciphers supported by
	      your version of OpenSSL.
            </para>
            <para>
	      If not specified triple DES is used. Only used with <emphasis role="bold">-encrypt</emphasis> and <emphasis role="bold">-EncryptedData_create</emphasis> commands.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nointern</emphasis></term>
          <listitem>
            <para>
	      when verifying a message normally certificates (if any)
	      included in the message are searched for the signing
	      certificate. With this option only the certificates specified
	      in the <emphasis role="bold">-certfile</emphasis> option are
	      used. The supplied certificates can still be used as
	      untrusted CAs however.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no_signer_cert_verify</emphasis></term>
          <listitem>
            <para>
	      do not verify the signers certificate of a signed message.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nocerts</emphasis></term>
          <listitem>
            <para>
	      when signing a message the signer's certificate is normally
	      included with this option it is excluded. This will reduce
	      the size of the signed message but the verifier must have a
	      copy of the signers certificate available locally (passed
	      using the <emphasis role="bold">-certfile</emphasis> option
	      for example).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-noattr</emphasis></term>
          <listitem>
            <para>
	      normally when a message is signed a set of attributes are
	      included which include the signing time and supported
	      symmetric algorithms. With this option they are not included.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nosmimecap</emphasis></term>
          <listitem>
            <para>
	      exclude the list of supported algorithms from signed
	      attributes, other options such as signing time and content
	      type are still included.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-binary</emphasis></term>
          <listitem>
            <para>
	      normally the input message is converted to "canonical" format
	      which is effectively using CR and LF as end of line: as
	      required by the S/MIME specification. When this option is
	      present no translation occurs. This is useful when handling
	      binary data which may not be in MIME format.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-crlfeol</emphasis></term>
          <listitem>
            <para>
	      normally the output file uses a single <emphasis role="bold">LF</emphasis> as end of line. When this option is
	      present <emphasis role="bold">CRLF</emphasis> is used
	      instead.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-asciicrlf</emphasis></term>
          <listitem>
            <para>
	      when signing use ASCII CRLF format canonicalisation. This
	      strips trailing whitespace from all lines, deletes trailing
	      blank lines at EOF and sets the encapsulated content type.
	      This option is normally used with detached content and an
	      output signature format of DER. This option is not normally
	      needed when verifying as it is enabled automatically if the
	      encapsulated content format is detected.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nodetach</emphasis></term>
          <listitem>
            <para>
	      when signing a message use opaque signing: this form is more
	      resistant to translation by mail relays but it cannot be read
	      by mail agents that do not support S/MIME.  Without this
	      option cleartext signing with the MIME type multipart/signed
	      is used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-certfile file</emphasis></term>
          <listitem>
            <para>
	      allows additional certificates to be specified. When signing
	      these will be included with the message. When verifying these
	      will be searched for the signers certificates. The
	      certificates should be in PEM format.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-certsout file</emphasis></term>
          <listitem>
            <para>
	      any certificates contained in the message are written to
	      <emphasis role="bold">file</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-signer file</emphasis></term>
          <listitem>
            <para>
	      a signing certificate when signing or resigning a message,
	      this option can be used multiple times if more than one
	      signer is required. If a message is being verified then the
	      signers certificates will be written to this file if the
	      verification was successful.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-recip file</emphasis></term>
          <listitem>
            <para>
	      when decrypting a message this specifies the recipients
	      certificate. The certificate must match one of the recipients
	      of the message or an error occurs.
            </para>
            <para>
	      When encrypting a message this option may be used multiple
	      times to specify each recipient. This form <emphasis role="bold">must</emphasis> be used if customised parameters
	      are required (for example to specify RSA-OAEP).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-keyid</emphasis></term>
          <listitem>
            <para>
	      use subject key identifier to identify certificates instead
	      of issuer name and serial number. The supplied certificate
	      <emphasis role="bold">must</emphasis> include a subject key
	      identifier extension. Supported by <emphasis role="bold">-sign</emphasis> and <emphasis role="bold">-encrypt</emphasis> options.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-receipt_request_all -receipt_request_first</emphasis></term>
          <listitem>
            <para>
	      for <emphasis role="bold">-sign</emphasis> option include a
	      signed receipt request. Indicate requests should be provided
	      by all recipient or first tier recipients (those mailed
	      directly and not from a mailing list). Ignored it <emphasis role="bold">-receipt_request_from</emphasis> is included.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-receipt_request_from emailaddress</emphasis></term>
          <listitem>
            <para>
	      for <emphasis role="bold">-sign</emphasis> option include a
	      signed receipt request. Add an explicit email address where
	      receipts should be supplied.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-receipt_request_to emailaddress</emphasis></term>
          <listitem>
            <para>
	      Add an explicit email address where signed receipts should be
	      sent to. This option <emphasis role="bold">must</emphasis>
	      but supplied if a signed receipt it requested.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-receipt_request_print</emphasis></term>
          <listitem>
            <para>
	      For the <emphasis role="bold">-verify</emphasis> operation
	      print out the contents of any signed receipt requests.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-secretkey key</emphasis></term>
          <listitem>
            <para>
	      specify symmetric key to use. The key must be supplied in hex
	      format and be consistent with the algorithm used. Supported
	      by the <emphasis role="bold">-EncryptedData_encrypt</emphasis> <emphasis role="bold">-EncryptedData_decrypt</emphasis>, <emphasis role="bold">-encrypt</emphasis> and <emphasis role="bold">-decrypt</emphasis> options. When used with
	      <emphasis role="bold">-encrypt</emphasis> or <emphasis role="bold">-decrypt</emphasis> the supplied key is used to
	      wrap or unwrap the content encryption key using an AES key in
	      the <emphasis role="bold">KEKRecipientInfo</emphasis> type.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-secretkeyid id</emphasis></term>
          <listitem>
            <para>
	      the key identifier for the supplied symmetric key for
	      <emphasis role="bold">KEKRecipientInfo</emphasis> type. This
	      option <emphasis role="bold">must</emphasis> be present if
	      the <emphasis role="bold">-secretkey</emphasis> option is
	      used with <emphasis role="bold">-encrypt</emphasis>. With
	      <emphasis role="bold">-decrypt</emphasis> operations the
	      <emphasis role="bold">id</emphasis> is used to locate the
	      relevant key if it is not supplied then an attempt is used to
	      decrypt any <emphasis role="bold">KEKRecipientInfo</emphasis>
	      structures.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-econtent_type type</emphasis></term>
          <listitem>
            <para>
	      set the encapsulated content type to <emphasis role="bold">type</emphasis> if not supplied the <emphasis role="bold">Data</emphasis> type is used. The <emphasis role="bold">type</emphasis> argument can be any valid OID
	      name in either text or numerical format.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-inkey file</emphasis></term>
          <listitem>
            <para>
	      the private key to use when signing or decrypting. This must
	      match the corresponding certificate. If this option is not
	      specified then the private key must be included in the
	      certificate file specified with the <emphasis role="bold">-recip</emphasis> or <emphasis role="bold">-signer</emphasis> file. When signing this option
	      can be used multiple times to specify successive keys.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-keyopt name:opt</emphasis></term>
          <listitem>
            <para>
	      for signing and encryption this option can be used multiple
	      times to set customised parameters for the preceding key or
	      certificate. It can currently be used to set RSA-PSS for
	      signing, RSA-OAEP for encryption or to modify default
	      parameters for ECDH.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-passin arg</emphasis></term>
          <listitem>
            <para>
	      the private key password source. For more information about
	      the format of <emphasis role="bold">arg</emphasis> see the
	      <emphasis role="bold">PASS PHRASE ARGUMENTS</emphasis>
	      section in <citerefentry>
	      <refentrytitle>openssl</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-rand file(s)</emphasis></term>
          <listitem>
            <para>
	      a file or files containing random data used to seed the
	      random number generator, or an EGD socket (see <citerefentry>
	      <refentrytitle>RAND_egd</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry>). Multiple files can
	      be specified separated by an OS-dependent character. The
	      separator is <emphasis role="bold">;</emphasis> for
	      MS-Windows, <emphasis role="bold">,</emphasis> for OpenVMS,
	      and <emphasis role="bold">:</emphasis> for all others.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">cert.pem...</emphasis></term>
          <listitem>
            <para>
	      one or more certificates of message recipients: used when
	      encrypting a message.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-to, -from, -subject</emphasis></term>
          <listitem>
            <para>
	      the relevant mail headers. These are included outside the
	      signed portion of a message so they may be included manually.
	      If signing then many S/MIME mail clients check the signers
	      certificate's email address matches that specified in the
	      From: address.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-attime</emphasis>, <emphasis role="bold">-check_ss_sig</emphasis>, <emphasis role="bold">-crl_check</emphasis>, <emphasis role="bold">-crl_check_all</emphasis>,
<emphasis role="bold">-explicit_policy</emphasis>, <emphasis role="bold">-extended_crl</emphasis>, <emphasis role="bold">-ignore_critical</emphasis>, <emphasis role="bold">-inhibit_any</emphasis>,
<emphasis role="bold">-inhibit_map</emphasis>, <emphasis role="bold">-no_alt_chains</emphasis>, <emphasis role="bold">-no_check_time</emphasis>, <emphasis role="bold">-partial_chain</emphasis>, <emphasis role="bold">-policy</emphasis>,
<emphasis role="bold">-policy_check</emphasis>, <emphasis role="bold">-policy_print</emphasis>, <emphasis role="bold">-purpose</emphasis>, <emphasis role="bold">-suiteB_128</emphasis>,
<emphasis role="bold">-suiteB_128_only</emphasis>, <emphasis role="bold">-suiteB_192</emphasis>, <emphasis role="bold">-trusted_first</emphasis>, <emphasis role="bold">-use_deltas</emphasis>,
<emphasis role="bold">-auth_level</emphasis>, <emphasis role="bold">-verify_depth</emphasis>, <emphasis role="bold">-verify_email</emphasis>, <emphasis role="bold">-verify_hostname</emphasis>,
<emphasis role="bold">-verify_ip</emphasis>, <emphasis role="bold">-verify_name</emphasis>, <emphasis role="bold">-x509_strict</emphasis></term>
          <listitem>
            <para>
	      Set various certificate chain validation options. See the
	      <citerefentry> <refentrytitle>verify</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry> manual page for
	      details.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-1a93525c78b17322c3da2a93d2f7525a"><title>NOTES</title>
    <para>
      The MIME message must be sent without any blank lines between the
      headers and the output. Some mail programs will automatically add a
      blank line. Piping the mail directly to sendmail is one way to
      achieve the correct format.
    </para>
    <para>
      The supplied message to be signed or encrypted must include the
      necessary MIME headers or many S/MIME clients won't display it
      properly (if at all). You can use the <emphasis role="bold">-text</emphasis> option to automatically add plain text
      headers.
    </para>
    <para>
      A "signed and encrypted" message is one where a signed message is
      then encrypted. This can be produced by encrypting an already signed
      message: see the examples section.
    </para>
    <para>
      This version of the program only allows one signer per message but it
      will verify multiple signers on received messages. Some S/MIME
      clients choke if a message contains multiple signers. It is possible
      to sign messages "in parallel" by signing an already signed message.
    </para>
    <para>
      The options <emphasis role="bold">-encrypt</emphasis> and <emphasis role="bold">-decrypt</emphasis> reflect common usage in S/MIME
      clients. Strictly speaking these process CMS enveloped data: CMS
      encrypted data is used for other purposes.
    </para>
    <para>
      The <emphasis role="bold">-resign</emphasis> option uses an existing
      message digest when adding a new signer. This means that attributes
      must be present in at least one existing signer using the same
      message digest or this operation will fail.
    </para>
    <para>
      The <emphasis role="bold">-stream</emphasis> and <emphasis role="bold">-indef</emphasis> options enable streaming I/O support.
      As a result the encoding is BER using indefinite length constructed
      encoding and no longer DER. Streaming is supported for the <emphasis role="bold">-encrypt</emphasis> operation and the <emphasis role="bold">-sign</emphasis> operation if the content is not
      detached.
    </para>
    <para>
      Streaming is always used for the <emphasis role="bold">-sign</emphasis> operation with detached data but since
      the content is no longer part of the CMS structure the encoding
      remains DER.
    </para>
    <para>
      If the <emphasis role="bold">-decrypt</emphasis> option is used
      without a recipient certificate then an attempt is made to locate the
      recipient by trying each potential recipient in turn using the
      supplied private key. To thwart the MMA attack (Bleichenbacher's
      attack on PKCS #1 v1.5 RSA padding) all recipients are tried whether
      they succeed or not and if no recipients match the message is
      "decrypted" using a random key which will typically output garbage.
      The <emphasis role="bold">-debug_decrypt</emphasis> option can be
      used to disable the MMA attack protection and return an error if no
      recipient can be found: this option should be used with caution. For
      a fuller description see <citerefentry>
      <refentrytitle>CMS_decrypt</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>).
    </para>
  </refsection>
  <refsection xml:id="ID-4b4528461beee5c3cbf8cb8c54797d0f"><title>EXIT CODES</title>
    <para>
      <variablelist>
        <varlistentry>
          <term>0</term>
          <listitem>
            <para>
	      the operation was completely successfully.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>1</term>
          <listitem>
            <para>
	      an error occurred parsing the command options.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>2</term>
          <listitem>
            <para>
	      one of the input files could not be read.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>3</term>
          <listitem>
            <para>
	      an error occurred creating the CMS file or when reading the
	      MIME message.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>4</term>
          <listitem>
            <para>
	      an error occurred decrypting or verifying the message.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>5</term>
          <listitem>
            <para>
	      the message was verified correctly but an error occurred
	      writing out the signers certificates.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-3b836b6a17cd7f9555c54c531ffa62b9"><title>COMPATIBILITY WITH PKCS#7 format.</title>
    <para>
      The <emphasis role="bold">smime</emphasis> utility can only process
      the older <emphasis role="bold">PKCS#7</emphasis> format. The
      <emphasis role="bold">cms</emphasis> utility supports Cryptographic
      Message Syntax format. Use of some features will result in messages
      which cannot be processed by applications which only support the
      older format. These are detailed below.
    </para>
    <para>
      The use of the <emphasis role="bold">-keyid</emphasis> option with
      <emphasis role="bold">-sign</emphasis> or <emphasis role="bold">-encrypt</emphasis>.
    </para>
    <para>
      The <emphasis role="bold">-outform PEM</emphasis> option uses
      different headers.
    </para>
    <para>
      The <emphasis role="bold">-compress</emphasis> option.
    </para>
    <para>
      The <emphasis role="bold">-secretkey</emphasis> option when used with
      <emphasis role="bold">-encrypt</emphasis>.
    </para>
    <para>
      The use of PSS with <emphasis role="bold">-sign</emphasis>.
    </para>
    <para>
      The use of OAEP or non-RSA keys with <emphasis role="bold">-encrypt</emphasis>.
    </para>
    <para>
      Additionally the <emphasis role="bold">-EncryptedData_create</emphasis> and <emphasis role="bold">-data_create</emphasis> type cannot be processed by the
      older <emphasis role="bold">smime</emphasis> command.
    </para>
  </refsection>
  <refsection xml:id="ID-03ab7db40fb2d48bf262bd6198499c35"><title>EXAMPLES</title>
    <para>
      Create a cleartext signed message:
    </para>
    <screen>openssl cms -sign -in message.txt -text -out mail.msg \
       -signer mycert.pem</screen>
    <para>
      Create an opaque signed message
    </para>
    <screen>openssl cms -sign -in message.txt -text -out mail.msg -nodetach \
       -signer mycert.pem</screen>
    <para>
      Create a signed message, include some additional certificates and
      read the private key from another file:
    </para>
    <screen>openssl cms -sign -in in.txt -text -out mail.msg \
       -signer mycert.pem -inkey mykey.pem -certfile mycerts.pem</screen>
    <para>
      Create a signed message with two signers, use key identifier:
    </para>
    <screen>openssl cms -sign -in message.txt -text -out mail.msg \
       -signer mycert.pem -signer othercert.pem -keyid</screen>
    <para>
      Send a signed message under Unix directly to sendmail, including
      headers:
    </para>
    <screen>openssl cms -sign -in in.txt -text -signer mycert.pem \
       -from steve@openssl.org -to someone@somewhere \
       -subject "Signed message" | sendmail someone@somewhere</screen>
    <para>
      Verify a message and extract the signer's certificate if successful:
    </para>
    <screen>openssl cms -verify -in mail.msg -signer user.pem -out signedtext.txt</screen>
    <para>
      Send encrypted mail using triple DES:
    </para>
    <screen>openssl cms -encrypt -in in.txt -from steve@openssl.org \
       -to someone@somewhere -subject "Encrypted message" \
       -des3 user.pem -out mail.msg</screen>
    <para>
      Sign and encrypt mail:
    </para>
    <screen>openssl cms -sign -in ml.txt -signer my.pem -text \
       | openssl cms -encrypt -out mail.msg \
       -from steve@openssl.org -to someone@somewhere \
       -subject "Signed and Encrypted message" -des3 user.pem</screen>
    <para>
      Note: the encryption command does not include the <emphasis role="bold">-text</emphasis> option because the message being
      encrypted already has MIME headers.
    </para>
    <para>
      Decrypt mail:
    </para>
    <screen>openssl cms -decrypt -in mail.msg -recip mycert.pem -inkey key.pem</screen>
    <para>
      The output from Netscape form signing is a PKCS#7 structure with the
      detached signature format. You can use this program to verify the
      signature by line wrapping the base64 encoded structure and
      surrounding it with:
    </para>
    <screen>-----BEGIN PKCS7-----
-----END PKCS7-----</screen>
    <para>
      and using the command,
    </para>
    <screen>openssl cms -verify -inform PEM -in signature.pem -content content.txt</screen>
    <para>
      alternatively you can base64 decode the signature and use
    </para>
    <screen>openssl cms -verify -inform DER -in signature.der -content content.txt</screen>
    <para>
      Create an encrypted message using 128 bit Camellia:
    </para>
    <screen>openssl cms -encrypt -in plain.txt -camellia128 -out mail.msg cert.pem</screen>
    <para>
      Add a signer to an existing message:
    </para>
    <screen>openssl cms -resign -in mail.msg -signer newsign.pem -out mail2.msg</screen>
    <para>
      Sign mail using RSA-PSS:
    </para>
    <screen>openssl cms -sign -in message.txt -text -out mail.msg \
       -signer mycert.pem -keyopt rsa_padding_mode:pss</screen>
    <para>
      Create encrypted mail using RSA-OAEP:
    </para>
    <screen>openssl cms -encrypt -in plain.txt -out mail.msg \
       -recip cert.pem -keyopt rsa_padding_mode:oaep</screen>
    <para>
      Use SHA256 KDF with an ECDH certificate:
    </para>
    <screen>openssl cms -encrypt -in plain.txt -out mail.msg \
       -recip ecdhcert.pem -keyopt ecdh_kdf_md:sha256</screen>
  </refsection>
  <refsection xml:id="ID-f4be91aed942fcb8ba2536e301a0b4c2"><title>BUGS</title>
    <para>
      The MIME parser isn't very clever: it seems to handle most messages
      that I've thrown at it but it may choke on others.
    </para>
    <para>
      The code currently will only write out the signer's certificate to a
      file: if the signer has a separate encryption certificate this must
      be manually extracted. There should be some heuristic that determines
      the correct encryption certificate.
    </para>
    <para>
      Ideally a database should be maintained of a certificates for each
      email address.
    </para>
    <para>
      The code doesn't currently take note of the permitted symmetric
      encryption algorithms as supplied in the SMIMECapabilities signed
      attribute. this means the user has to manually include the correct
      encryption algorithm. It should store the list of permitted ciphers
      in a database and only use those.
    </para>
    <para>
      No revocation checking is done on the signer's certificate.
    </para>
  </refsection>
  <refsection xml:id="ID-c1e32b894e3e5c1a07892b8032321c71"><title>HISTORY</title>
    <para>
      The use of multiple <emphasis role="bold">-signer</emphasis> options
      and the <emphasis role="bold">-resign</emphasis> command were first
      added in OpenSSL 1.0.0
    </para>
    <para>
      The <emphasis role="bold">keyopt</emphasis> option was first added in
      OpenSSL 1.1.0
    </para>
    <para>
      The use of <emphasis role="bold">-recip</emphasis> to specify the
      recipient when encrypting mail was first added to OpenSSL 1.1.0
    </para>
    <para>
      Support for RSA-OAEP and RSA-PSS was first added to OpenSSL 1.1.0.
    </para>
    <para>
      The use of non-RSA keys with <emphasis role="bold">-encrypt</emphasis> and <emphasis role="bold">-decrypt</emphasis> was first added to OpenSSL 1.1.0.
    </para>
    <para>
      The -no_alt_chains options was first added to OpenSSL 1.1.0.
    </para>
  </refsection>
  <refsection xml:id="ID-e677a3327142a4b98de2106dd000a2e8"><title>COPYRIGHT</title>
    <para>
      Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>