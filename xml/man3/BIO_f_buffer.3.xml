<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_f_buffer.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_f_buffer</refname>
<refpurpose>buffering BIO</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/bio.h&gt;</synopsis>
<synopsis format="linespecific">BIO_METHOD * BIO_f_buffer(void);</synopsis>
<synopsis format="linespecific">#define BIO_get_buffer_num_lines(b)    BIO_ctrl(b,BIO_C_GET_BUFF_NUM_LINES,0,NULL)
#define BIO_set_read_buffer_size(b,size) BIO_int_ctrl(b,BIO_C_SET_BUFF_SIZE,size,0)
#define BIO_set_write_buffer_size(b,size) BIO_int_ctrl(b,BIO_C_SET_BUFF_SIZE,size,1)
#define BIO_set_buffer_size(b,size)    BIO_ctrl(b,BIO_C_SET_BUFF_SIZE,size,NULL)
#define BIO_set_buffer_read_data(b,buf,num) BIO_ctrl(b,BIO_C_SET_BUFF_READ_DATA,num,buf)</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.BIO_f_buffer.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      BIO_f_buffer() returns the buffering BIO method.
    </para>
    <para>
      Data written to a buffering BIO is buffered and periodically written
      to the next BIO in the chain. Data read from a buffering BIO comes
      from an internal buffer which is filled from the next BIO in the
      chain. Both BIO_gets() and BIO_puts() are supported.
    </para>
    <para>
      Calling BIO_reset() on a buffering BIO clears any buffered data.
    </para>
    <para>
      BIO_get_buffer_num_lines() returns the number of lines currently
      buffered.
    </para>
    <para>
      BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and
      BIO_set_buffer_size() set the read, write or both read and write
      buffer sizes to <emphasis role="bold">size</emphasis>. The initial
      buffer size is DEFAULT_BUFFER_SIZE, currently 4096. Any attempt to
      reduce the buffer size below DEFAULT_BUFFER_SIZE is ignored. Any
      buffered data is cleared when the buffer is resized.
    </para>
    <para>
      BIO_set_buffer_read_data() clears the read buffer and fills it with
      <emphasis role="bold">num</emphasis> bytes of <emphasis role="bold">buf</emphasis>. If <emphasis role="bold">num</emphasis>
      is larger than the current buffer size the buffer is expanded.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BIO_f_buffer.pod:NOTES"><title>NOTES</title>
    <para>
      Buffering BIOs implement BIO_gets() by using BIO_read() operations on
      the next BIO in the chain. By prepending a buffering BIO to a chain
      it is therefore possible to provide BIO_gets() functionality if the
      following BIOs do not support it (for example SSL BIOs).
    </para>
    <para>
      Data is only written to the next BIO in the chain when the write
      buffer fills or when BIO_flush() is called. It is therefore important
      to call BIO_flush() whenever any pending data should be written such
      as when removing a buffering BIO using BIO_pop(). BIO_flush() may
      need to be retried if the ultimate source/sink BIO is non blocking.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BIO_f_buffer.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      BIO_f_buffer() returns the buffering BIO method.
    </para>
    <para>
      BIO_get_buffer_num_lines() returns the number of lines buffered (may
      be 0).
    </para>
    <para>
      BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and
      BIO_set_buffer_size() return 1 if the buffer was successfully resized
      or 0 for failure.
    </para>
    <para>
      BIO_set_buffer_read_data() returns 1 if the data was set correctly or
      0 if there was an error.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.BIO_f_buffer.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      BIO(3), BIO_reset(3), BIO_flush(3), BIO_pop(3), BIO_ctrl(3),
      BIO_int_ctrl(3)
    </para>
  </refsection>
</refentry>