<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CIPHER_get_name.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CIPHER_get_name, SSL_CIPHER_get_bits, SSL_CIPHER_get_version, SSL_CIPHER_description</refname>
<refpurpose>get SSL_CIPHER properties</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>const char *SSL_CIPHER_get_name(const SSL_CIPHER *cipher);
int SSL_CIPHER_get_bits(const SSL_CIPHER *cipher, int *alg_bits);
char *SSL_CIPHER_get_version(const SSL_CIPHER *cipher);
char *SSL_CIPHER_description(const SSL_CIPHER *cipher, char *buf, int size);
int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c);
int SSL_CIPHER_get_digest_nid(const SSL_CIPHER *c);
int SSL_CIPHER_get_kx_nid(const SSL_CIPHER *c);
int SSL_CIPHER_get_auth_nid(const SSL_CIPHER *c);
int SSL_CIPHER_is_aead(const SSL_CIPHER *c);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-297f52d37c7901b4c78a50c535e67c89"><title>DESCRIPTION</title>
    <para>
      SSL_CIPHER_get_name() returns a pointer to the name of <emphasis role="bold">cipher</emphasis>. If the <emphasis role="bold">cipher</emphasis> is NULL, it returns "(NONE)".
    </para>
    <para>
      SSL_CIPHER_get_bits() returns the number of secret bits used for
      <emphasis role="bold">cipher</emphasis>. If <emphasis role="bold">cipher</emphasis> is NULL, 0 is returned.
    </para>
    <para>
      SSL_CIPHER_get_version() returns string which indicates the SSL/TLS
      protocol version that first defined the cipher.  It returns "(NONE)"
      if <emphasis role="bold">cipher</emphasis> is NULL.
    </para>
    <para>
      SSL_CIPHER_get_cipher_nid() returns the cipher NID corresponding to
      <emphasis role="bold">c</emphasis>. If there is no cipher (e.g. for
      ciphersuites with no encryption) then <emphasis role="bold">NID_undef</emphasis> is returned.
    </para>
    <para>
      SSL_CIPHER_get_digest_nid() returns the digest NID corresponding to
      the MAC used by <emphasis role="bold">c</emphasis>. If there is no
      digest (e.g. for AEAD ciphersuites) then <emphasis role="bold">NID_undef</emphasis> is returned.
    </para>
    <para>
      SSL_CIPHER_get_kx_nid() returns the key exchange NID corresponding to
      the method used by <emphasis role="bold">c</emphasis>. If there is no
      key exchange, then <emphasis role="bold">NID_undef</emphasis> is
      returned. Examples (not comprehensive):
    </para>
    <screen>NID_kx_rsa
NID_kx_ecdhe
NID_kx_dhe
NID_kx_psk</screen>
    <para>
      SSL_CIPHER_get_auth_nid() returns the authentication NID
      corresponding to the method used by <emphasis role="bold">c</emphasis>. If there is no authentication, then
      <emphasis role="bold">NID_undef</emphasis> is returned. Examples (not
      comprehensive):
    </para>
    <screen>NID_auth_rsa
NID_auth_ecdsa
NID_auth_psk</screen>
    <para>
      SSL_CIPHER_is_aead() returns 1 if the cipher <emphasis role="bold">c</emphasis> is AEAD (e.g. GCM or ChaCha20/Poly1305), and
      0 if it is not AEAD.
    </para>
    <para>
      SSL_CIPHER_description() returns a textual description of the cipher
      used into the buffer <emphasis role="bold">buf</emphasis> of length
      <emphasis role="bold">len</emphasis> provided.  If <emphasis role="bold">buf</emphasis> is provided, it must be at least 128
      bytes, otherwise a buffer will be allocated using OPENSSL_malloc(). 
      If the provided buffer is too small, or the allocation fails,
      <emphasis role="bold">NULL</emphasis> is returned.
    </para>
    <para>
      The string returned by SSL_CIPHER_description() consists of several
      fields separated by whitespace:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>&lt;ciphername&gt;</term>
          <listitem>
            <para>
	      Textual representation of the cipher name.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&lt;protocol version&gt;</term>
          <listitem>
            <para>
	      Protocol version, such as <emphasis role="bold">TLSv1.2</emphasis>, when the cipher was first
	      defined.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Kx=&lt;key exchange&gt;</term>
          <listitem>
            <para>
	      Key exchange method such as <emphasis role="bold">RSA</emphasis>, <emphasis role="bold">ECDHE</emphasis>, etc.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Au=&lt;authentication&gt;</term>
          <listitem>
            <para>
	      Authentication method such as <emphasis role="bold">RSA</emphasis>, <emphasis role="bold">None</emphasis>, etc.. None is the representation
	      of anonymous ciphers.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Enc=&lt;symmetric encryption method&gt;</term>
          <listitem>
            <para>
	      Encryption method, with number of secret bits, such as
	      <emphasis role="bold">AESGCM(128)</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Mac=&lt;message authentication code&gt;</term>
          <listitem>
            <para>
	      Message digest, such as <emphasis role="bold">SHA256</emphasis>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      Some examples for the output of SSL_CIPHER_description():
    </para>
    <screen>ECDHE-RSA-AES256-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(256) Mac=AEAD
RSA-PSK-AES256-CBC-SHA384 TLSv1.0 Kx=RSAPSK   Au=RSA  Enc=AES(256)  Mac=SHA384</screen>
  </refsection>
  <refsection xml:id="ID-1a907f2caad2d0601d541e5833071443"><title>HISTORY</title>
    <para>
      SSL_CIPHER_get_version() was updated to always return the correct
      protocol string in OpenSSL 1.1.
    </para>
    <para>
      SSL_CIPHER_description() was changed to return <emphasis role="bold">NULL</emphasis> on error, rather than a fixed string, in
      OpenSSL 1.1
    </para>
  </refsection>
  <refsection xml:id="ID-8be33cdb5d3ce4379ae3d41e8f4144ec"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_current_cipher</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_ciphers</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ciphers</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-a25cd46d976313ca48b9ca2102231837"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>