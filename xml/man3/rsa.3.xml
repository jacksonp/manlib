<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>rsa.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>rsa</refname>
<refpurpose>RSA public key cryptosystem</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/rsa.h&gt;
#include &lt;openssl/engine.h&gt;</synopsis>
<synopsis format="linespecific">RSA * RSA_new(void);
void RSA_free(RSA *rsa);</synopsis>
<synopsis format="linespecific">int RSA_public_encrypt(int flen, unsigned char *from,
   unsigned char *to, RSA *rsa, int padding);
int RSA_private_decrypt(int flen, unsigned char *from,
   unsigned char *to, RSA *rsa, int padding);
int RSA_private_encrypt(int flen, unsigned char *from,
   unsigned char *to, RSA *rsa,int padding);
int RSA_public_decrypt(int flen, unsigned char *from, 
   unsigned char *to, RSA *rsa,int padding);</synopsis>
<synopsis format="linespecific">int RSA_sign(int type, unsigned char *m, unsigned int m_len,
   unsigned char *sigret, unsigned int *siglen, RSA *rsa);
int RSA_verify(int type, unsigned char *m, unsigned int m_len,
   unsigned char *sigbuf, unsigned int siglen, RSA *rsa);</synopsis>
<synopsis format="linespecific">int RSA_size(const RSA *rsa);</synopsis>
<synopsis format="linespecific">RSA *RSA_generate_key(int num, unsigned long e,
   void (*callback)(int,int,void *), void *cb_arg);</synopsis>
<synopsis format="linespecific">int RSA_check_key(RSA *rsa);</synopsis>
<synopsis format="linespecific">int RSA_blinding_on(RSA *rsa, BN_CTX *ctx);
void RSA_blinding_off(RSA *rsa);</synopsis>
<synopsis format="linespecific">void RSA_set_default_method(const RSA_METHOD *meth);
const RSA_METHOD *RSA_get_default_method(void);
int RSA_set_method(RSA *rsa, const RSA_METHOD *meth);
const RSA_METHOD *RSA_get_method(const RSA *rsa);
RSA_METHOD *RSA_PKCS1_SSLeay(void);
RSA_METHOD *RSA_null_method(void);
int RSA_flags(const RSA *rsa);
RSA *RSA_new_method(ENGINE *engine);</synopsis>
<synopsis format="linespecific">int RSA_print(BIO *bp, RSA *x, int offset);
int RSA_print_fp(FILE *fp, RSA *x, int offset);</synopsis>
<synopsis format="linespecific">int RSA_get_ex_new_index(long argl, char *argp, int (*new_func)(),
   int (*dup_func)(), void (*free_func)());
int RSA_set_ex_data(RSA *r,int idx,char *arg);
char *RSA_get_ex_data(RSA *r, int idx);</synopsis>
<synopsis format="linespecific">int RSA_sign_ASN1_OCTET_STRING(int dummy, unsigned char *m,
   unsigned int m_len, unsigned char *sigret, unsigned int *siglen,
   RSA *rsa);
int RSA_verify_ASN1_OCTET_STRING(int dummy, unsigned char *m,
   unsigned int m_len, unsigned char *sigbuf, unsigned int siglen,
   RSA *rsa);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.rsa.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      These functions implement RSA public key encryption and signatures as
      defined in PKCS #1 v2.0 [RFC 2437].
    </para>
    <para>
      The <emphasis role="bold">RSA</emphasis> structure consists of
      several BIGNUM components. It can contain public as well as private
      RSA keys:
    </para>
    <screen>struct
       {
       BIGNUM *n;              // public modulus
       BIGNUM *e;              // public exponent
       BIGNUM *d;              // private exponent
       BIGNUM *p;              // secret prime factor
       BIGNUM *q;              // secret prime factor
       BIGNUM *dmp1;           // d mod (p-1)
       BIGNUM *dmq1;           // d mod (q-1)
       BIGNUM *iqmp;           // q^-1 mod p
       // ...
       };
RSA</screen>
    <para>
      In public keys, the private exponent and the related secret values
      are <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      <emphasis role="bold">p</emphasis>, <emphasis role="bold">q</emphasis>, <emphasis role="bold">dmp1</emphasis>,
      <emphasis role="bold">dmq1</emphasis> and <emphasis role="bold">iqmp</emphasis> may be <emphasis role="bold">NULL</emphasis> in private keys, but the RSA operations
      are much faster when these values are available.
    </para>
    <para>
      Note that RSA keys may use non-standard <emphasis role="bold">RSA_METHOD</emphasis> implementations, either directly or
      by the use of <emphasis role="bold">ENGINE</emphasis> modules. In
      some cases (eg. an ENGINE providing support for hardware-embedded
      keys), these BIGNUM values will not be used by the implementation or
      may be used for alternative data storage. For this reason,
      applications should generally avoid using RSA structure elements
      directly and instead use API functions to query or modify keys.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.rsa.pod:CONFORMING_TO"><title>CONFORMING TO</title>
    <para>
      SSL, PKCS #1 v2.0
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.rsa.pod:PATENTS"><title>PATENTS</title>
    <para>
      RSA was covered by a US patent which expired in September 2000.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.rsa.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      rsa(1), bn(3), dsa(3), dh(3), rand(3), engine(3), RSA_new(3),
      RSA_public_encrypt(3), RSA_sign(3), RSA_size(3), RSA_generate_key(3),
      RSA_check_key(3), RSA_blinding_on(3), RSA_set_method(3),
      RSA_print(3), RSA_get_ex_new_index(3), RSA_private_encrypt(3),
      RSA_sign_ASN1_OCTET_STRING(3), RSA_padding_add_PKCS1_type_1(3)
    </para>
  </refsection>
</refentry>