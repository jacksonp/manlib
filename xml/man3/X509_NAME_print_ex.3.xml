<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>X509_NAME_print_ex.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>X509_NAME_print_ex, X509_NAME_print_ex_fp, X509_NAME_print,
X509_NAME_oneline</refname>
<refpurpose>X509_NAME printing routines.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/x509.h&gt;</synopsis>
<synopsis format="linespecific">int X509_NAME_print_ex(BIO *out, X509_NAME *nm, int indent, unsigned long flags);
int X509_NAME_print_ex_fp(FILE *fp, X509_NAME *nm, int indent, unsigned long flags);
char * X509_NAME_oneline(X509_NAME *a,char *buf,int size);
int X509_NAME_print(BIO *bp, X509_NAME *name, int obase);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.X509_NAME_print_ex.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      X509_NAME_print_ex() prints a human readable version of <emphasis role="bold">nm</emphasis> to BIO <emphasis role="bold">out</emphasis>. Each line (for multiline formats) is
      indented by <emphasis role="bold">indent</emphasis> spaces. The
      output format can be extensively customised by use of the <emphasis role="bold">flags</emphasis> parameter.
    </para>
    <para>
      X509_NAME_print_ex_fp() is identical to X509_NAME_print_ex() except
      the output is written to FILE pointer <emphasis role="bold">fp</emphasis>.
    </para>
    <para>
      X509_NAME_oneline() prints an ASCII version of <emphasis role="bold">a</emphasis> to <emphasis role="bold">buf</emphasis>. At
      most <emphasis role="bold">size</emphasis> bytes will be written. If
      <emphasis role="bold">buf</emphasis> is <emphasis role="bold">NULL</emphasis> then a buffer is dynamically allocated
      and returned, otherwise <emphasis role="bold">buf</emphasis> is
      returned.
    </para>
    <para>
      X509_NAME_print() prints out <emphasis role="bold">name</emphasis> to
      <emphasis role="bold">bp</emphasis> indenting each line by <emphasis role="bold">obase</emphasis> characters. Multiple lines are used if
      the output (including indent) exceeds 80 characters. 
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.X509_NAME_print_ex.pod:NOTES"><title>NOTES</title>
    <para>
      The functions X509_NAME_oneline() and X509_NAME_print() are legacy
      functions which produce a non standard output form, they don't handle
      multi character fields and have various quirks and inconsistencies.
      Their use is strongly discouraged in new applications.
    </para>
    <para>
      Although there are a large number of possible flags for most purposes
      <emphasis role="bold">XN_FLAG_ONELINE</emphasis>, <emphasis role="bold">XN_FLAG_MULTILINE</emphasis> or <emphasis role="bold">XN_FLAG_RFC2253</emphasis> will suffice. As noted on the
      ASN1_STRING_print_ex(3) manual page for UTF8 terminals the <emphasis role="bold">ASN1_STRFLGS_ESC_MSB</emphasis> should be unset: so for
      example <emphasis role="bold">XN_FLAG_ONELINE &amp;
      ~ASN1_STRFLGS_ESC_MSB</emphasis> would be used.
    </para>
    <para>
      The complete set of the flags supported by X509_NAME_print_ex() is
      listed below.
    </para>
    <para>
      Several options can be ored together.
    </para>
    <para>
      The options <emphasis role="bold">XN_FLAG_SEP_COMMA_PLUS</emphasis>,
      <emphasis role="bold">XN_FLAG_SEP_CPLUS_SPC</emphasis>, <emphasis role="bold">XN_FLAG_SEP_SPLUS_SPC</emphasis> and <emphasis role="bold">XN_FLAG_SEP_MULTILINE</emphasis> determine the field
      separators to use. Two distinct separators are used between distinct
      RelativeDistinguishedName components and separate values in the same
      RDN for a multi-valued RDN. Multi-valued RDNs are currently very rare
      so the second separator will hardly ever be used.
    </para>
    <para>
      <emphasis role="bold">XN_FLAG_SEP_COMMA_PLUS</emphasis> uses comma
      and plus as separators. <emphasis role="bold">XN_FLAG_SEP_CPLUS_SPC</emphasis> uses comma and plus with
      spaces: this is more readable that plain comma and plus. <emphasis role="bold">XN_FLAG_SEP_SPLUS_SPC</emphasis> uses spaced semicolon
      and plus. <emphasis role="bold">XN_FLAG_SEP_MULTILINE</emphasis> uses
      spaced newline and plus respectively.
    </para>
    <para>
      If <emphasis role="bold">XN_FLAG_DN_REV</emphasis> is set the whole
      DN is printed in reversed order.
    </para>
    <para>
      The fields <emphasis role="bold">XN_FLAG_FN_SN</emphasis>, <emphasis role="bold">XN_FLAG_FN_LN</emphasis>, <emphasis role="bold">XN_FLAG_FN_OID</emphasis>, <emphasis role="bold">XN_FLAG_FN_NONE</emphasis> determine how a field name is
      displayed. It will use the short name (e.g. CN) the long name (e.g.
      commonName) always use OID numerical form (normally OIDs are only
      used if the field name is not recognised) and no field name
      respectively.
    </para>
    <para>
      If <emphasis role="bold">XN_FLAG_SPC_EQ</emphasis> is set then spaces
      will be placed around the '=' character separating field names and
      values.
    </para>
    <para>
      If <emphasis role="bold">XN_FLAG_DUMP_UNKNOWN_FIELDS</emphasis> is
      set then the encoding of unknown fields is printed instead of the
      values.
    </para>
    <para>
      If <emphasis role="bold">XN_FLAG_FN_ALIGN</emphasis> is set then
      field names are padded to 20 characters: this is only of use for
      multiline format.
    </para>
    <para>
      Additionally all the options supported by ASN1_STRING_print_ex() can
      be used to control how each field value is displayed. 
    </para>
    <para>
      In addition a number options can be set for commonly used formats.
    </para>
    <para>
      <emphasis role="bold">XN_FLAG_RFC2253</emphasis> sets options which
      produce an output compatible with RFC2253 it is equivalent to:
      <emphasis role="bold">ASN1_STRFLGS_RFC2253 | XN_FLAG_SEP_COMMA_PLUS |
      XN_FLAG_DN_REV | XN_FLAG_FN_SN |
      XN_FLAG_DUMP_UNKNOWN_FIELDS</emphasis>
    </para>
    <screen></screen>
    <para>
      <emphasis role="bold">XN_FLAG_ONELINE</emphasis> is a more readable
      one line format which is the same as: <emphasis role="bold">ASN1_STRFLGS_RFC2253 | ASN1_STRFLGS_ESC_QUOTE |
      XN_FLAG_SEP_CPLUS_SPC | XN_FLAG_SPC_EQ | XN_FLAG_FN_SN</emphasis>
    </para>
    <para>
      <emphasis role="bold">XN_FLAG_MULTILINE</emphasis> is a multiline
      format which is the same as: <emphasis role="bold">ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB |
      XN_FLAG_SEP_MULTILINE | XN_FLAG_SPC_EQ | XN_FLAG_FN_LN |
      XN_FLAG_FN_ALIGN</emphasis>
    </para>
    <para>
      <emphasis role="bold">XN_FLAG_COMPAT</emphasis> uses a format
      identical to X509_NAME_print(): in fact it calls X509_NAME_print()
      internally.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.X509_NAME_print_ex.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      ASN1_STRING_print_ex(3)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.X509_NAME_print_ex.pod:HISTORY"><title>HISTORY</title>
    <para>
      TBA
    </para>
  </refsection>
</refentry>