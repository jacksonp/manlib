<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>DH_get0_pqg.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>DH_get0_pqg, DH_set0_pqg, DH_get0_key, DH_set0_key, DH_clear_flags,
DH_test_flags, DH_set_flags, DH_get0_engine, DH_get_length,
DH_set_length</refname>
<refpurpose>Routines for getting and setting data in a DH object</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/dh.h&gt;</synopsis>
<synopsis>void DH_get0_pqg(const DH *dh, BIGNUM **p, BIGNUM **q, BIGNUM **g);
int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g);
void DH_get0_key(const DH *dh, BIGNUM **pub_key, BIGNUM **priv_key);
int DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key);
void DH_clear_flags(DH *dh, int flags);
int DH_test_flags(const DH *dh, int flags);
void DH_set_flags(DH *dh, int flags);
ENGINE *DH_get0_engine(DH *d);
long DH_get_length(const DH *dh);
int DH_set_length(DH *dh, long length);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-a3945ed82bba259305b2536222334e53"><title>DESCRIPTION</title>
    <para>
      A DH object contains the parameters <emphasis role="bold">p</emphasis>, <emphasis role="bold">q</emphasis> and
      <emphasis role="bold">g</emphasis>. Note that the <emphasis role="bold">q</emphasis> parameter is optional. It also contains a
      public key (<emphasis role="bold">pub_key</emphasis>) and
      (optionally) a private key (<emphasis role="bold">priv_key</emphasis>).
    </para>
    <para>
      The <emphasis role="bold">p</emphasis>, <emphasis role="bold">q</emphasis> and <emphasis role="bold">g</emphasis>
      parameters can be obtained by calling DH_get0_pqg(). If the
      parameters have not yet been set then <emphasis role="bold">*p</emphasis>, <emphasis role="bold">*q</emphasis> and
      <emphasis role="bold">*g</emphasis> will be set to NULL. Otherwise
      they are set to pointers to their respective values. These point
      directly to the internal representations of the values and therefore
      should not be freed directly.
    </para>
    <para>
      The <emphasis role="bold">p</emphasis>, <emphasis role="bold">q</emphasis> and <emphasis role="bold">g</emphasis>
      values can be set by calling DH_set0_pqg() and passing the new values
      for <emphasis role="bold">p</emphasis>, <emphasis role="bold">q</emphasis> and <emphasis role="bold">g</emphasis> as
      parameters to the function. Calling this function transfers the
      memory management of the values to the DH object, and therefore the
      values that have been passed in should not be freed directly after
      this function has been called. The <emphasis role="bold">q</emphasis>
      parameter may be NULL.
    </para>
    <para>
      To get the public and private key values use the DH_get0_key()
      function. A pointer to the public key will be stored in <emphasis role="bold">*pub_key</emphasis>, and a pointer to the private key
      will be stored in <emphasis role="bold">*priv_key</emphasis>. Either
      may be NULL if they have not been set yet, although if the private
      key has been set then the public key must be. The values point to the
      internal representation of the public key and private key values.
      This memory should not be freed directly.
    </para>
    <para>
      The public and private key values can be set using DH_set0_key(). The
      public key must be non-NULL the first time this function is called on
      a given DH object. The private key may be NULL.  On subsequent calls,
      either may be NULL, which means the corresponding DH field is left
      untouched. As for DH_set0_pqg() this function transfers the memory
      management of the key values to the DH object, and therefore they
      should not be freed directly after this function has been called.
    </para>
    <para>
      DH_set_flags() sets the flags in the <emphasis role="bold">flags</emphasis> parameter on the DH object. Multiple
      flags can be passed in one go (bitwise ORed together). Any flags that
      are already set are left set. DH_test_flags() tests to see whether
      the flags passed in the <emphasis role="bold">flags</emphasis>
      parameter are currently set in the DH object. Multiple flags can be
      tested in one go. All flags that are currently set are returned, or
      zero if none of the flags are set. DH_clear_flags() clears the
      specified flags within the DH object.
    </para>
    <para>
      DH_get0_engine() returns a handle to the ENGINE that has been set for
      this DH object, or NULL if no such ENGINE has been set.
    </para>
    <para>
      The DH_get_length() and DH_set_length() functions get and set the
      optional length parameter associated with this DH object. If the
      length is non-zero then it is used, otherwise it is ignored. The
      <emphasis role="bold">length</emphasis> parameter indicates the
      length of the secret exponent (private key) in bits.
    </para>
  </refsection>
  <refsection xml:id="ID-c0ac3edbce365880805dc948a0814337"><title>NOTES</title>
    <para>
      Values retrieved with DH_get0_key() are owned by the DH object used
      in the call and may therefore <emphasis role="italic">not</emphasis>
      be passed to DH_set0_key().  If needed, duplicate the received value
      using BN_dup() and pass the duplicate.  The same applies to
      DH_get0_pqg() and DH_set0_pqg().
    </para>
  </refsection>
  <refsection xml:id="ID-de18d61cda55ada8755ea38bacd2a25a"><title>RETURN VALUES</title>
    <para>
      DH_set0_pqg() and DH_set0_key() return 1 on success or 0 on failure.
    </para>
    <para>
      DH_test_flags() returns the current state of the flags in the DH
      object.
    </para>
    <para>
      DH_get0_engine() returns the ENGINE set for the DH object or NULL if
      no ENGINE has been set.
    </para>
    <para>
      DH_get_length() returns the length of the secret exponent (private
      key) in bits, or zero if no such length has been explicitly set.
    </para>
  </refsection>
  <refsection xml:id="ID-f5741a13f47255c25c691059d1abe6e4"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>dh</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>DH_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>DH_generate_parameters</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>DH_generate_key</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>DH_set_method</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>DH_size</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>DH_meth_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-3f0a2a524d3a968d3a8fd681c2c2dd87"><title>HISTORY</title>
    <para>
      The functions described here were added in OpenSSL version 1.1.0.
    </para>
  </refsection>
</refentry>