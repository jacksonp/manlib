<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>RAND_add.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>RAND_add, RAND_seed, RAND_status, RAND_event, RAND_screen</refname>
<refpurpose>add
entropy to the PRNG</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/rand.h&gt;</synopsis>
<synopsis>void RAND_seed(const void *buf, int num);</synopsis>
<synopsis>void RAND_add(const void *buf, int num, double entropy);</synopsis>
<synopsis>int  RAND_status(void);</synopsis>
<synopsis>int  RAND_event(UINT iMsg, WPARAM wParam, LPARAM lParam);
void RAND_screen(void);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-371308fb72c989a4d5528e8409a4bf0c"><title>DESCRIPTION</title>
    <para>
      RAND_add() mixes the <emphasis role="bold">num</emphasis> bytes at
      <emphasis role="bold">buf</emphasis> into the PRNG state. Thus, if
      the data at <emphasis role="bold">buf</emphasis> are unpredictable to
      an adversary, this increases the uncertainty about the state and
      makes the PRNG output less predictable. Suitable input comes from
      user interaction (random key presses, mouse movements) and certain
      hardware events. The <emphasis role="bold">entropy</emphasis>
      argument is (the lower bound of) an estimate of how much randomness
      is contained in <emphasis role="bold">buf</emphasis>, measured in
      bytes. Details about sources of randomness and how to estimate their
      entropy can be found in the literature, e.g. RFC 1750.
    </para>
    <para>
      RAND_add() may be called with sensitive data such as user entered
      passwords. The seed values cannot be recovered from the PRNG output.
    </para>
    <para>
      OpenSSL makes sure that the PRNG state is unique for each thread. On
      systems that provide <literal role="code">/dev/urandom</literal>, the randomness device
      is used to seed the PRNG transparently. However, on all other
      systems, the application is responsible for seeding the PRNG by
      calling RAND_add(), <citerefentry>
      <refentrytitle>RAND_egd</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> or <citerefentry>
      <refentrytitle>RAND_load_file</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
    <para>
      RAND_seed() is equivalent to RAND_add() when <emphasis role="bold">num == entropy</emphasis>.
    </para>
    <para>
      RAND_event() collects the entropy from Windows events such as mouse
      movements and other user interaction. It should be called with the
      <emphasis role="bold">iMsg</emphasis>, <emphasis role="bold">wParam</emphasis> and <emphasis role="bold">lParam</emphasis> arguments of <emphasis role="italic">all</emphasis> messages sent to the window procedure.
      It will estimate the entropy contained in the event message (if any),
      and add it to the PRNG. The program can then process the messages as
      usual.
    </para>
    <para>
      The RAND_screen() function is available for the convenience of
      Windows programmers. It adds the current contents of the screen to
      the PRNG. For applications that can catch Windows events, seeding the
      PRNG by calling RAND_event() is a significantly better source of
      randomness. It should be noted that both methods cannot be used on
      servers that run without user interaction.
    </para>
  </refsection>
  <refsection xml:id="ID-ac10804b1e84e973876ae9a791c24bed"><title>RETURN VALUES</title>
    <para>
      RAND_status() and RAND_event() return 1 if the PRNG has been seeded
      with enough data, 0 otherwise.
    </para>
    <para>
      The other functions do not return values.
    </para>
  </refsection>
  <refsection xml:id="ID-54c689ebad1b514090697ad4c788950e"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>rand</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>RAND_egd</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>RAND_load_file</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>RAND_cleanup</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
</refentry>