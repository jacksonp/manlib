<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_f_cipher.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_f_cipher, BIO_set_cipher, BIO_get_cipher_status, BIO_get_cipher_ctx</refname>
<refpurpose>cipher BIO filter</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bio.h&gt;
#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis>const BIO_METHOD *BIO_f_cipher(void);
void BIO_set_cipher(BIO *b,const EVP_CIPHER *cipher,
               unsigned char *key, unsigned char *iv, int enc);
int BIO_get_cipher_status(BIO *b)
int BIO_get_cipher_ctx(BIO *b, EVP_CIPHER_CTX **pctx)</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-6c36d3c4cce36bf0e6dc159ac1d2ea63"><title>DESCRIPTION</title>
    <para>
      BIO_f_cipher() returns the cipher BIO method. This is a filter BIO
      that encrypts any data written through it, and decrypts any data read
      from it. It is a BIO wrapper for the cipher routines
      EVP_CipherInit(), EVP_CipherUpdate() and EVP_CipherFinal().
    </para>
    <para>
      Cipher BIOs do not support BIO_gets() or BIO_puts().
    </para>
    <para>
      BIO_flush() on an encryption BIO that is being written through is
      used to signal that no more data is to be encrypted: this is used to
      flush and possibly pad the final block through the BIO.
    </para>
    <para>
      BIO_set_cipher() sets the cipher of BIO <emphasis role="bold">b</emphasis> to <emphasis role="bold">cipher</emphasis>
      using key <emphasis role="bold">key</emphasis> and IV <emphasis role="bold">iv</emphasis>. <emphasis role="bold">enc</emphasis>
      should be set to 1 for encryption and zero for decryption.
    </para>
    <para>
      When reading from an encryption BIO the final block is automatically
      decrypted and checked when EOF is detected. BIO_get_cipher_status()
      is a BIO_ctrl() macro which can be called to determine whether the
      decryption operation was successful.
    </para>
    <para>
      BIO_get_cipher_ctx() is a BIO_ctrl() macro which retrieves the
      internal BIO cipher context. The retrieved context can be used in
      conjunction with the standard cipher routines to set it up. This is
      useful when BIO_set_cipher() is not flexible enough for the
      applications needs.
    </para>
  </refsection>
  <refsection xml:id="ID-d37719e23eda630038f21b6752cca2d1"><title>NOTES</title>
    <para>
      When encrypting BIO_flush() <emphasis role="bold">must</emphasis> be
      called to flush the final block through the BIO. If it is not then
      the final block will fail a subsequent decrypt.
    </para>
    <para>
      When decrypting an error on the final block is signaled by a zero
      return value from the read operation. A successful decrypt followed
      by EOF will also return zero for the final read.
      BIO_get_cipher_status() should be called to determine if the decrypt
      was successful.
    </para>
    <para>
      As always, if BIO_gets() or BIO_puts() support is needed then it can
      be achieved by preceding the cipher BIO with a buffering BIO.
    </para>
  </refsection>
  <refsection xml:id="ID-b6b8025ee679a0661aa1435867a31c8b"><title>RETURN VALUES</title>
    <para>
      BIO_f_cipher() returns the cipher BIO method.
    </para>
    <para>
      BIO_set_cipher() does not return a value.
    </para>
    <para>
      BIO_get_cipher_status() returns 1 for a successful decrypt and 0 for
      failure.
    </para>
    <para>
      BIO_get_cipher_ctx() currently always returns 1.
    </para>
  </refsection>
  <refsection xml:id="ID-e558f06fe0b56965ac283f0c1f655b7e"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>