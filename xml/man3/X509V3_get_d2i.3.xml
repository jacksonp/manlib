<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>X509V3_get_d2i.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>X509V3_get_d2i, X509V3_add1_i2d, X509V3_EXT_d2i, X509V3_EXT_i2d,
X509_get_ext_d2i, X509_add1_ext_i2d, X509_CRL_get_ext_d2i,
X509_CRL_add1_ext_i2d, X509_REVOKED_get_ext_d2i,
X509_REVOKED_add1_ext_i2d</refname>
<refpurpose>X509 extension decode and encode functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/x509v3.h&gt;</synopsis>
<synopsis format="linespecific">void *X509V3_get_d2i(STACK_OF(X509_EXTENSION) *x, int nid, int *crit,
                     int *idx);
int X509V3_add1_i2d(STACK_OF(X509_EXTENSION) **x, int nid, void *value,
                    int crit, unsigned long flags);</synopsis>
<synopsis format="linespecific">void *X509V3_EXT_d2i(X509_EXTENSION *ext);
X509_EXTENSION *X509V3_EXT_i2d(int ext_nid, int crit, void *ext);</synopsis>
<synopsis format="linespecific">void *X509_get_ext_d2i(X509 *x, int nid, int *crit, int *idx);
int X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,
                      unsigned long flags);</synopsis>
<synopsis format="linespecific">void *X509_CRL_get_ext_d2i(X509_CRL *crl, int nid, int *crit, int *idx);
int X509_CRL_add1_ext_i2d(X509_CRL *crl, int nid, void *value, int crit,
                          unsigned long flags);</synopsis>
<synopsis format="linespecific">void *X509_REVOKED_get_ext_d2i(X509_REVOKED *r, int nid, int *crit, int *idx);
int X509_REVOKED_add1_ext_i2d(X509_REVOKED *r, int nid, void *value, int crit,
                              unsigned long flags);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      X509V3_get_ext_d2i() looks for an extension with OID <emphasis role="bold">nid</emphasis> in the extensions <emphasis role="bold">x</emphasis> and, if found, decodes it. If <emphasis role="bold">idx</emphasis> is <emphasis role="bold">NULL</emphasis>
      then only one occurrence of an extension is permissible otherwise the
      first extension after index <emphasis role="bold">*idx</emphasis> is
      returned and <emphasis role="bold">*idx</emphasis> updated to the
      location of the extension. If <emphasis role="bold">crit</emphasis>
      is not <emphasis role="bold">NULL</emphasis> then <emphasis role="bold">*crit</emphasis> is set to a status value: -2 if the
      extension occurs multiple times (this is only returned if <emphasis role="bold">idx</emphasis> is <emphasis role="bold">NULL</emphasis>),
      -1 if the extension could not be found, 0 if the extension is found
      and is not critical and 1 if critical. A pointer to an extension
      specific structure or <emphasis role="bold">NULL</emphasis> is
      returned.
    </para>
    <para>
      X509V3_add1_i2d() adds extension <emphasis role="bold">value</emphasis> to STACK <emphasis role="bold">*x</emphasis> (allocating a new STACK if necessary) using
      OID <emphasis role="bold">nid</emphasis> and criticality <emphasis role="bold">crit</emphasis> according to <emphasis role="bold">flags</emphasis>.
    </para>
    <para>
      X509V3_EXT_d2i() attempts to decode the ASN.1 data contained in
      extension <emphasis role="bold">ext</emphasis> and returns a pointer
      to an extension specific structure or <emphasis role="bold">NULL</emphasis> if the extension could not be decoded
      (invalid syntax or not supported).
    </para>
    <para>
      X509V3_EXT_i2d() encodes the extension specific structure <emphasis role="bold">ext</emphasis> with OID <emphasis role="bold">ext_nid</emphasis> and criticality <emphasis role="bold">crit</emphasis>.
    </para>
    <para>
      X509_get_ext_d2i() and X509_add1_ext_i2d() operate on the extensions
      of certificate <emphasis role="bold">x</emphasis>, they are otherwise
      identical to X509V3_get_d2i() and X509V3_add_i2d().
    </para>
    <para>
      X509_CRL_get_ext_d2i() and X509_CRL_add1_ext_i2d() operate on the
      extensions of CRL <emphasis role="bold">crl</emphasis>, they are
      otherwise identical to X509V3_get_d2i() and X509V3_add_i2d().
    </para>
    <para>
      X509_REVOKED_get_ext_d2i() and X509_REVOKED_add1_ext_i2d() operate on
      the extensions of <emphasis role="bold">X509_REVOKED</emphasis>
      structure <emphasis role="bold">r</emphasis> (i.e for CRL entry
      extensions), they are otherwise identical to X509V3_get_d2i() and
      X509V3_add_i2d().
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:NOTES"><title>NOTES</title>
    <para>
      In almost all cases an extension can occur at most once and multiple
      occurences is an error. Therefore the <emphasis role="bold">idx</emphasis> parameter is usually <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      The <emphasis role="bold">flags</emphasis> parameter may be one of
      the following values.
    </para>
    <para>
      <emphasis role="bold">X509V3_ADD_DEFAULT</emphasis> appends a new
      extension only if the extension does not already exist. An error is
      returned if the extension does already exist.
    </para>
    <para>
      <emphasis role="bold">X509V3_ADD_APPEND</emphasis> appends a new
      extension, ignoring whether the extension already exists.
    </para>
    <para>
      <emphasis role="bold">X509V3_ADD_REPLACE</emphasis> replaces an
      extension if it exists otherwise apppends a new extension.
    </para>
    <para>
      <emphasis role="bold">X509V3_ADD_REPLACE_EXISTING</emphasis> replaces
      an existing extension if it exists otherwise returns an error.
    </para>
    <para>
      <emphasis role="bold">X509V3_ADD_KEEP_EXISTING</emphasis> appends a
      new extension only if the extension does not already exist. An error
      <emphasis role="bold">is not</emphasis> returned if the extension
      does already exist.
    </para>
    <para>
      <emphasis role="bold">X509V3_ADD_DELETE</emphasis> extension
      <emphasis role="bold">nid</emphasis> is deleted: no new extenion is
      added.
    </para>
    <para>
      If <emphasis role="bold">X509V3_ADD_SILENT</emphasis> is ored with
      <emphasis role="bold">flags</emphasis>: any error returned will not
      be added to the error queue.
    </para>
    <para>
      The function X509V3_get_d2i() will return <emphasis role="bold">NULL</emphasis> if the extension is not found, occurs
      multiple times or cannot be decoded. It is possible to determine the
      precise reason by checking the value of <emphasis role="bold">*crit</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:SUPPORTED_EXTENSIONS"><title>SUPPORTED EXTENSIONS</title>
    <para>
      The following sections contain a list of all supported extensions
      including their name and NID.
    </para>
    <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:PKIX_CERTIFICATE_EXTENSIONS"><title>PKIX CERTIFICATE EXTENSIONS</title>
      <para>
	The following certificate extensions are defined in PKIX standards
	such as RFC5280.
      </para>
      <screen>Basic Constraints                  NID_basic_constraints
Key Usage                          NID_key_usage
Extended Key Usage                 NID_ext_key_usage

Subject Key Identifier             NID_subject_key_identifier
Authority Key Identifier           NID_authority_key_identifier

Private Key Usage Period           NID_private_key_usage_period

Subject Alternative Name           NID_subject_alt_name
Issuer Alternative Name            NID_issuer_alt_name

Authority Information Access       NID_info_access
Subject Information Access         NID_sinfo_access

Name Constraints                   NID_name_constraints

Certificate Policies               NID_certificate_policies
Policy Mappings                    NID_policy_mappings
Policy Constraints                 NID_policy_constraints
Inhibit Any Policy                 NID_inhibit_any_policy</screen>
    </refsection>
    <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:NETSCAPE_CERTIFICATE_EXTENSIONS"><title>NETSCAPE CERTIFICATE EXTENSIONS</title>
      <para>
	The following are (largely obsolete) Netscape certificate
	extensions.
      </para>
      <screen>Netscape Cert Type                 NID_netscape_cert_type
Netscape Base Url                  NID_netscape_base_url
Netscape Revocation Url            NID_netscape_revocation_url
Netscape CA Revocation Url         NID_netscape_ca_revocation_url
Netscape Renewal Url               NID_netscape_renewal_url
Netscape CA Policy Url             NID_netscape_ca_policy_url
Netscape SSL Server Name           NID_netscape_ssl_server_name
Netscape Comment                   NID_netscape_comment</screen>
    </refsection>
    <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:MISCELLANEOUS_CERTIFICATE_EXTENSIONS"><title>MISCELLANEOUS CERTIFICATE EXTENSIONS</title>
      <screen>Strong Extranet ID                 NID_sxnet
Proxy Certificate Information      NID_proxyCertInfo</screen>
    </refsection>
    <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:PKIX_CRL_EXTENSIONS"><title>PKIX CRL EXTENSIONS</title>
      <para>
	The following are CRL extensions from PKIX standards such as
	RFC5280.
      </para>
      <screen>CRL Number                         NID_crl_number
CRL Distribution Points            NID_crl_distribution_points
Delta CRL Indicator                NID_delta_crl
Freshest CRL                       NID_freshest_crl
Invalidity Date                    NID_invalidity_date
Issuing Distrubution Point         NID_issuing_distribution_point</screen>
      <para>
	The following are CRL entry extensions from PKIX standards such as
	RFC5280.
      </para>
      <screen>CRL Reason Code                    NID_crl_reason
Certificate Issuer                 NID_certificate_issuer</screen>
    </refsection>
    <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:OCSP_EXTENSIONS"><title>OCSP EXTENSIONS</title>
      <screen>OCSP Nonce                         NID_id_pkix_OCSP_Nonce
OCSP CRL ID                        NID_id_pkix_OCSP_CrlID
Acceptable OCSP Responses          NID_id_pkix_OCSP_acceptableResponses
OCSP No Check                      NID_id_pkix_OCSP_noCheck
OCSP Archive Cutoff                NID_id_pkix_OCSP_archiveCutoff
OCSP Service Locator               NID_id_pkix_OCSP_serviceLocator
Hold Instruction Code              NID_hold_instruction_code</screen>
    </refsection>
    <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:CERTIFICATE_TRANSPARENCY_EXTENSIONS"><title>CERTIFICATE TRANSPARENCY EXTENSIONS</title>
      <para>
	The following extensions are used by certificate transparency,
	RFC6962
      </para>
      <screen>CT Precertificate SCTs             NID_ct_precert_scts
CT Certificate SCTs                NID_ct_cert_scts</screen>
    </refsection>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      X509V3_EXT_d2i() and *X509V3_get_d2i() return a pointer to an
      extension specific structure of <emphasis role="bold">NULL</emphasis>
      if an error occurs.
    </para>
    <para>
      X509V3_EXT_i2d() returns a pointer to an <emphasis role="bold">X509_EXTENSION</emphasis> structure or <emphasis role="bold">NULL</emphasis> if an error occurs.
    </para>
    <para>
      X509V3_add1_i2d() returns 1 if the operation is successful and 0 if
      it fails due to a non-fatal error (extension not found, already
      exists, cannot be encoded) or -1 due to a fatal error such as a
      memory allocation failure.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.X509V3_get_d2i.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>d2i_X509</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, ERR_get_error(3),
      <citerefentry> <refentrytitle>X509_CRL_get0_by_serial</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get0_signature</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get_ext_d2i</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get_extension_flags</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get_pubkey</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get_subject_name</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_get_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_NAME_add_entry_by_txt</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_NAME_ENTRY_get_object</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_NAME_get_index_by_NID</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_NAME_print_ex</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>X509_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>X509_sign</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>X509_verify_cert</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
</refentry>