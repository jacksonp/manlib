<!-- Converted by db4-upgrade version 1.1 -->
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="vmod_directors">
  <title>vmod_directors</title>
  <section xml:id="backend-traffic-directors">
    <title>Backend traffic directors</title>
    <variablelist>
      <varlistentry>
        <term>
          Manual section
        </term>
        <listitem>
          <para>
            3
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <section xml:id="synopsis">
      <title>SYNOPSIS</title>
      <para>
        import directors [from "path"] ;
      </para>
    </section>
    <section xml:id="description">
      <title>DESCRIPTION</title>
      <para>
        vmod_directors enables backend load balancing in Varnish.
      </para>
      <para>
        The module implements a set of basic load balancing techniques,
        and also serves as an example on how one could extend the load
        balancing capabilities of Varnish.
      </para>
      <para>
        To enable load balancing you must import this vmod (directors)
        in your VCL::
      </para>
      <programlisting>
import directors;
</programlisting>
      <para>
        Then you define your backends. Once you have the backends
        declared you can add them to a director. This happens in
        executed VCL code. If you want to emulate the previous behavior
        of Varnish 3.0 you can just initialize the directors in
        vcl_init, like this::
      </para>
      <programlisting>
sub vcl_init {
    new vdir = directors.round_robin();
    vdir.add_backend(backend1);
    vdir.add_backend(backend2);
}
</programlisting>
      <para>
        As you can see there is nothing keeping you from manipulating
        the directors elsewhere in VCL. So, you could have VCL code that
        would add more backends to a director when a certain URL is
        called.
      </para>
      <para>
        Note that directors can use other directors as backends.
      </para>
    </section>
    <section xml:id="contents">
      <title>CONTENTS</title>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            obj_fallback
          </para>
        </listitem>
        <listitem>
          <para>
            func_fallback.add_backend
          </para>
        </listitem>
        <listitem>
          <para>
            func_fallback.backend
          </para>
        </listitem>
        <listitem>
          <para>
            obj_hash
          </para>
        </listitem>
        <listitem>
          <para>
            func_hash.add_backend
          </para>
        </listitem>
        <listitem>
          <para>
            func_hash.backend
          </para>
        </listitem>
        <listitem>
          <para>
            obj_random
          </para>
        </listitem>
        <listitem>
          <para>
            func_random.add_backend
          </para>
        </listitem>
        <listitem>
          <para>
            func_random.backend
          </para>
        </listitem>
        <listitem>
          <para>
            obj_round_robin
          </para>
        </listitem>
        <listitem>
          <para>
            func_round_robin.add_backend
          </para>
        </listitem>
        <listitem>
          <para>
            func_round_robin.backend
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="object-round_robin">
      <title>Object round_robin</title>
      <variablelist>
        <varlistentry>
          <term>
            Description
          </term>
          <listitem>
            <para>
              Create a round robin director.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <blockquote>
        <para>
          This director will pick backends in a round robin fashion.
        </para>
      </blockquote>
      <variablelist>
        <varlistentry>
          <term>
            Example
          </term>
          <listitem>
            <para>
              new vdir = directors.round_robin();
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <section xml:id="void-round_robin.add_backendbackend">
        <title>VOID round_robin.add_backend(BACKEND)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID round_robin.add_backend(BACKEND)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Add a backend to the round-robin director.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                vdir.add_backend(backend1); vdir.add_backend(backend2);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="backend-round_robin.backend">
        <title>BACKEND round_robin.backend()</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                BACKEND round_robin.backend()
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Pick a backend from the director.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.backend_hint = vdir.backend();
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <section xml:id="object-fallback">
      <title>Object fallback</title>
      <variablelist>
        <varlistentry>
          <term>
            Description
          </term>
          <listitem>
            <para>
              Create a fallback director.
            </para>
            <para>
              A fallback director will try each of the added backends in
              turn, and return the first one that is healthy.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            Example
          </term>
          <listitem>
            <para>
              new vdir = directors.fallback();
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <section xml:id="void-fallback.add_backendbackend">
        <title>VOID fallback.add_backend(BACKEND)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID fallback.add_backend(BACKEND)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Add a backend to the director.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Note that the order in which this is done matters for the
              fallback
            </term>
            <listitem>
              <para>
                director.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                vdir.add_backend(backend1); vdir.add_backend(backend2);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="backend-fallback.backend">
        <title>BACKEND fallback.backend()</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                BACKEND fallback.backend()
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Pick a backend from the director.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.backend_hint = vdir.backend();
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <section xml:id="object-random">
      <title>Object random</title>
      <variablelist>
        <varlistentry>
          <term>
            Description
          </term>
          <listitem>
            <para>
              Create a random backend director.
            </para>
            <para>
              The random director distributes load over the backends
              using a weighted random probability distribution.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            Example
          </term>
          <listitem>
            <para>
              new vdir = directors.random();
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <section xml:id="void-random.add_backendbackend-real">
        <title>VOID random.add_backend(BACKEND, REAL)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID random.add_backend(BACKEND, REAL)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Add a backend to the director with a given weight.
              </para>
              <para>
                Each backend backend will receive approximately 100 *
                (weight / (sum(all_added_weights))) per cent of the
                traffic sent to this director.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                vdir.add_backend(backend1, 10);
                vdir.add_backend(backend2, 5); # 2/3 to backend1, 1/3 to
                backend2.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="backend-random.backend">
        <title>BACKEND random.backend()</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                BACKEND random.backend()
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Pick a backend from the director.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.backend_hint = vdir.backend();
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <section xml:id="object-hash">
      <title>Object hash</title>
      <variablelist>
        <varlistentry>
          <term>
            Description
          </term>
          <listitem>
            <para>
              Create a hashing backend director.
            </para>
            <para>
              The director chooses the backend server by computing a
              hash/digest of the string given to .backend().
            </para>
            <para>
              Commonly used with <literal>client.identity</literal> or a
              session cookie to get sticky sessions.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            Example
          </term>
          <listitem>
            <para>
              new vdir = directors.hash();
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <section xml:id="void-hash.add_backendbackend-real">
        <title>VOID hash.add_backend(BACKEND, REAL)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                VOID hash.add_backend(BACKEND, REAL)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Add a backend to the director with a certain weight.
              </para>
              <para>
                Weight is used as in the random director. Recommended
                value is 1.0 unless you have special needs.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                vdir.add_backend(backend1, 1.0);
                vdir.add_backend(backend2, 1.0);
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="backend-hash.backendstring_list">
        <title>BACKEND hash.backend(STRING_LIST)</title>
        <variablelist>
          <varlistentry>
            <term>
              Prototype
            </term>
            <listitem>
              <para>
                BACKEND hash.backend(STRING_LIST)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Description
            </term>
            <listitem>
              <para>
                Pick a backend from the backend director.
              </para>
              <para>
                Use the string or list of strings provided to pick the
                backend.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              Example
            </term>
            <listitem>
              <para>
                set req.backend_hint = vdir.backend(req.http.cookie); #
                pick a backend based on the cookie header from the
                client
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
</section>