<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>OPENSSL_init_crypto.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>OPENSSL_init_crypto, OPENSSL_cleanup,
OPENSSL_atexit, OPENSSL_thread_stop</refname>
<refpurpose>OpenSSL
initialisation and deinitialisation functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/crypto.h&gt;</synopsis>
<synopsis>void OPENSSL_cleanup(void);
int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
int OPENSSL_atexit(void (*handler)(void));
void OPENSSL_thread_stop(void);</synopsis>
<synopsis>OPENSSL_INIT_SETTINGS *OPENSSL_init_new(void);
OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *init, const char* name);
OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *init);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-5688fcb724694fe0cf9b0bf3f83b7d01"><title>DESCRIPTION</title>
    <para>
      During normal operation OpenSSL (libcrypto) will allocate various
      resources at start up that must, subsequently, be freed on close down
      of the library. Additionally some resources are allocated on a per
      thread basis (if the application is multi-threaded), and these
      resources must be freed prior to the thread closing.
    </para>
    <para>
      As of version 1.1.0 OpenSSL will automatically allocate all resources
      that it needs so no explicit initialisation is required. Similarly it
      will also automatically deinitialise as required.
    </para>
    <para>
      However, there way be situations when explicit initialisation is
      desirable or needed, for example when some non-default initialisation
      is required. The function OPENSSL_init_crypto() can be used for this
      purpose for libcrypto (see also <citerefentry>
      <refentrytitle>OPENSSL_init_ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> for the libssl equivalent).
    </para>
    <para>
      Numerous internal OpenSSL functions call OPENSSL_init_crypto().
      Therefore, in order to perform non-default initialisation,
      OPENSSL_init_crypto() MUST be called by application code prior to any
      other OpenSSL function calls.
    </para>
    <para>
      The <emphasis role="bold">opts</emphasis> parameter specifies which
      aspects of libcrypto should be initialised. Valid options are:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS</term>
          <listitem>
            <para>
	      Suppress automatic loading of the libcrypto error strings.
	      This option is not a default option. Once selected subsequent
	      calls to OPENSSL_init_crypto() with the option <emphasis role="bold">OPENSSL_INIT_LOAD_CRYPTO_STRINGS</emphasis> will
	      be ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_LOAD_CRYPTO_STRINGS</term>
          <listitem>
            <para>
	      Automatic loading of the libcrypto error strings. With this
	      option the library will automatically load the libcrypto
	      error strings. This option is a default option. Once selected
	      subsequent calls to OPENSSL_init_crypto() with the option
	      <emphasis role="bold">OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS</emphasis>
	      will be ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ADD_ALL_CIPHERS</term>
          <listitem>
            <para>
	      With this option the library will automatically load and make
	      available all libcrypto ciphers. This option is a default
	      option. Once selected subsequent calls to
	      OPENSSL_init_crypto() with the option <emphasis role="bold">OPENSSL_INIT_NO_ADD_ALL_CIPHERS</emphasis> will
	      be ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ADD_ALL_DIGESTS</term>
          <listitem>
            <para>
	      With this option the library will automatically load and make
	      available all libcrypto digests. This option is a default
	      option. Once selected subsequent calls to
	      OPENSSL_init_crypto() with the option <emphasis role="bold">OPENSSL_INIT_NO_ADD_ALL_CIPHERS</emphasis> will
	      be ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_NO_ADD_ALL_CIPHERS</term>
          <listitem>
            <para>
	      With this option the library will suppress automatic loading
	      of libcrypto ciphers. This option is not a default option.
	      Once selected subsequent calls to OPENSSL_init_crypto() with
	      the option <emphasis role="bold">OPENSSL_INIT_ADD_ALL_CIPHERS</emphasis> will be
	      ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_NO_ADD_ALL_DIGESTS</term>
          <listitem>
            <para>
	      With this option the library will suppress automatic loading
	      of libcrypto digests. This option is not a default option.
	      Once selected subsequent calls to OPENSSL_init_crypto() with
	      the option <emphasis role="bold">OPENSSL_INIT_ADD_ALL_DIGESTS</emphasis> will be
	      ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_LOAD_CONFIG</term>
          <listitem>
            <para>
	      With this option an OpenSSL configuration file will be
	      automatically loaded and used by calling OPENSSL_config().
	      This is not a default option. See the description of
	      OPENSSL_init_new(), below.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_NO_LOAD_CONFIG</term>
          <listitem>
            <para>
	      With this option the loading of OpenSSL configuration files
	      will be suppressed. It is the equivalent of calling
	      OPENSSL_no_config(). This is not a default option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ASYNC</term>
          <listitem>
            <para>
	      With this option the library with automatically initialise
	      the libcrypto async sub-library (see <citerefentry>
	      <refentrytitle>ASYNC_start_job</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry>). This is a default
	      option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ENGINE_RDRAND</term>
          <listitem>
            <para>
	      With this option the library will automatically load and
	      initialise the RDRAND engine (if available). This not a
	      default option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ENGINE_DYNAMIC</term>
          <listitem>
            <para>
	      With this option the library will automatically load and
	      initialise the dynamic engine. This not a default option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ENGINE_OPENSSL</term>
          <listitem>
            <para>
	      With this option the library will automatically load and
	      initialise the openssl engine. This not a default option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ENGINE_CRYPTODEV</term>
          <listitem>
            <para>
	      With this option the library will automatically load and
	      initialise the cryptodev engine (if available). This not a
	      default option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ENGINE_CAPI</term>
          <listitem>
            <para>
	      With this option the library will automatically load and
	      initialise the CAPI engine (if available). This not a default
	      option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ENGINE_PADLOCK</term>
          <listitem>
            <para>
	      With this option the library will automatically load and
	      initialise the padlock engine (if available). This not a
	      default option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ENGINE_DASYNC</term>
          <listitem>
            <para>
	      With this option the library will automatically load and
	      initialise the DASYNC engine. This not a default option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>OPENSSL_INIT_ENGINE_ALL_BUILTIN</term>
          <listitem>
            <para>
	      With this option the library will automatically load and
	      initialise all the built in engines listed above with the
	      exception of the openssl and dasync engines. This not a
	      default option.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      Multiple options may be combined together in a single call to
      OPENSSL_init_crypto(). For example:
    </para>
    <screen>OPENSSL_init_crypto(OPENSSL_INIT_NO_ADD_ALL_CIPHERS
                    | OPENSSL_INIT_NO_ADD_ALL_DIGESTS, NULL);</screen>
    <para>
      The OPENSSL_cleanup() function deinitialises OpenSSL (both libcrypto
      and libssl). All resources allocated by OpenSSL are freed. Typically
      there should be no need to call this function directly as it is
      initiated automatically on application exit. This is done via the
      standard C library <citerefentry>
      <refentrytitle>atexit</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> function. In the event that the application will
      close in a manner that will not call the registered atexit() handlers
      then the application should call OPENSSL_cleanup() directly.
      Developers of libraries using OpenSSL are discouraged from calling
      this function and should instead, typically, rely on
      auto-deinitialisation. This is to avoid error conditions where both
      an application and a library it depends on both use OpenSSL, and the
      library deinitialises it before the application has finished using
      it.
    </para>
    <para>
      Once OPENSSL_cleanup() has been called the library cannot be
      reinitialised. Attempts to call OPENSSL_init_crypto() will fail and
      an ERR_R_INIT_FAIL error will be added to the error stack. Note that
      because initialisation has failed OpenSSL error strings will not be
      available, only an error code. This code can be put through the
      openssl errstr command line application to produce a human readable
      error (see <citerefentry> <refentrytitle>errstr</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry>).
    </para>
    <para>
      The OPENSSL_atexit() function enables the registration of a function
      to be called during OPENSSL_cleanup(). Stop handlers are called after
      deinitialisation of resources local to a thread, but before other
      process wide resources are freed. In the event that multiple stop
      handlers are registered, no guarantees are made about the order of
      execution.
    </para>
    <para>
      The OPENSSL_thread_stop() function deallocates resources associated
      with the current thread. Typically this function will be called
      automatically by the library when the thread exits. This should only
      be called directly if resources should be freed at an earlier time,
      or under the circumstances described in the NOTES section below.
    </para>
    <para>
      The <emphasis role="bold">OPENSSL_INIT_LOAD_CONFIG</emphasis> flag
      will load a default configuration file.  To specify a different file,
      an <emphasis role="bold">OPENSSL_INIT_SETTINGS</emphasis> must be
      created and used. The routines OPENSSL_init_new() and
      OPENSSL_INIT_set_config_filename() can be used to allocate the object
      and set the configuration filename, and then the object can be
      released with OPENSSL_INIT_free() when done.
    </para>
  </refsection>
  <refsection xml:id="ID-93b44e9cabfb7ff0d4029b38137c43a6"><title>NOTES</title>
    <para>
      Resources local to a thread are deallocated automatically when the
      thread exits (e.g. in a pthreads environment, when pthread_exit() is
      called). On Windows platforms this is done in response to a
      DLL_THREAD_DETACH message being sent to the libcrypto32.dll entry
      point. Some windows functions may cause threads to exit without
      sending this message (for example ExitProcess()). If the application
      uses such functions, then the application must free up OpenSSL
      resources directly via a call to OPENSSL_thread_stop(). Similarly
      this message will also not be sent if OpenSSL is linked statically,
      and therefore applications using static linking should also call
      OPENSSL_thread_stop().
    </para>
  </refsection>
  <refsection xml:id="ID-ef9637ad9b4f7804a557bf45430c5cb9"><title>RETURN VALUES</title>
    <para>
      The functions OPENSSL_init_crypto and  OPENSSL_atexit() returns 1 on
      success or 0 on error.
    </para>
  </refsection>
  <refsection xml:id="ID-24fc011cf9242ac478c3b4f26b951e7a"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>OPENSSL_init_ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-c32dff1b46eeeda2ff5dec908852c642"><title>HISTORY</title>
    <para>
      The OPENSSL_init_crypto(), OPENSSL_cleanup(), OPENSSL_atexit(), and
      OPENSSL_thread_stop() functions were added in OpenSSL 1.1.0.
    </para>
  </refsection>
</refentry>