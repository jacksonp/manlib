<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_new.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>TLSv1_2_method, TLSv1_2_server_method, TLSv1_2_client_method,
SSL_CTX_new, SSL_CTX_up_ref, SSLv3_method, SSLv3_server_method,
SSLv3_client_method, TLSv1_method, TLSv1_server_method, TLSv1_client_method,
TLSv1_1_method, TLSv1_1_server_method, TLSv1_1_client_method, TLS_method,
TLS_server_method, TLS_client_method, SSLv23_method, SSLv23_server_method,
SSLv23_client_method, DTLS_method, DTLS_server_method, DTLS_client_method,
DTLSv1_method, DTLSv1_server_method, DTLSv1_client_method,
DTLSv1_2_method, DTLSv1_2_server_method, DTLSv1_2_client_method</refname>
<refpurpose>create a new SSL_CTX object as framework for TLS/SSL or DTLS enabled
functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>SSL_CTX *SSL_CTX_new(const SSL_METHOD *method);
int SSL_CTX_up_ref(SSL_CTX *ctx);</synopsis>
<synopsis>const SSL_METHOD *TLS_method(void);
const SSL_METHOD *TLS_server_method(void);
const SSL_METHOD *TLS_client_method(void);</synopsis>
<synopsis>const SSL_METHOD *SSLv23_method(void);
const SSL_METHOD *SSLv23_server_method(void);
const SSL_METHOD *SSLv23_client_method(void);</synopsis>
<synopsis>#ifndef OPENSSL_NO_SSL3_METHOD
const SSL_METHOD *SSLv3_method(void);
const SSL_METHOD *SSLv3_server_method(void);
const SSL_METHOD *SSLv3_client_method(void);
#endif</synopsis>
<synopsis>#ifndef OPENSSL_NO_TLS1_METHOD
const SSL_METHOD *TLSv1_method(void);
const SSL_METHOD *TLSv1_server_method(void);
const SSL_METHOD *TLSv1_client_method(void);
#endif</synopsis>
<synopsis>#ifndef OPENSSL_NO_TLS1_1_METHOD
const SSL_METHOD *TLSv1_1_method(void);
const SSL_METHOD *TLSv1_1_server_method(void);
const SSL_METHOD *TLSv1_1_client_method(void);
#endif</synopsis>
<synopsis>#ifndef OPENSSL_NO_TLS1_2_METHOD
const SSL_METHOD *TLSv1_2_method(void);
const SSL_METHOD *TLSv1_2_server_method(void);
const SSL_METHOD *TLSv1_2_client_method(void);
#endif</synopsis>
<synopsis>const SSL_METHOD *DTLS_method(void);
const SSL_METHOD *DTLS_server_method(void);
const SSL_METHOD *DTLS_client_method(void);</synopsis>
<synopsis>#ifndef OPENSSL_NO_DTLS1_METHOD
const SSL_METHOD *DTLSv1_method(void);
const SSL_METHOD *DTLSv1_server_method(void);
const SSL_METHOD *DTLSv1_client_method(void);
#endif</synopsis>
<synopsis>#ifndef OPENSSL_NO_DTLS1_2_METHOD
const SSL_METHOD *DTLSv1_2_method(void);
const SSL_METHOD *DTLSv1_2_server_method(void);
const SSL_METHOD *DTLSv1_2_client_method(void);
#endif</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-17f25e7c09058367afb5bb56bb5d1717"><title>DESCRIPTION</title>
    <para>
      SSL_CTX_new() creates a new <emphasis role="bold">SSL_CTX</emphasis>
      object as framework to establish TLS/SSL or DTLS enabled connections.
      An <emphasis role="bold">SSL_CTX</emphasis> object is reference
      counted. Creating an <emphasis role="bold">SSL_CTX</emphasis> object
      for the first time increments the reference count. Freeing it (using
      SSL_CTX_free) decrements it. When the reference count drops to zero,
      any memory or resources allocated to the <emphasis role="bold">SSL_CTX</emphasis> object are freed. SSL_CTX_up_ref()
      increments the reference count for an existing <emphasis role="bold">SSL_CTX</emphasis> structure.
    </para>
  </refsection>
  <refsection xml:id="ID-58eeecd4fb86c7f869b40b7c21afe9b9"><title>NOTES</title>
    <para>
      The SSL_CTX object uses <emphasis role="bold">method</emphasis> as
      connection method. The methods exist in a generic type (for client
      and server use), a server only type, and a client only type.
      <emphasis role="bold">method</emphasis> can be of the following
      types:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>TLS_method(), TLS_server_method(), TLS_client_method()</term>
          <listitem>
            <para>
	      These are the general-purpose <emphasis role="italic">version-flexible</emphasis> SSL/TLS methods.
	      The actual protocol version used will be negotiated to the
	      highest version mutually supported by the client and the
	      server. The supported protocols are SSLv3, TLSv1, TLSv1.1 and
	      TLSv1.2. Applications should use these methods, and avoid the
	      version-specific methods described below.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSLv23_method(), SSLv23_server_method(), SSLv23_client_method()</term>
          <listitem>
            <para>
	      Use of these functions is deprecated. They have been replaced
	      with the above TLS_method(), TLS_server_method() and
	      TLS_client_method() respectively. New code should use those
	      functions instead.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>TLSv1_2_method(), TLSv1_2_server_method(), TLSv1_2_client_method()</term>
          <listitem>
            <para>
	      A TLS/SSL connection established with these methods will only
	      understand the TLSv1.2 protocol.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>TLSv1_1_method(), TLSv1_1_server_method(), TLSv1_1_client_method()</term>
          <listitem>
            <para>
	      A TLS/SSL connection established with these methods will only
	      understand the TLSv1.1 protocol.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>TLSv1_method(), TLSv1_server_method(), TLSv1_client_method()</term>
          <listitem>
            <para>
	      A TLS/SSL connection established with these methods will only
	      understand the TLSv1 protocol.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSLv3_method(), SSLv3_server_method(), SSLv3_client_method()</term>
          <listitem>
            <para>
	      A TLS/SSL connection established with these methods will only
	      understand the SSLv3 protocol. The SSLv3 protocol is
	      deprecated and should not be used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>DTLS_method(), DTLS_server_method(), DTLS_client_method()</term>
          <listitem>
            <para>
	      These are the version-flexible DTLS methods. Currently
	      supported protocols are DTLS 1.0 and DTLS 1.2.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>DTLSv1_2_method(), DTLSv1_2_server_method(), DTLSv1_2_client_method()</term>
          <listitem>
            <para>
	      These are the version-specific methods for DTLSv1.2.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>DTLSv1_method(), DTLSv1_server_method(), DTLSv1_client_method()</term>
          <listitem>
            <para>
	      These are the version-specific methods for DTLSv1.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      SSL_CTX_new() initializes the list of ciphers, the session cache
      setting, the callbacks, the keys and certificates and the options to
      their default values.
    </para>
    <para>
      TLS_method(), TLS_server_method(), TLS_client_method(),
      DTLS_method(), DTLS_server_method() and DTLS_client_method() are the
      <emphasis role="italic">version-flexible</emphasis> methods. All
      other methods only support one specific protocol version. Use the
      <emphasis role="italic">version-flexible</emphasis> methods instead
      of the version specific methods.
    </para>
    <para>
      If you want to limit the supported protocols for the version flexible
      methods you can use <citerefentry>
      <refentrytitle>SSL_CTX_set_min_proto_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_min_proto_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_max_proto_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> and
      LSSL_set_max_proto_version(3)&gt; functions. Using these functions it
      is possible to choose e.g. TLS_server_method() and be able to
      negotiate with all possible clients, but to only allow newer
      protocols like TLS 1.0, TLS 1.1 or TLS 1.2.
    </para>
    <para>
      The list of protocols available can also be limited using the
      <emphasis role="bold">SSL_OP_NO_SSLv3</emphasis>, <emphasis role="bold">SSL_OP_NO_TLSv1</emphasis>, <emphasis role="bold">SSL_OP_NO_TLSv1_1</emphasis>, <emphasis role="bold">SSL_OP_NO_TLSv1_3</emphasis> and <emphasis role="bold">SSL_OP_NO_TLSv1_2</emphasis> options of the
      <citerefentry> <refentrytitle>SSL_CTX_set_options</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> or <citerefentry>
      <refentrytitle>SSL_set_options</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> functions, but this approach
      is not recommended. Clients should avoid creating "holes" in the set
      of protocols they support. When disabling a protocol, make sure that
      you also disable either all previous or all subsequent protocol
      versions. In clients, when a protocol version is disabled without
      disabling <emphasis role="italic">all</emphasis> previous protocol
      versions, the effect is to also disable all subsequent protocol
      versions.
    </para>
    <para>
      The SSLv3 protocol is deprecated and should generally not be used.
      Applications should typically use <citerefentry>
      <refentrytitle>SSL_CTX_set_min_proto_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> to set the minimum protocol
      to at least <emphasis role="bold">TLS1_VERSION</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-c78783788a0f1c4b372f52d293356f2e"><title>RETURN VALUES</title>
    <para>
      The following return values can occur:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>NULL</term>
          <listitem>
            <para>
	      The creation of a new SSL_CTX object failed. Check the error
	      stack to find out the reason.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Pointer to an SSL_CTX object</term>
          <listitem>
            <para>
	      The return value points to an allocated SSL_CTX object.
            </para>
            <para>
	      SSL_CTX_up_ref() returns 1 for success and 0 for failure.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-a23b42e01647bd33b7dc822bad4214bf"><title>HISTORY</title>
    <para>
      Support for SSLv2 and the corresponding SSLv2_method(),
      SSLv2_server_method() and SSLv2_client_method() functions where
      removed in OpenSSL 1.1.0.
    </para>
    <para>
      SSLv23_method(), SSLv23_server_method() and SSLv23_client_method()
      were deprecated and the preferred TLS_method(), TLS_server_method()
      and TLS_client_method() functions were introduced in OpenSSL 1.1.0.
    </para>
    <para>
      All version-specific methods were deprecated in OpenSSL 1.1.0.
    </para>
  </refsection>
  <refsection xml:id="ID-e545d521238a4a7c41bc03d0e5f9cb87"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>SSL_CTX_set_options</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_free</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_accept</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_min_proto_version</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ssl</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_connect_state</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-dbd3563af1345b814ad90bc99e6b2117"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>