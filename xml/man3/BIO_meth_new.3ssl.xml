<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_meth_new.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_get_new_index,
BIO_meth_new, BIO_meth_free, BIO_meth_get_read_ex, BIO_meth_set_read_ex,
BIO_meth_get_write_ex, BIO_meth_set_write_ex, BIO_meth_get_write,
BIO_meth_set_write, BIO_meth_get_read, BIO_meth_set_read, BIO_meth_get_puts,
BIO_meth_set_puts, BIO_meth_get_gets, BIO_meth_set_gets, BIO_meth_get_ctrl,
BIO_meth_set_ctrl, BIO_meth_get_create, BIO_meth_set_create,
BIO_meth_get_destroy, BIO_meth_set_destroy, BIO_meth_get_callback_ctrl,
BIO_meth_set_callback_ctrl</refname>
<refpurpose>Routines to build up BIO methods</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bio.h&gt;</synopsis>
<synopsis>int BIO_get_new_index(void);
BIO_METHOD *BIO_meth_new(int type, const char *name);
void BIO_meth_free(BIO_METHOD *biom);
int (*BIO_meth_get_write_ex(BIO_METHOD *biom)) (BIO *, const char *, size_t,
                                                size_t *);
int (*BIO_meth_get_write(BIO_METHOD *biom)) (BIO *, const char *, int);
int BIO_meth_set_write_ex(BIO_METHOD *biom,
                          int (*bwrite) (BIO *, const char *, size_t,
                                         size_t *));
int BIO_meth_set_write(BIO_METHOD *biom,
                       int (*write) (BIO *, const char *, int));
int (*BIO_meth_get_read_ex(BIO_METHOD *biom)) (BIO *, char *, size_t,
                                               size_t *);
int (*BIO_meth_get_read(BIO_METHOD *biom)) (BIO *, char *, int);
int BIO_meth_set_read_ex(BIO_METHOD *biom,
                         int (*bread) (BIO *, char *, size_t, size_t *));
int BIO_meth_set_read(BIO_METHOD *biom,
                      int (*read) (BIO *, char *, int));
int (*BIO_meth_get_puts(BIO_METHOD *biom)) (BIO *, const char *);
int BIO_meth_set_puts(BIO_METHOD *biom,
                      int (*puts) (BIO *, const char *));
int (*BIO_meth_get_gets(BIO_METHOD *biom)) (BIO *, char *, int);
int BIO_meth_set_gets(BIO_METHOD *biom,
                      int (*gets) (BIO *, char *, int));
long (*BIO_meth_get_ctrl(BIO_METHOD *biom)) (BIO *, int, long, void *);
int BIO_meth_set_ctrl(BIO_METHOD *biom,
                      long (*ctrl) (BIO *, int, long, void *));
int (*BIO_meth_get_create(BIO_METHOD *bion)) (BIO *);
int BIO_meth_set_create(BIO_METHOD *biom, int (*create) (BIO *));
int (*BIO_meth_get_destroy(BIO_METHOD *biom)) (BIO *);
int BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy) (BIO *));
long (*BIO_meth_get_callback_ctrl(BIO_METHOD *biom))
                                 (BIO *, int, bio_info_cb *);
int BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
                               long (*callback_ctrl) (BIO *, int,
                                                     bio_info_cb *));</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-f3616e4e073afe76af8ee7546116314c"><title>DESCRIPTION</title>
    <para>
      The <emphasis role="bold">BIO_METHOD</emphasis> type is a structure
      used for the implementation of new BIO types. It provides a set of of
      functions used by OpenSSL for the implementation of the various BIO
      capabilities. See the <citerefentry>
      <refentrytitle>bio</refentrytitle> </citerefentry> page for more
      information.
    </para>
    <para>
      BIO_meth_new() creates a new <emphasis role="bold">BIO_METHOD</emphasis> structure. It should be given a
      unique integer <emphasis role="bold">type</emphasis> and a string
      that represents its <emphasis role="bold">name</emphasis>. Use
      BIO_get_new_index() to get the value for <emphasis role="bold">type</emphasis>.
    </para>
    <para>
      The set of standard OpenSSL provided BIO types is provided in
      <emphasis role="bold">bio.h</emphasis>. Some examples include
      <emphasis role="bold">BIO_TYPE_BUFFER</emphasis> and <emphasis role="bold">BIO_TYPE_CIPHER</emphasis>. Filter BIOs should have a
      type which have the "filter" bit set (<emphasis role="bold">BIO_TYPE_FILTER</emphasis>). Source/sink BIOs should have
      the "source/sink" bit set (<emphasis role="bold">BIO_TYPE_SOURCE_SINK</emphasis>). File descriptor based
      BIOs (e.g. socket, fd, connect, accept etc) should additionally have
      the "descriptor" bit set (<emphasis role="bold">BIO_TYPE_DESCRIPTOR</emphasis>). See the <citerefentry>
      <refentrytitle>BIO_find_type</refentrytitle> </citerefentry> page for
      more information.
    </para>
    <para>
      BIO_meth_free() destroys a <emphasis role="bold">BIO_METHOD</emphasis> structure and frees up any memory
      associated with it.
    </para>
    <para>
      BIO_meth_get_write_ex() and BIO_meth_set_write_ex() get and set the
      function used for writing arbitrary length data to the BIO
      respectively. This function will be called in response to the
      application calling BIO_write_ex() or BIO_write(). The parameters for
      the function have the same meaning as for BIO_write_ex(). Older code
      may call BIO_meth_get_write() and BIO_meth_set_write() instead.
      Applications should not call both BIO_meth_set_write_ex() and
      BIO_meth_set_write() or call BIO_meth_get_write() when the function
      was set with BIO_meth_set_write_ex().
    </para>
    <para>
      BIO_meth_get_read_ex() and BIO_meth_set_read_ex() get and set the
      function used for reading arbitrary length data from the BIO
      respectively. This function will be called in response to the
      application calling BIO_read_ex() or BIO_read(). The parameters for
      the function have the same meaning as for BIO_read_ex(). Older code
      may call BIO_meth_get_read() and BIO_meth_set_read() instead.
      Applications should not call both BIO_meth_set_read_ex() and
      BIO_meth_set_read() or call BIO_meth_get_read() when the function was
      set with BIO_meth_set_read_ex().
    </para>
    <para>
      BIO_meth_get_puts() and BIO_meth_set_puts() get and set the function
      used for writing a NULL terminated string to the BIO respectively.
      This function will be called in response to the application calling
      BIO_puts(). The parameters for the function have the same meaning as
      for BIO_puts().
    </para>
    <para>
      BIO_meth_get_gets() and BIO_meth_set_gets() get and set the function
      typically used for reading a line of data from the BIO respectively
      (see the <citerefentry> <refentrytitle>BIO_gets</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> page for more information).
      This function will be called in response to the application calling
      BIO_gets(). The parameters for the function have the same meaning as
      for BIO_gets().
    </para>
    <para>
      BIO_meth_get_ctrl() and BIO_meth_set_ctrl() get and set the function
      used for processing ctrl messages in the BIO respectively. See the
      <citerefentry> <refentrytitle>BIO_ctrl</refentrytitle>
      </citerefentry> page for more information. This function will be
      called in response to the application calling BIO_ctrl(). The
      parameters for the function have the same meaning as for BIO_ctrl().
    </para>
    <para>
      BIO_meth_get_create() and BIO_meth_set_create() get and set the
      function used for creating a new instance of the BIO respectively.
      This function will be called in response to the application calling
      BIO_new() and passing in a pointer to the current BIO_METHOD. The
      BIO_new() function will allocate the memory for the new BIO, and a
      pointer to this newly allocated structure will be passed as a
      parameter to the function.
    </para>
    <para>
      BIO_meth_get_destroy() and BIO_meth_set_destroy() get and set the
      function used for destroying an instance of a BIO respectively. This
      function will be called in response to the application calling
      BIO_free(). A pointer to the BIO to be destroyed is passed as a
      parameter. The destroy function should be used for BIO specific clean
      up. The memory for the BIO itself should not be freed by this
      function.
    </para>
    <para>
      BIO_meth_get_callback_ctrl() and BIO_meth_set_callback_ctrl() get and
      set the function used for processing callback ctrl messages in the
      BIO respectively. See the <citerefentry>
      <refentrytitle>BIO_callback_ctrl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> page for more information.
      This function will be called in response to the application calling
      BIO_callback_ctrl(). The parameters for the function have the same
      meaning as for BIO_callback_ctrl().
    </para>
  </refsection>
  <refsection xml:id="ID-18d7effbce2c92fa0ccc656ce9269582"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>bio</refentrytitle> </citerefentry>,
      <citerefentry> <refentrytitle>BIO_find_type</refentrytitle>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_ctrl</refentrytitle> </citerefentry>,
      <citerefentry> <refentrytitle>BIO_read_ex</refentrytitle>
      </citerefentry>, <citerefentry>
      <refentrytitle>BIO_new</refentrytitle> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-1f0847cfef141e3245d7fc04c3b1d105"><title>HISTORY</title>
    <para>
      The functions described here were added in OpenSSL version 1.1.0.
    </para>
  </refsection>
  <refsection xml:id="ID-044f9af5e679210cfeb0e224b8cb4509"><title>COPYRIGHT</title>
    <para>
      Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>