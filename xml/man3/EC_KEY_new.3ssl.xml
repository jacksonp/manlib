<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EC_KEY_new.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EC_KEY_new, EC_KEY_get_flags, EC_KEY_set_flags, EC_KEY_clear_flags,
EC_KEY_new_by_curve_name, EC_KEY_free, EC_KEY_copy, EC_KEY_dup, EC_KEY_up_ref,
EC_KEY_get0_group, EC_KEY_set_group, EC_KEY_get0_private_key,
EC_KEY_set_private_key, EC_KEY_get0_public_key, EC_KEY_set_public_key,
EC_KEY_get_enc_flags, EC_KEY_set_enc_flags, EC_KEY_get_conv_form,
EC_KEY_set_conv_form, EC_KEY_set_asn1_flag, EC_KEY_precompute_mult,
EC_KEY_generate_key, EC_KEY_check_key, EC_KEY_set_public_key_affine_coordinates,
EC_KEY_oct2key, EC_KEY_key2buf, EC_KEY_oct2priv, EC_KEY_priv2oct,
EC_KEY_priv2buf</refname>
<refpurpose>Functions for creating, destroying and manipulating
EC_KEY objects.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ec.h&gt;
#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis>EC_KEY *EC_KEY_new(void);
int EC_KEY_get_flags(const EC_KEY *key);
void EC_KEY_set_flags(EC_KEY *key, int flags);
void EC_KEY_clear_flags(EC_KEY *key, int flags);
EC_KEY *EC_KEY_new_by_curve_name(int nid);
void EC_KEY_free(EC_KEY *key);
EC_KEY *EC_KEY_copy(EC_KEY *dst, const EC_KEY *src);
EC_KEY *EC_KEY_dup(const EC_KEY *src);
int EC_KEY_up_ref(EC_KEY *key);
const EC_GROUP *EC_KEY_get0_group(const EC_KEY *key);
int EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group);
const BIGNUM *EC_KEY_get0_private_key(const EC_KEY *key);
int EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *prv);
const EC_POINT *EC_KEY_get0_public_key(const EC_KEY *key);
int EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub);
point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY *key);
void EC_KEY_set_conv_form(EC_KEY *eckey, point_conversion_form_t cform);
void EC_KEY_set_asn1_flag(EC_KEY *eckey, int asn1_flag);
int EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx);
int EC_KEY_generate_key(EC_KEY *key);
int EC_KEY_check_key(const EC_KEY *key);
int EC_KEY_set_public_key_affine_coordinates(EC_KEY *key,
                                             BIGNUM *x, BIGNUM *y);
const EC_KEY_METHOD *EC_KEY_get_method(const EC_KEY *key);
int EC_KEY_set_method(EC_KEY *key, const EC_KEY_METHOD *meth);</synopsis>
<synopsis>int EC_KEY_oct2key(EC_KEY *eckey, const unsigned char *buf, size_t len,
                   BN_CTX *ctx);
size_t EC_KEY_key2buf(const EC_KEY *eckey, point_conversion_form_t form,
                      unsigned char **pbuf, BN_CTX *ctx);</synopsis>
<synopsis>int EC_KEY_oct2priv(EC_KEY *eckey, unsigned char *buf, size_t len);
size_t EC_KEY_priv2oct(const EC_KEY *eckey, unsigned char *buf, size_t len);</synopsis>
<synopsis>size_t EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-a2ac6fb7e1d469eb58c431b33f9684c6"><title>DESCRIPTION</title>
    <para>
      An EC_KEY represents a public key and, optionally, the associated
      private key. A new EC_KEY with no associated curve can be constructed
      by calling EC_KEY_new(). The reference count for the newly created
      EC_KEY is initially set to 1. A curve can be associated with the
      EC_KEY by calling EC_KEY_set_group().
    </para>
    <para>
      Alternatively a new EC_KEY can be constructed by calling
      EC_KEY_new_by_curve_name() and supplying the nid of the associated
      curve. See <citerefentry> <refentrytitle>EC_GROUP_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> for a description of curve
      names. This function simply wraps calls to EC_KEY_new() and
      EC_GROUP_new_by_curve_name().
    </para>
    <para>
      Calling EC_KEY_free() decrements the reference count for the EC_KEY
      object, and if it has dropped to zero then frees the memory
      associated with it.  If <emphasis role="bold">key</emphasis> is NULL
      nothing is done.
    </para>
    <para>
      EC_KEY_copy() copies the contents of the EC_KEY in <emphasis role="bold">src</emphasis> into <emphasis role="bold">dest</emphasis>.
    </para>
    <para>
      EC_KEY_dup() creates a new EC_KEY object and copies <emphasis role="bold">ec_key</emphasis> into it.
    </para>
    <para>
      EC_KEY_up_ref() increments the reference count associated with the
      EC_KEY object.
    </para>
    <para>
      EC_KEY_generate_key() generates a new public and private key for the
      supplied <emphasis role="bold">eckey</emphasis> object. <emphasis role="bold">eckey</emphasis> must have an EC_GROUP object associated
      with it before calling this function. The private key is a random
      integer (0 &lt; priv_key &lt; order, where <emphasis role="italic">order</emphasis> is the order of the EC_GROUP object).
      The public key is an EC_POINT on the curve calculated by multiplying
      the generator for the curve by the private key.
    </para>
    <para>
      EC_KEY_check_key() performs various sanity checks on the EC_KEY
      object to confirm that it is valid.
    </para>
    <para>
      EC_KEY_set_public_key_affine_coordinates() sets the public key for
      <emphasis role="bold">key</emphasis> based on its affine
      co-ordinates; i.e., it constructs an EC_POINT object based on the
      supplied <emphasis role="bold">x</emphasis> and <emphasis role="bold">y</emphasis> values and sets the public key to be this
      EC_POINT. It also performs certain sanity checks on the key to
      confirm that it is valid.
    </para>
    <para>
      The functions EC_KEY_get0_group(), EC_KEY_set_group(),
      EC_KEY_get0_private_key(), EC_KEY_set_private_key(),
      EC_KEY_get0_public_key(), and EC_KEY_set_public_key() get and set the
      EC_GROUP object, the private key, and the EC_POINT public key for the
      <emphasis role="bold">key</emphasis> respectively.
    </para>
    <para>
      The functions EC_KEY_get_conv_form() and EC_KEY_set_conv_form() get
      and set the point_conversion_form for the <emphasis role="bold">key</emphasis>. For a description of
      point_conversion_forms please see <citerefentry>
      <refentrytitle>EC_POINT_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
    <para>
      EC_KEY_set_flags() sets the flags in the <emphasis role="bold">flags</emphasis> parameter on the EC_KEY object. Any
      flags that are already set are left set. The flags currently defined
      are EC_FLAG_NON_FIPS_ALLOW and EC_FLAG_FIPS_CHECKED. In addition
      there is the flag EC_FLAG_COFACTOR_ECDH which is specific to ECDH.
      EC_KEY_get_flags() returns the current flags that are set for this
      EC_KEY. EC_KEY_clear_flags() clears the flags indicated by the
      <emphasis role="bold">flags</emphasis> parameter; all other flags are
      left in their existing state.
    </para>
    <para>
      EC_KEY_set_asn1_flag() sets the asn1_flag on the underlying EC_GROUP
      object (if set). Refer to <citerefentry>
      <refentrytitle>EC_GROUP_copy</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> for further information on the asn1_flag.
    </para>
    <para>
      EC_KEY_precompute_mult() stores multiples of the underlying EC_GROUP
      generator for faster point multiplication. See also <citerefentry>
      <refentrytitle>EC_POINT_add</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
    <para>
      EC_KEY_oct2key() and EC_KEY_key2buf() are identical to the functions
      EC_POINT_oct2point() and EC_KEY_point2buf() except they use the
      public key EC_POINT in <emphasis role="bold">eckey</emphasis>.
    </para>
    <para>
      EC_KEY_oct2priv() and EC_KEY_priv2oct() convert between the private
      key component of <emphasis role="bold">eckey</emphasis> and octet
      form. The octet form consists of the content octets of the <emphasis role="bold">privateKey</emphasis> OCTET STRING in an <emphasis role="bold">ECPrivateKey</emphasis> ASN.1 structure.
    </para>
    <para>
      The function EC_KEY_priv2oct() must be supplied with a buffer long
      enough to store the octet form. The return value provides the number
      of octets stored. Calling the function with a NULL buffer will not
      perform the conversion but will just return the required buffer
      length.
    </para>
    <para>
      The function EC_KEY_priv2buf() allocates a buffer of suitable length
      and writes an EC_KEY to it in octet format. The allocated buffer is
      written to <emphasis role="bold">*pbuf</emphasis> and its length is
      returned. The caller must free up the allocated buffer with a call to
      OPENSSL_free(). Since the allocated buffer value is written to
      <emphasis role="bold">*pbuf</emphasis> the <emphasis role="bold">pbuf</emphasis> parameter <emphasis role="bold">MUST
      NOT</emphasis> be <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      EC_KEY_priv2buf() converts an EC_KEY private key into an allocated
      buffer.
    </para>
  </refsection>
  <refsection xml:id="ID-8feff9d03037074a737cb848404d0a29"><title>RETURN VALUES</title>
    <para>
      EC_KEY_new(), EC_KEY_new_by_curve_name() and EC_KEY_dup() return a
      pointer to the newly created EC_KEY object, or NULL on error.
    </para>
    <para>
      EC_KEY_get_flags() returns the flags associated with the EC_KEY
      object as an integer.
    </para>
    <para>
      EC_KEY_copy() returns a pointer to the destination key, or NULL on
      error.
    </para>
    <para>
      EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(),
      EC_KEY_set_public_key(), EC_KEY_precompute_mult(),
      EC_KEY_generate_key(), EC_KEY_check_key(),
      EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and
      EC_KEY_oct2priv() return 1 on success or 0 on error.
    </para>
    <para>
      EC_KEY_get0_group() returns the EC_GROUP associated with the EC_KEY.
    </para>
    <para>
      EC_KEY_get0_private_key() returns the private key associated with the
      EC_KEY.
    </para>
    <para>
      EC_KEY_get_conv_form() return the point_conversion_form for the
      EC_KEY.
    </para>
    <para>
      EC_KEY_key2buf(), EC_KEY_priv2oct() and EC_KEY_priv2buf() return the
      length of the buffer or 0 on error.
    </para>
  </refsection>
  <refsection xml:id="ID-1588f77a9847e8f0cf3b7c1e92741dd0"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>crypto</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ec</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_GROUP_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_GROUP_copy</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_POINT_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_POINT_add</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_GFp_simple_method</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>d2i_ECPKParameters</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
</refentry>