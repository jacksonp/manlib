<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>DH_set_method.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>DH_set_default_method, DH_get_default_method,
DH_set_method, DH_new_method, DH_OpenSSL</refname>
<refpurpose>select DH method</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/dh.h&gt;</synopsis>
<synopsis>void DH_set_default_method(const DH_METHOD *meth);</synopsis>
<synopsis>const DH_METHOD *DH_get_default_method(void);</synopsis>
<synopsis>int DH_set_method(DH *dh, const DH_METHOD *meth);</synopsis>
<synopsis>DH *DH_new_method(ENGINE *engine);</synopsis>
<synopsis>const DH_METHOD *DH_OpenSSL(void);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-bf8cf5eedef5d7e5583fc666483c2b2a"><title>DESCRIPTION</title>
    <para>
      A <emphasis role="bold">DH_METHOD</emphasis> specifies the functions
      that OpenSSL uses for Diffie-Hellman operations. By modifying the
      method, alternative implementations such as hardware accelerators may
      be used. IMPORTANT: See the NOTES section for important information
      about how these DH API functions are affected by the use of <emphasis role="bold">ENGINE</emphasis> API calls.
    </para>
    <para>
      Initially, the default DH_METHOD is the OpenSSL internal
      implementation, as returned by DH_OpenSSL().
    </para>
    <para>
      DH_set_default_method() makes <emphasis role="bold">meth</emphasis>
      the default method for all DH structures created later. <emphasis role="bold">NB</emphasis>: This is true only whilst no ENGINE has
      been set as a default for DH, so this function is no longer
      recommended.
    </para>
    <para>
      DH_get_default_method() returns a pointer to the current default
      DH_METHOD. However, the meaningfulness of this result is dependent on
      whether the ENGINE API is being used, so this function is no longer
      recommended.
    </para>
    <para>
      DH_set_method() selects <emphasis role="bold">meth</emphasis> to
      perform all operations using the key <emphasis role="bold">dh</emphasis>. This will replace the DH_METHOD used by
      the DH key and if the previous method was supplied by an ENGINE, the
      handle to that ENGINE will be released during the change. It is
      possible to have DH keys that only work with certain DH_METHOD
      implementations (eg. from an ENGINE module that supports embedded
      hardware-protected keys), and in such cases attempting to change the
      DH_METHOD for the key can have unexpected results.
    </para>
    <para>
      DH_new_method() allocates and initializes a DH structure so that
      <emphasis role="bold">engine</emphasis> will be used for the DH
      operations. If <emphasis role="bold">engine</emphasis> is NULL, the
      default ENGINE for DH operations is used, and if no default ENGINE is
      set, the DH_METHOD controlled by DH_set_default_method() is used.
    </para>
    <para>
      A new DH_METHOD object may be constructed using DH_meth_new() (see
      <citerefentry> <refentrytitle>DH_meth_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>).
    </para>
  </refsection>
  <refsection xml:id="ID-a45cb364ac74d968a89659e9d8a6993e"><title>RETURN VALUES</title>
    <para>
      DH_OpenSSL() and DH_get_default_method() return pointers to the
      respective <emphasis role="bold">DH_METHOD</emphasis>s.
    </para>
    <para>
      DH_set_default_method() returns no value.
    </para>
    <para>
      DH_set_method() returns non-zero if the provided <emphasis role="bold">meth</emphasis> was successfully set as the method for
      <emphasis role="bold">dh</emphasis> (including unloading the ENGINE
      handle if the previous method was supplied by an ENGINE).
    </para>
    <para>
      DH_new_method() returns NULL and sets an error code that can be
      obtained by <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> if the allocation fails. Otherwise it returns a
      pointer to the newly allocated structure.
    </para>
  </refsection>
  <refsection xml:id="ID-4e834cd8ff1917e94458520ed3287c0d"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>DH_new</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>DH_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>DH_meth_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-34117fe1e7682090250588f209552ba7"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>