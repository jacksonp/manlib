<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>CRYPTO_get_ex_new_index.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>CRYPTO_free_ex_index, CRYPTO_get_ex_new_index, CRYPTO_set_ex_data,
CRYPTO_get_ex_data, CRYPTO_free_ex_data</refname>
<refpurpose>functions supporting application-specific data</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/crypto.h&gt;</synopsis>
<synopsis>int CRYPTO_get_ex_new_index(int class_index,
               long argl, void *argp,
               CRYPTO_EX_new *new_func,
               CRYPTO_EX_dup *dup_func,
               CRYPTO_EX_free *free_func);</synopsis>
<synopsis>typedef int CRYPTO_EX_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                          int idx, long argl, void *argp);
typedef void CRYPTO_EX_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                            int idx, long argl, void *argp);
typedef int CRYPTO_EX_dup(CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from,
                          void *from_d, int idx, long argl, void *argp);</synopsis>
<synopsis>int CRYPTO_set_ex_data(CRYPTO_EX_DATA *r, int idx, void *arg);</synopsis>
<synopsis>void *CRYPTO_get_ex_data(CRYPTO_EX_DATA *r, int idx);</synopsis>
<synopsis>void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *r);</synopsis>
<synopsis>int CRYPTO_free_ex_index(int class_index, int idx);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-1a92aedf99290d7fefb74871e1e04f7b"><title>DESCRIPTION</title>
    <para>
      Several OpenSSL structures can have application-specific data
      attached to them, known as "exdata." The specific structures are:
    </para>
    <screen>SSL
SSL_CTX
SSL_SESSION
X509
X509_STORE
X509_STORE_CTX
DH
DSA
EC_KEY
RSA
ENGINE
UI
BIO</screen>
    <para>
      Each is identified by an <emphasis role="bold">CRYPTO_EX_INDEX_xxx</emphasis> define in the <emphasis role="bold">crypto.h</emphasis> header file.  In addition, <emphasis role="bold">CRYPTO_EX_INDEX_APP</emphasis> is reserved for
      applications to use this facility for their own structures.
    </para>
    <para>
      The API described here is used by OpenSSL to manipulate exdata for
      specific structures.  Since the application data can be anything at
      all it is passed and retrieved as a <emphasis role="bold">void
      *</emphasis> type.
    </para>
    <para>
      Exdata types are identified by an <emphasis role="bold">index</emphasis>, an integer guaranteed to be unique
      within structures for the lifetime of the program.  Applications
      using exdata typically call <emphasis role="bold">CRYPTO_get_ex_new_index</emphasis> at startup, and store
      the result in a global variable, or write a wrapper function to
      provide lazy evaluation.	The <emphasis role="bold">class_index</emphasis> should be one of the <emphasis role="bold">CRYPTO_EX_INDEX_xxx</emphasis> values. The <emphasis role="bold">argl</emphasis> and <emphasis role="bold">argp</emphasis>
      parameters are saved to be passed to the callbacks but are otherwise
      not used.  In order to transparently manipulate exdata, three
      callbacks must be provided. The semantics of those callbacks are
      described below.
    </para>
    <para>
      When copying or releasing objects with exdata, the callback functions
      are called in increasing order of their <emphasis role="bold">index</emphasis> value.
    </para>
    <para>
      If a dynamic library can be unloaded, it should call
      CRYPTO_free_ex_index() when this is done. This will replace the
      callbacks with no-ops so that applications don't crash.  Any existing
      exdata will be leaked.
    </para>
    <para>
      To set or get the exdata on an object, the appropriate type-specific
      routine must be used.  This is because the containing structure is
      opaque and the <emphasis role="bold">CRYPTO_EX_DATA</emphasis> field
      is not accessible.  In both API's, the <emphasis role="bold">idx</emphasis> parameter should be an already-created
      index value.
    </para>
    <para>
      When setting exdata, the pointer specified with a particular index is
      saved, and returned on a subsequent "get" call.  If the application
      is going to release the data, it must make sure to set a <emphasis role="bold">NULL</emphasis> value at the index, to avoid likely
      double-free crashes.
    </para>
    <para>
      The function <emphasis role="bold">CRYPTO_free_ex_data</emphasis> is
      used to free all exdata attached to a structure. The appropriate
      type-specific routine must be used. The <emphasis role="bold">class_index</emphasis> identifies the structure type, the
      <emphasis role="bold">obj</emphasis> is be the pointer to the actual
      structure, and <emphasis role="bold">r</emphasis> is a pointer to the
      structure's exdata field.
    </para>
    <refsection xml:id="ID-74847ad4ad3934d123af599541c9d0cf"><title>Callback Functions</title>
      <para>
	This section describes how the callback functions are used.
	Applications that are defining their own exdata using <emphasis role="bold">CYPRTO_EX_INDEX_APP</emphasis> must call them as
	described here.
      </para>
      <para>
	When a structure is initially allocated (such as RSA_new()) then
	the new_func() is called for every defined index. There is no
	requirement that the entire parent, or containing, structure has
	been set up. The new_func() is typically used only to allocate
	memory to store the exdata, and perhaps an "initialized" flag
	within that memory. The exdata value should be set by calling
	CRYPTO_set_ex_data().
      </para>
      <para>
	When a structure is free'd (such as SSL_CTX_free()) then the
	free_func() is called for every defined index.	Again, the state of
	the parent structure is not guaranteed.  The free_func() may be
	called with a NULL pointer.
      </para>
      <para>
	Both new_func() and free_func() take the same parameters. The
	<emphasis role="bold">parent</emphasis> is the pointer to the
	structure that contains the exdata. The <emphasis role="bold">ptr</emphasis> is the current exdata item; for
	new_func() this will typically be NULL.  The <emphasis role="bold">r</emphasis> parameter is a pointer to the exdata field
	of the object. The <emphasis role="bold">idx</emphasis> is the
	index and is the value returned when the callbacks were initially
	registered via CRYPTO_get_ex_new_index() and can be used if the
	same callback handles different types of exdata.
      </para>
      <para>
	dup_func() is called when a structure is being copied.	This is
	only done for <emphasis role="bold">SSL</emphasis> and <emphasis role="bold">SSL_SESSION</emphasis> objects.  The <emphasis role="bold">to</emphasis> and <emphasis role="bold">from</emphasis>
	parameters are pointers to the destination and source <emphasis role="bold">CRYPTO_EX_DATA</emphasis> structures, respectively. 
	The <emphasis role="bold">srcp</emphasis> parameter is a pointer to
	the source exdata. When the dup_func() returns, the value in
	<emphasis role="bold">srcp</emphasis> is copied to the destination
	ex_data.  If the pointer contained in <emphasis role="bold">srcp</emphasis> is not modified by the dup_func(), then
	both <emphasis role="bold">to</emphasis> and <emphasis role="bold">from</emphasis> will point to the same data. The
	<emphasis role="bold">idx</emphasis>, <emphasis role="bold">argl</emphasis> and <emphasis role="bold">argp</emphasis> parameters are as described for the
	other two callbacks.
      </para>
    </refsection>
  </refsection>
  <refsection xml:id="ID-0b6347c50eee87026eb5d7b7a927149f"><title>RETURN VALUES</title>
    <para>
      CRYPTO_get_ex_new_index() returns a new index or -1 on failure; the
      value <emphasis role="bold">0</emphasis> is reserved for the legacy
      "app_data" API's.
    </para>
    <para>
      CRYPTO_free_ex_index() and CRYPTO_set_ex_data() return 1 on success
      or 0 on failure.
    </para>
    <para>
      CRYPTO_get_ex_data() returns the application data or NULL on failure;
      note that NULL may be a valid value.
    </para>
    <para>
      dup_func() should return 0 for failure and 1 for success.
    </para>
  </refsection>
</refentry>