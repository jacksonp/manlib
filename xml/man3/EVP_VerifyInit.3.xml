<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EVP_VerifyInit.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EVP_VerifyInit, EVP_VerifyUpdate, EVP_VerifyFinal</refname>
<refpurpose>EVP signature verification functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/evp.h&gt;</synopsis>
<synopsis format="linespecific">int EVP_VerifyInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
int EVP_VerifyUpdate(EVP_MD_CTX *ctx, const void *d, unsigned int cnt);
int EVP_VerifyFinal(EVP_MD_CTX *ctx,unsigned char *sigbuf, unsigned int siglen,EVP_PKEY *pkey);</synopsis>
<synopsis format="linespecific">int EVP_VerifyInit(EVP_MD_CTX *ctx, const EVP_MD *type);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_VerifyInit.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      The EVP signature verification routines are a high level interface to
      digital signatures.
    </para>
    <para>
      EVP_VerifyInit_ex() sets up verification context <emphasis role="bold">ctx</emphasis> to use digest <emphasis role="bold">type</emphasis> from ENGINE <emphasis role="bold">impl</emphasis>. <emphasis role="bold">ctx</emphasis>
      must be initialized by calling EVP_MD_CTX_init() before calling this
      function.
    </para>
    <para>
      EVP_VerifyUpdate() hashes <emphasis role="bold">cnt</emphasis> bytes
      of data at <emphasis role="bold">d</emphasis> into the verification
      context <emphasis role="bold">ctx</emphasis>. This function can be
      called several times on the same <emphasis role="bold">ctx</emphasis>
      to include additional data.
    </para>
    <para>
      EVP_VerifyFinal() verifies the data in <emphasis role="bold">ctx</emphasis> using the public key <emphasis role="bold">pkey</emphasis> and against the <emphasis role="bold">siglen</emphasis> bytes at <emphasis role="bold">sigbuf</emphasis>.
    </para>
    <para>
      EVP_VerifyInit() initializes verification context <emphasis role="bold">ctx</emphasis> to use the default implementation of
      digest <emphasis role="bold">type</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_VerifyInit.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      EVP_VerifyInit_ex() and EVP_VerifyUpdate() return 1 for success and 0
      for failure.
    </para>
    <para>
      EVP_VerifyFinal() returns 1 for a correct signature, 0 for failure
      and -1 if some other error occurred.
    </para>
    <para>
      The error codes can be obtained by ERR_get_error(3).
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_VerifyInit.pod:NOTES"><title>NOTES</title>
    <para>
      The <emphasis role="bold">EVP</emphasis> interface to digital
      signatures should almost always be used in preference to the low
      level interfaces. This is because the code then becomes transparent
      to the algorithm used and much more flexible.
    </para>
    <para>
      Due to the link between message digests and public key algorithms the
      correct digest algorithm must be used with the correct public key
      type. A list of algorithms and associated public key algorithms
      appears in EVP_DigestInit(3). 
    </para>
    <para>
      The call to EVP_VerifyFinal() internally finalizes a copy of the
      digest context. This means that calls to EVP_VerifyUpdate() and
      EVP_VerifyFinal() can be called later to digest and verify additional
      data.
    </para>
    <para>
      Since only a copy of the digest context is ever finalized the context
      must be cleaned up after use by calling EVP_MD_CTX_cleanup() or a
      memory leak will occur.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_VerifyInit.pod:BUGS"><title>BUGS</title>
    <para>
      Older versions of this documentation wrongly stated that calls to
      EVP_VerifyUpdate() could not be made after calling EVP_VerifyFinal(). 
    </para>
    <para>
      Since the public key is passed in the call to EVP_SignFinal() any
      error relating to the private key (for example an unsuitable key and
      digest combination) will not be indicated until after potentially
      large amounts of data have been passed through EVP_SignUpdate().
    </para>
    <para>
      It is not possible to change the signing parameters using these
      function.
    </para>
    <para>
      The previous two bugs are fixed in the newer EVP_VerifyDigest*()
      function.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_VerifyInit.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      evp(3), EVP_SignInit(3), EVP_DigestInit(3), err(3), evp(3), hmac(3),
      md2(3), md5(3), mdc2(3), ripemd(3), sha(3), dgst(1)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.EVP_VerifyInit.pod:HISTORY"><title>HISTORY</title>
    <para>
      EVP_VerifyInit(), EVP_VerifyUpdate() and EVP_VerifyFinal() are
      available in all versions of SSLeay and OpenSSL.
    </para>
    <para>
      EVP_VerifyInit_ex() was added in OpenSSL 0.9.7
    </para>
  </refsection>
</refentry>