<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_should_retry.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_should_read, BIO_should_write,
BIO_should_io_special, BIO_retry_type, BIO_should_retry,
BIO_get_retry_BIO, BIO_get_retry_reason, BIO_set_retry_reason</refname>
<refpurpose>BIO retry
functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bio.h&gt;</synopsis>
<synopsis>int BIO_should_read(BIO *b);
int BIO_should_write(BIO *b);
int BIO_should_io_special(iBIO *b);
int BIO_retry_type(BIO *b);
int BIO_should_retry(BIO *b);</synopsis>
<synopsis>BIO *BIO_get_retry_BIO(BIO *bio, int *reason);
int BIO_get_retry_reason(BIO *bio);
void BIO_set_retry_reason(BIO *bio, int reason);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-c6e254314075c70da908f102cef390c5"><title>DESCRIPTION</title>
    <para>
      These functions determine why a BIO is not able to read or write
      data. They will typically be called after a failed BIO_read_ex() or
      BIO_write_ex() call.
    </para>
    <para>
      BIO_should_retry() is true if the call that produced this condition
      should then be retried at a later time.
    </para>
    <para>
      If BIO_should_retry() is false then the cause is an error condition.
    </para>
    <para>
      BIO_should_read() is true if the cause of the condition is that a BIO
      needs to read data.
    </para>
    <para>
      BIO_should_write() is true if the cause of the condition is that a
      BIO needs to read data.
    </para>
    <para>
      BIO_should_io_special() is true if some "special" condition, that is
      a reason other than reading or writing is the cause of the condition.
    </para>
    <para>
      BIO_retry_type() returns a mask of the cause of a retry condition
      consisting of the values <emphasis role="bold">BIO_FLAGS_READ</emphasis>, <emphasis role="bold">BIO_FLAGS_WRITE</emphasis>, <emphasis role="bold">BIO_FLAGS_IO_SPECIAL</emphasis> though current BIO types
      will only set one of these.
    </para>
    <para>
      BIO_get_retry_BIO() determines the precise reason for the special
      condition, it returns the BIO that caused this condition and if
      <emphasis role="bold">reason</emphasis> is not NULL it contains the
      reason code. The meaning of the reason code and the action that
      should be taken depends on the type of BIO that resulted in this
      condition.
    </para>
    <para>
      BIO_get_retry_reason() returns the reason for a special condition if
      passed the relevant BIO, for example as returned by
      BIO_get_retry_BIO().
    </para>
    <para>
      BIO_set_retry_reason() sets the retry reason for a special condition
      for a given BIO. This would usually only be called by BIO
      implementations.
    </para>
  </refsection>
  <refsection xml:id="ID-359dd1a33a09e042acc2bd66072af9de"><title>NOTES</title>
    <para>
      BIO_should_read(), BIO_should_write(), BIO_should_io_special(),
      BIO_retry_type(), and BIO_should_retry(), are implemented as macros.
    </para>
    <para>
      If BIO_should_retry() returns false then the precise "error
      condition" depends on the BIO type that caused it and the return code
      of the BIO operation. For example if a call to BIO_read_ex() on a
      socket BIO returns 0 and BIO_should_retry() is false then the cause
      will be that the connection closed. A similar condition on a file BIO
      will mean that it has reached EOF. Some BIO types may place
      additional information on the error queue. For more details see the
      individual BIO type manual pages.
    </para>
    <para>
      If the underlying I/O structure is in a blocking mode almost all
      current BIO types will not request a retry, because the underlying
      I/O calls will not. If the application knows that the BIO type will
      never signal a retry then it need not call BIO_should_retry() after a
      failed BIO I/O call. This is typically done with file BIOs.
    </para>
    <para>
      SSL BIOs are the only current exception to this rule: they can
      request a retry even if the underlying I/O structure is blocking, if
      a handshake occurs during a call to BIO_read(). An application can
      retry the failed call immediately or avoid this situation by setting
      SSL_MODE_AUTO_RETRY on the underlying SSL structure.
    </para>
    <para>
      While an application may retry a failed non blocking call immediately
      this is likely to be very inefficient because the call will fail
      repeatedly until data can be processed or is available. An
      application will normally wait until the necessary condition is
      satisfied. How this is done depends on the underlying I/O structure.
    </para>
    <para>
      For example if the cause is ultimately a socket and BIO_should_read()
      is true then a call to select() may be made to wait until data is
      available and then retry the BIO operation. By combining the retry
      conditions of several non blocking BIOs in a single select() call it
      is possible to service several BIOs in a single thread, though the
      performance may be poor if SSL BIOs are present because long delays
      can occur during the initial handshake process.
    </para>
    <para>
      It is possible for a BIO to block indefinitely if the underlying I/O
      structure cannot process or return any data. This depends on the
      behaviour of the platforms I/O functions. This is often not
      desirable: one solution is to use non blocking I/O and use a timeout
      on the select() (or equivalent) call.
    </para>
  </refsection>
  <refsection xml:id="ID-5e94c5afe1a3ca6a8f93b6a2804e7c5b"><title>BUGS</title>
    <para>
      The OpenSSL ASN1 functions cannot gracefully deal with non blocking
      I/O: that is they cannot retry after a partial read or write. This is
      usually worked around by only passing the relevant data to ASN1
      functions when the entire structure can be read or written.
    </para>
  </refsection>
  <refsection xml:id="ID-624e8d5188623db0669bf83082202626"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>bio</refentrytitle> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-1c8f44b224ac5dee35fe5926a246db2c"><title>HISTORY</title>
    <para>
      The BIO_get_retry_reason() and BIO_set_retry_reason() functions were
      added in OpenSSL version 1.1.0.
    </para>
  </refsection>
  <refsection xml:id="ID-289283e2d1dfcf081123181f81c5bd45"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>