<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_set_security_level.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_set_security_level, SSL_set_security_level, SSL_CTX_get_security_level, SSL_get_security_level, SSL_CTX_set_security_callback, SSL_set_security_callback, SSL_CTX_get_security_callback, SSL_get_security_callback, SSL_CTX_set0_security_ex_data, SSL_set0_security_ex_data, SSL_CTX_get0_security_ex_data, SSL_get0_security_ex_data</refname>
<refpurpose>SSL/TLS security framework</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis format="linespecific">void SSL_CTX_set_security_level(SSL_CTX *ctx, int level);
void SSL_set_security_level(SSL *s, int level);</synopsis>
<synopsis format="linespecific">int SSL_CTX_get_security_level(const SSL_CTX *ctx);
int SSL_get_security_level(const SSL *s);</synopsis>
<synopsis format="linespecific">void SSL_CTX_set_security_callback(SSL_CTX *ctx,
               int (*cb)(SSL *s, SSL_CTX *ctx, int op, int bits, int nid,
                                                       void *other, void *ex));</synopsis>
<synopsis format="linespecific">void SSL_set_security_callback(SSL *s,
               int (*cb)(SSL *s, SSL_CTX *ctx, int op, int bits, int nid,
                                                       void *other, void *ex));</synopsis>
<synopsis format="linespecific">int (*SSL_CTX_get_security_callback(const SSL_CTX *ctx))(SSL *s, SSL_CTX *ctx, int op, int bits, int nid, void *other, void *ex);
int (*SSL_get_security_callback(const SSL *s))(SSL *s, SSL_CTX *ctx, int op, int bits, int nid, void *other, void *ex);</synopsis>
<synopsis format="linespecific">void SSL_CTX_set0_security_ex_data(SSL_CTX *ctx, void *ex);
void SSL_set0_security_ex_data(SSL *s, void *ex);</synopsis>
<synopsis format="linespecific">void *SSL_CTX_get0_security_ex_data(const SSL_CTX *ctx);
void *SSL_get0_security_ex_data(const SSL *s);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      The functions SSL_CTX_set_security_level() and
      SSL_set_security_level() set the security level to <emphasis role="bold">level</emphasis>. If not set the libary default security
      level is used.
    </para>
    <para>
      The functions SSL_CTX_get_security_level() and
      SSL_get_security_level() retrieve the current security level.
    </para>
    <para>
      SSL_CTX_set_security_callback(), SSL_set_security_callback(),
      SSL_CTX_get_security_callback() and SSL_get_security_callback() get
      or set the security callback associated with <emphasis role="bold">ctx</emphasis> or <emphasis role="bold">s</emphasis>. If
      not set a default security callback is used. The meaning of the
      parameters and the behaviour of the default callbacks is described
      below.
    </para>
    <para>
      SSL_CTX_set0_security_ex_data(), SSL_set0_security_ex_data(),
      SSL_CTX_get0_security_ex_data() and SSL_get0_security_ex_data() set
      the extra data pointer passed to the <emphasis role="bold">ex</emphasis> parameter of the callback. This value is
      passed to the callback verbatim and can be set to any convenient
      application specific value.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:DEFAULT_CALLBACK_BEHAVIOUR"><title>DEFAULT CALLBACK BEHAVIOUR</title>
    <para>
      If an application doesn't set it's own security callback the default
      callback is used. It is intended to provide sane defaults. The
      meaning of each level is described below.
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:Level_0"/><emphasis role="bold">Level 0</emphasis></term>
          <listitem>
            <para>
	      Everything is permitted. This retains compatibility with
	      previous versions of OpenSSL.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:Level_1"/><emphasis role="bold">Level 1</emphasis></term>
          <listitem>
            <para>
	      The security level corresponds to a minimum of 80 bits of
	      security. Any parameters offering below 80 bits of security
	      are excluded. As a result RSA, DSA and DH keys shorter than
	      1024 bits and ECC keys shorter than 160 bits are prohibited.
	      All export ciphersuites are prohibited since they all offer
	      less than 80 bits of security. SSL version 2 is prohibited.
	      Any ciphersuite using MD5 for the MAC is also prohibited.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:Level_2"/><emphasis role="bold">Level 2</emphasis></term>
          <listitem>
            <para>
	      Security level set to 112 bits of security. As a result RSA,
	      DSA and DH keys shorter than 2048 bits and ECC keys shorter
	      than 224 bits are prohibited. In addition to the level 1
	      exclusions any ciphersuite using RC4 is also prohibited. SSL
	      version 3 is also not allowed. Compression is disabled.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:Level_3"/><emphasis role="bold">Level 3</emphasis></term>
          <listitem>
            <para>
	      Security level set to 128 bits of security. As a result RSA,
	      DSA and DH keys shorter than 3072 bits and ECC keys shorter
	      than 256 bits are prohibited. In addition to the level 2
	      exclusions ciphersuites not offering forward secrecy are
	      prohibited. TLS versions below 1.1 are not permitted. Session
	      tickets are disabled.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:Level_4"/><emphasis role="bold">Level 4</emphasis></term>
          <listitem>
            <para>
	      Security level set to 192 bits of security. As a result RSA,
	      DSA and DH keys shorter than 7680 bits and ECC keys shorter
	      than 384 bits are prohibited. Ciphersuites using SHA1 for the
	      MAC are prohibited. TLS versions below 1.2 are not permitted.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><anchor xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:Level_5"/><emphasis role="bold">Level 5</emphasis></term>
          <listitem>
            <para>
	      Security level set to 256 bits of security. As a result RSA,
	      DSA and DH keys shorter than 15360 bits and ECC keys shorter
	      than 512 bits are prohibited.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:APPLICATION_DEFINED_SECURITY_CALLBACKS"><title>APPLICATION DEFINED SECURITY CALLBACKS</title>
    <para>
      TBA
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:NOTES"><title>NOTES</title>
    <para>
      <emphasis role="bold">WARNING</emphasis> at this time setting the
      security level higher than 1 for general internet use is likely to
      cause <emphasis role="bold">considerable</emphasis> interoperability
      issues and is not recommended. This is because the <emphasis role="bold">SHA1</emphasis> algorithm is very widely used in
      certificates and will be rejected at levels higher than 1 because it
      only offers 80 bits of security.
    </para>
    <para>
      The default security level can be configured when OpenSSL is compiled
      by setting <emphasis role="bold">-DOPENSSL_TLS_SECURITY_LEVEL=level</emphasis>. If not set
      then 1 is used.
    </para>
    <para>
      The security framework disables or reject parameters inconsistent
      with the set security level. In the past this was difficult as
      applications had to set a number of distinct parameters (supported
      ciphers, supported curves supported signature algorithms) to achieve
      this end and some cases (DH parameter size for example) could not be
      checked at all.
    </para>
    <para>
      By setting an appropriate security level much of this complexity can
      be avoided.
    </para>
    <para>
      The bits of security limits affect all relevant parameters including
      ciphersuite encryption algorithms, supported ECC curves, supported
      signature algorithms, DH parameter sizes, certificate key sizes and
      signature algorithms. This limit applies no matter what other custom
      settings an application has set: so if the ciphersuite is set to
      <emphasis role="bold">ALL</emphasis> then only ciphersuites
      consistent with the security level are permissible.
    </para>
    <para>
      See SP800-57 for how the security limits are related to individual
      algorithms.
    </para>
    <para>
      Some security levels require large key sizes for none-ECC public key
      algorithms which can severely degrade performance. For example 256
      bits of security requires the use of RSA keys of at least 15360 bits
      in size.
    </para>
    <para>
      Some restrictions can be gracefully handled: for example ciphersuites
      offering insufficient security are not sent by the client and will
      not be selected by the server. Other restrictions such as the peer
      certificate key size or the DH parameter size will abort the
      handshake with a fatal alert.
    </para>
    <para>
      Attempts to set certificates or parameters with insufficient security
      are also blocked. For example trying to set a certificate using a 512
      bit RSA key using SSL_CTX_use_certificate() at level 1. Applications
      which do not check the return values for errors will misbehave: for
      example it might appear that a certificate is not set at all because
      it had been rejected.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      TBA
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.ssl.SSL_CTX_set_security_level.pod:HISTORY"><title>HISTORY</title>
    <para>
      These functions were first added to OpenSSL 1.1.0
    </para>
  </refsection>
</refentry>