<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>err.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>err</refname>
<refpurpose>error codes</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/err.h&gt;</synopsis>
<synopsis format="linespecific">unsigned long ERR_get_error(void);
unsigned long ERR_peek_error(void);
unsigned long ERR_get_error_line(const char **file, int *line);
unsigned long ERR_peek_error_line(const char **file, int *line);
unsigned long ERR_get_error_line_data(const char **file, int *line,
        const char **data, int *flags);
unsigned long ERR_peek_error_line_data(const char **file, int *line,
        const char **data, int *flags);</synopsis>
<synopsis format="linespecific">int ERR_GET_LIB(unsigned long e);
int ERR_GET_FUNC(unsigned long e);
int ERR_GET_REASON(unsigned long e);</synopsis>
<synopsis format="linespecific">void ERR_clear_error(void);</synopsis>
<synopsis format="linespecific">char *ERR_error_string(unsigned long e, char *buf);
const char *ERR_lib_error_string(unsigned long e);
const char *ERR_func_error_string(unsigned long e);
const char *ERR_reason_error_string(unsigned long e);</synopsis>
<synopsis format="linespecific">void ERR_print_errors(BIO *bp);
void ERR_print_errors_fp(FILE *fp);</synopsis>
<synopsis format="linespecific">void ERR_load_crypto_strings(void);
void ERR_free_strings(void);</synopsis>
<synopsis format="linespecific">void ERR_remove_state(unsigned long pid);</synopsis>
<synopsis format="linespecific">void ERR_put_error(int lib, int func, int reason, const char *file,
        int line);
void ERR_add_error_data(int num, ...);</synopsis>
<synopsis format="linespecific">void ERR_load_strings(int lib,ERR_STRING_DATA str[]);
unsigned long ERR_PACK(int lib, int func, int reason);
int ERR_get_next_error_library(void);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.err.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      When a call to the OpenSSL library fails, this is usually signaled by
      the return value, and an error code is stored in an error queue
      associated with the current thread. The <emphasis role="bold">err</emphasis> library provides functions to obtain these
      error codes and textual error messages.
    </para>
    <para>
      The ERR_get_error(3) manpage describes how to access error codes.
    </para>
    <para>
      Error codes contain information about where the error occurred, and
      what went wrong. ERR_GET_LIB(3) describes how to extract this
      information. A method to obtain human-readable error messages is
      described in ERR_error_string(3).
    </para>
    <para>
      ERR_clear_error(3) can be used to clear the error queue.
    </para>
    <para>
      Note that ERR_remove_state(3) should be used to avoid memory leaks
      when threads are terminated.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.err.pod:ADDING_NEW_ERROR_CODES_TO_OPENSSL"><title>ADDING NEW ERROR CODES TO OPENSSL</title>
    <para>
      See <citerefentry> <refentrytitle>ERR_put_error</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> if you want to record error
      codes in the OpenSSL error system from within your application.
    </para>
    <para>
      The remainder of this section is of interest only if you want to add
      new error codes to OpenSSL or add error codes from external
      libraries.
    </para>
    <refsection xml:id="sources.openssl.doc.crypto.err.pod:Reporting_errors"><title>Reporting errors</title>
      <para>
	Each sub-library has a specific macro XXXerr() that is used to
	report errors. Its first argument is a function code <emphasis role="bold">XXX_F_...</emphasis>, the second argument is a reason
	code <emphasis role="bold">XXX_R_...</emphasis>. Function codes are
	derived from the function names; reason codes consist of textual
	error descriptions. For example, the function ssl3_read_bytes()
	reports a "handshake failure" as follows:
      </para>
      <screen>SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_SSL_HANDSHAKE_FAILURE);</screen>
      <para>
	Function and reason codes should consist of upper case characters,
	numbers and underscores only. The error file generation script
	translates function codes into function names by looking in the
	header files for an appropriate function name, if none is found it
	just uses the capitalized form such as "SSL3_READ_BYTES" in the
	above example.
      </para>
      <para>
	The trailing section of a reason code (after the "_R_") is
	translated into lower case and underscores changed to spaces.
      </para>
      <para>
	When you are using new function or reason codes, run <emphasis role="bold">make errors</emphasis>. The necessary <emphasis role="bold">#define</emphasis>s will then automatically be added to
	the sub-library's header file.
      </para>
      <para>
	Although a library will normally report errors using its own
	specific XXXerr macro, another library's macro can be used. This is
	normally only done when a library wants to include ASN1 code which
	must use the ASN1err() macro.
      </para>
    </refsection>
    <refsection xml:id="sources.openssl.doc.crypto.err.pod:Adding_new_libraries"><title>Adding new libraries</title>
      <para>
	When adding a new sub-library to OpenSSL, assign it a library
	number <emphasis role="bold">ERR_LIB_XXX</emphasis>, define a macro
	XXXerr() (both in <emphasis role="bold">err.h</emphasis>), add its
	name to <emphasis role="bold">ERR_str_libraries[]</emphasis> (in
	<emphasis role="bold">crypto/err/err.c</emphasis>), and add
	<literal role="code">ERR_load_XXX_strings()</literal>
	to the ERR_load_crypto_strings() function (in <emphasis role="bold">crypto/err/err_all.c</emphasis>). Finally, add an entry
      </para>
      <screen>L      XXX     xxx.h   xxx_err.c</screen>
      <para>
	to <emphasis role="bold">crypto/err/openssl.ec</emphasis>, and add
	<emphasis role="bold">xxx_err.c</emphasis> to the Makefile. Running
	<emphasis role="bold">make errors</emphasis> will then generate a
	file <emphasis role="bold">xxx_err.c</emphasis>, and add all error
	codes used in the library to <emphasis role="bold">xxx.h</emphasis>.
      </para>
      <para>
	Additionally the library include file must have a certain form.
	Typically it will initially look like this:
      </para>
      <screen>#ifndef HEADER_XXX_H
#define HEADER_XXX_H

#ifdef __cplusplus
extern "C" {
#endif

/* Include files */

#include &amp;lt;openssl/bio.h&amp;gt;
#include &amp;lt;openssl/x509.h&amp;gt;

/* Macros, structures and function prototypes */



/* BEGIN ERROR CODES */</screen>
      <para>
	The <emphasis role="bold">BEGIN ERROR CODES</emphasis> sequence is
	used by the error code generation script as the point to place new
	error codes, any text after this point will be overwritten when
	<emphasis role="bold">make errors</emphasis> is run. The closing
	#endif etc will be automatically added by the script.
      </para>
      <para>
	The generated C error code file <emphasis role="bold">xxx_err.c</emphasis> will load the header files
	<emphasis role="bold">stdio.h</emphasis>, <emphasis role="bold">openssl/err.h</emphasis> and <emphasis role="bold">openssl/xxx.h</emphasis> so the header file must load
	any additional header files containing any definitions it uses.
      </para>
    </refsection>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.err.pod:USING_ERROR_CODES_IN_EXTERNAL_LIBRARIES"><title>USING ERROR CODES IN EXTERNAL LIBRARIES</title>
    <para>
      It is also possible to use OpenSSL's error code scheme in external
      libraries. The library needs to load its own codes and call the
      OpenSSL error code insertion script <emphasis role="bold">mkerr.pl</emphasis> explicitly to add codes to the header
      file and generate the C error code file. This will normally be done
      if the external library needs to generate new ASN1 structures but it
      can also be used to add more general purpose error code handling.
    </para>
    <para>
      TBA more details
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.err.pod:INTERNALS"><title>INTERNALS</title>
    <para>
      The error queues are stored in a hash table with one <emphasis role="bold">ERR_STATE</emphasis> entry for each pid. ERR_get_state()
      returns the current thread's <emphasis role="bold">ERR_STATE</emphasis>. An <emphasis role="bold">ERR_STATE</emphasis> can hold up to <emphasis role="bold">ERR_NUM_ERRORS</emphasis> error codes. When more error
      codes are added, the old ones are overwritten, on the assumption that
      the most recent errors are most important.
    </para>
    <para>
      Error strings are also stored in hash table. The hash tables can be
      obtained by calling ERR_get_err_state_table(void) and
      ERR_get_string_table(void) respectively.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.err.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      CRYPTO_set_locking_callback(3), ERR_get_error(3), ERR_GET_LIB(3),
      ERR_clear_error(3), ERR_error_string(3), ERR_print_errors(3),
      ERR_load_crypto_strings(3), ERR_remove_state(3), ERR_put_error(3),
      ERR_load_strings(3), SSL_get_error(3)
    </para>
  </refsection>
</refentry>