<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
<info>
    
</info>
<refmeta>
<refentrytitle>xibarrierreleasepointer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class="source"> </refmiscinfo>
<refmiscinfo class="manual"> </refmiscinfo>
</refmeta>
<refnamediv>
    <refname>XIBarrierReleasePointer</refname>
    <refname>XIBarrierReleasePointers</refname>
    <refpurpose>allow pointer movement across a pointer barrier</refpurpose>
</refnamediv>
<refsynopsisdiv xml:id="_synopsis">
<literallayout class="monospaced">#include &lt;X11/extensions/XInput2.h&gt;</literallayout>
<literallayout class="monospaced">int XIBarrierReleasePointer( Display *display,
                             int deviceid,
                             PointerBarrier barrier,
                             BarrierEventID eventid);</literallayout>
<literallayout class="monospaced">int XIBarrierReleasePointers( Display *display,
                              XIBarrierReleasePointerInfo *barriers,
                              int num_barriers);</literallayout>
<literallayout class="monospaced">display
       Specifies the connection to the X server.</literallayout>
<literallayout class="monospaced">deviceid
       Specifies the device allowed to move across the barrier.</literallayout>
<literallayout class="monospaced">barrier
       Specifies the barrier.</literallayout>
<literallayout class="monospaced">eventid
       Specifies the unique event ID for this barrier event sequence.</literallayout>
<literallayout class="monospaced">barriers
       List of deviceid, barrier, eventid triplets.</literallayout>
<literallayout class="monospaced">num_barriers
       Number of elements in barriers.</literallayout>
</refsynopsisdiv>
<refsect1 xml:id="_description">
<title>DESCRIPTION</title>
<literallayout class="monospaced">If a pointer is constrained by a pointer barrier, release the pointer
from the barrier and allow it to cross the barrier with the next motion.
If the pointer moves away from the barrier, this request does nothing.</literallayout>
<literallayout class="monospaced">This request only releases the pointer for the given barrier event
sequence. If the pointer moves away from or through the barrier, a
XI_BarrierLeave event is generated. Future pointer movement constrained
by this barrier will assign a new eventid and require a new
XIBarrierReleasePointer request.</literallayout>
<literallayout class="monospaced">If the pointer is not currently blocked by the barrier or the barrier
event sequence has ended, this request does nothing.</literallayout>
<literallayout class="monospaced">XIBarrierReleasePointer and XIBarrierReleasePointers can generate a
BadDevice or BadValue error.</literallayout>
</refsect1>
<refsect1 xml:id="_diagnostics">
<title>DIAGNOSTICS</title>
<literallayout class="monospaced">BadDevice
       An invalid device was specified. The device does not
       exist or is not a master pointer device.</literallayout>
<literallayout class="monospaced">BadValue
       A value for a PointerBarrier argument does not name a defined
       pointer barrier.</literallayout>
</refsect1>
<refsect1 xml:id="_see_also">
<title>See also</title>
<literallayout class="monospaced">XFixesCreatePointerBarrier(3)</literallayout>
</refsect1>
</refentry>