<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>EC_GROUP_copy.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>EC_GROUP_copy, EC_GROUP_dup, EC_GROUP_method_of, EC_GROUP_set_generator, EC_GROUP_get0_generator, EC_GROUP_get_order, EC_GROUP_get_cofactor, EC_GROUP_set_curve_name, EC_GROUP_get_curve_name, EC_GROUP_set_asn1_flag, EC_GROUP_get_asn1_flag, EC_GROUP_set_point_conversion_form, EC_GROUP_get_point_conversion_form, EC_GROUP_get0_seed, EC_GROUP_get_seed_len, EC_GROUP_set_seed, EC_GROUP_get_degree, EC_GROUP_check, EC_GROUP_check_discriminant, EC_GROUP_cmp, EC_GROUP_get_basis_type, EC_GROUP_get_trinomial_basis, EC_GROUP_get_pentanomial_basis</refname>
<refpurpose>Functions for manipulating <emphasis role="bold">EC_GROUP</emphasis> objects.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ec.h&gt;
#include &lt;openssl/bn.h&gt;</synopsis>
<synopsis>int EC_GROUP_copy(EC_GROUP *dst, const EC_GROUP *src);
EC_GROUP *EC_GROUP_dup(const EC_GROUP *src);</synopsis>
<synopsis>const EC_METHOD *EC_GROUP_method_of(const EC_GROUP *group);</synopsis>
<synopsis>int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator, const BIGNUM *order, const BIGNUM *cofactor);
const EC_POINT *EC_GROUP_get0_generator(const EC_GROUP *group);</synopsis>
<synopsis>int EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx);
const BIGNUM *EC_GROUP_get0_order(const EC_GROUP *group);
const BIGNUM *EC_GROUP_order_bits(const EC_GROUP *group);
int EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor, BN_CTX *ctx);
const BIGNUM *EC_GROUP_get0_cofactor(const EC_GROUP *group);</synopsis>
<synopsis>void EC_GROUP_set_curve_name(EC_GROUP *group, int nid);
int EC_GROUP_get_curve_name(const EC_GROUP *group);</synopsis>
<synopsis>void EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag);
int EC_GROUP_get_asn1_flag(const EC_GROUP *group);</synopsis>
<synopsis>void EC_GROUP_set_point_conversion_form(EC_GROUP *group, point_conversion_form_t form);
point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP *);</synopsis>
<synopsis>unsigned char *EC_GROUP_get0_seed(const EC_GROUP *x);
size_t EC_GROUP_get_seed_len(const EC_GROUP *);
size_t EC_GROUP_set_seed(EC_GROUP *, const unsigned char *, size_t len);</synopsis>
<synopsis>int EC_GROUP_get_degree(const EC_GROUP *group);</synopsis>
<synopsis>int EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx);</synopsis>
<synopsis>int EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx);</synopsis>
<synopsis>int EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx);</synopsis>
<synopsis>int EC_GROUP_get_basis_type(const EC_GROUP *);
int EC_GROUP_get_trinomial_basis(const EC_GROUP *, unsigned int *k);
int EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1,
       unsigned int *k2, unsigned int *k3);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-91c4cb946019b5f2a934997ecd457117"><title>DESCRIPTION</title>
    <para>
      EC_GROUP_copy copies the curve <emphasis role="bold">src</emphasis>
      into <emphasis role="bold">dst</emphasis>. Both <emphasis role="bold">src</emphasis> and <emphasis role="bold">dst</emphasis>
      must use the same EC_METHOD.
    </para>
    <para>
      EC_GROUP_dup creates a new EC_GROUP object and copies the content
      from <emphasis role="bold">src</emphasis> to the newly created
      EC_GROUP object.
    </para>
    <para>
      EC_GROUP_method_of obtains the EC_METHOD of <emphasis role="bold">group</emphasis>.
    </para>
    <para>
      EC_GROUP_set_generator sets curve parameters that must be agreed by
      all participants using the curve. These parameters include the
      <emphasis role="bold">generator</emphasis>, the <emphasis role="bold">order</emphasis> and the <emphasis role="bold">cofactor</emphasis>. The <emphasis role="bold">generator</emphasis> is a well defined point on the curve
      chosen for cryptographic operations. Integers used for point
      multiplications will be between 0 and n-1 where n is the <emphasis role="bold">order</emphasis>. The <emphasis role="bold">order</emphasis> multiplied by the <emphasis role="bold">cofactor</emphasis> gives the number of points on the
      curve.
    </para>
    <para>
      EC_GROUP_get0_generator returns the generator for the identified
      <emphasis role="bold">group</emphasis>.
    </para>
    <para>
      The functions EC_GROUP_get_order and EC_GROUP_get_cofactor populate
      the provided <emphasis role="bold">order</emphasis> and <emphasis role="bold">cofactor</emphasis> parameters with the respective order
      and cofactors for the <emphasis role="bold">group</emphasis>.
    </para>
    <para>
      The functions EC_GROUP_set_curve_name and EC_GROUP_get_curve_name,
      set and get the NID for the curve respectively (see <citerefentry>
      <refentrytitle>EC_GROUP_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>). If a curve does not have a NID associated with it,
      then EC_GROUP_get_curve_name will return 0.
    </para>
    <para>
      The asn1_flag value is used to determine whether the curve encoding
      uses explicit parameters or a named curve using an ASN1 OID: many
      applications only support the latter form. If asn1_flag is <emphasis role="bold">OPENSSL_EC_NAMED_CURVE</emphasis> then the named curve
      form is used and the parameters must have a corresponding named curve
      NID set. If asn1_flags is <emphasis role="bold">OPENSSL_EC_EXPLICIT_CURVE</emphasis> the parameters are
      explicitly encoded. The functions EC_GROUP_get_asn1_flag and
      EC_GROUP_set_asn1_flag get and set the status of the asn1_flag for
      the curve. Note: <emphasis role="bold">OPENSSL_EC_EXPLICIT_CURVE</emphasis> was first added to
      OpenSSL 1.1.0, for previous versions of OpenSSL the value 0 must be
      used instead. Before OpenSSL 1.1.0 the default form was to use
      explicit parameters (meaning that applications would have to
      explicitly set the named curve form) in OpenSSL 1.1.0 and later the
      named curve form is the default.
    </para>
    <para>
      The point_conversion_form for a curve controls how EC_POINT data is
      encoded as ASN1 as defined in X9.62 (ECDSA). point_conversion_form_t
      is an enum defined as follows:
    </para>
    <screen>typedef enum {
       /** the point is encoded as z||x, where the octet z specifies
        *   which solution of the quadratic equation y is  */
       POINT_CONVERSION_COMPRESSED = 2,
       /** the point is encoded as z||x||y, where z is the octet 0x02  */
       POINT_CONVERSION_UNCOMPRESSED = 4,
       /** the point is encoded as z||x||y, where the octet z specifies
        *  which solution of the quadratic equation y is  */
       POINT_CONVERSION_HYBRID = 6
} point_conversion_form_t;</screen>
    <para>
      For POINT_CONVERSION_UNCOMPRESSED the point is encoded as an octet
      signifying the UNCOMPRESSED form has been used followed by the octets
      for x, followed by the octets for y.
    </para>
    <para>
      For any given x co-ordinate for a point on a curve it is possible to
      derive two possible y values. For POINT_CONVERSION_COMPRESSED the
      point is encoded as an octet signifying that the COMPRESSED form has
      been used AND which of the two possible solutions for y has been
      used, followed by the octets for x.
    </para>
    <para>
      For POINT_CONVERSION_HYBRID the point is encoded as an octet
      signifying the HYBRID form has been used AND which of the two
      possible solutions for y has been used, followed by the octets for x,
      followed by the octets for y.
    </para>
    <para>
      The functions EC_GROUP_set_point_conversion_form and
      EC_GROUP_get_point_conversion_form set and get the
      point_conversion_form for the curve respectively.
    </para>
    <para>
      ANSI X9.62 (ECDSA standard) defines a method of generating the curve
      parameter b from a random number. This provides advantages in that a
      parameter obtained in this way is highly unlikely to be susceptible
      to special purpose attacks, or have any trapdoors in it. If the seed
      is present for a curve then the b parameter was generated in a
      verifiable fashion using that seed. The OpenSSL EC library does not
      use this seed value but does enable you to inspect it using
      EC_GROUP_get0_seed. This returns a pointer to a memory block
      containing the seed that was used. The length of the memory block can
      be obtained using EC_GROUP_get_seed_len. A number of the builtin
      curves within the library provide seed values that can be obtained.
      It is also possible to set a custom seed using EC_GROUP_set_seed and
      passing a pointer to a memory block, along with the length of the
      seed. Again, the EC library will not use this seed value, although it
      will be preserved in any ASN1 based communications.
    </para>
    <para>
      EC_GROUP_get_degree gets the degree of the field. For Fp fields this
      will be the number of bits in p.	For F2^m fields this will be the
      value m.
    </para>
    <para>
      The function EC_GROUP_check_discriminant calculates the discriminant
      for the curve and verifies that it is valid. For a curve defined over
      Fp the discriminant is given by the formula 4*a^3 + 27*b^2 whilst for
      F2^m curves the discriminant is simply b. In either case for the
      curve to be valid the discriminant must be non zero.
    </para>
    <para>
      The function EC_GROUP_check performs a number of checks on a curve to
      verify that it is valid. Checks performed include verifying that the
      discriminant is non zero; that a generator has been defined; that the
      generator is on the curve and has the correct order.
    </para>
    <para>
      EC_GROUP_cmp compares <emphasis role="bold">a</emphasis> and
      <emphasis role="bold">b</emphasis> to determine whether they
      represent the same curve or not.
    </para>
    <para>
      The functions EC_GROUP_get_basis_type, EC_GROUP_get_trinomial_basis
      and EC_GROUP_get_pentanomial_basis should only be called for curves
      defined over an F2^m field. Addition and multiplication operations
      within an F2^m field are performed using an irreducible polynomial
      function f(x). This function is either a trinomial of the form:
    </para>
    <para>
      f(x) = x^m + x^k + 1 with m &gt; k &gt;= 1
    </para>
    <para>
      or a pentanomial of the form:
    </para>
    <para>
      f(x) = x^m + x^k3 + x^k2 + x^k1 + 1 with m &gt; k3 &gt; k2 &gt; k1
      &gt;= 1
    </para>
    <para>
      The function EC_GROUP_get_basis_type returns a NID identifying
      whether a trinomial or pentanomial is in use for the field. The
      function EC_GROUP_get_trinomial_basis must only be called where f(x)
      is of the trinomial form, and returns the value of <emphasis role="bold">k</emphasis>. Similarly the function
      EC_GROUP_get_pentanomial_basis must only be called where f(x) is of
      the pentanomial form, and returns the values of <emphasis role="bold">k1</emphasis>, <emphasis role="bold">k2</emphasis> and
      <emphasis role="bold">k3</emphasis> respectively.
    </para>
  </refsection>
  <refsection xml:id="ID-a56f0a5c4600fadf97c22d672d94d72f"><title>RETURN VALUES</title>
    <para>
      The following functions return 1 on success or 0 on error:
      EC_GROUP_copy, EC_GROUP_set_generator, EC_GROUP_check,
      EC_GROUP_check_discriminant, EC_GROUP_get_trinomial_basis and
      EC_GROUP_get_pentanomial_basis.
    </para>
    <para>
      EC_GROUP_dup returns a pointer to the duplicated curve, or NULL on
      error.
    </para>
    <para>
      EC_GROUP_method_of returns the EC_METHOD implementation in use for
      the given curve or NULL on error.
    </para>
    <para>
      EC_GROUP_get0_generator returns the generator for the given curve or
      NULL on error.
    </para>
    <para>
      EC_GROUP_get_order, EC_GROUP_get_cofactor, EC_GROUP_get_curve_name,
      EC_GROUP_get_asn1_flag, EC_GROUP_get_point_conversion_form and
      EC_GROUP_get_degree return the order, cofactor, curve name (NID),
      ASN1 flag, point_conversion_form and degree for the specified curve
      respectively. If there is no curve name associated with a curve then
      EC_GROUP_get_curve_name will return 0.
    </para>
    <para>
      EC_GROUP_get0_order() returns an internal pointer to the group order.
      EC_GROUP_get_order_bits() returns the number of bits in the group
      order. EC_GROUP_get0_cofactor() returns an internal pointer to the
      group cofactor.
    </para>
    <para>
      EC_GROUP_get0_seed returns a pointer to the seed that was used to
      generate the parameter b, or NULL if the seed is not specified.
      EC_GROUP_get_seed_len returns the length of the seed or 0 if the seed
      is not specified.
    </para>
    <para>
      EC_GROUP_set_seed returns the length of the seed that has been set.
      If the supplied seed is NULL, or the supplied seed length is 0, the
      return value will be 1. On error 0 is returned.
    </para>
    <para>
      EC_GROUP_cmp returns 0 if the curves are equal, 1 if they are not
      equal, or -1 on error.
    </para>
    <para>
      EC_GROUP_get_basis_type returns the values NID_X9_62_tpBasis or
      NID_X9_62_ppBasis (as defined in &lt;openssl/obj_mac.h&gt;) for a
      trinomial or pentanomial respectively. Alternatively in the event of
      an error a 0 is returned.
    </para>
  </refsection>
  <refsection xml:id="ID-11328a3ec8a8413aa581366bd16deaa6"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>crypto</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ec</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_GROUP_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_POINT_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_POINT_add</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_KEY_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>EC_GFp_simple_method</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>d2i_ECPKParameters</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-b9633562f07a45cb4236a59dde648d5a"><title>COPYRIGHT</title>
    <para>
      Copyright 2013-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>