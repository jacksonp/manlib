<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_set1_host.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_set1_host, SSL_add1_host, SSL_set_hostflags, SSL_get0_peername</refname>
<refpurpose>SSL server verification parameters</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;
#include &lt;openssl/x509_vfy.h&gt;</synopsis>
<synopsis>int SSL_set1_host(SSL *s, const char *hostname);
int SSL_add1_host(SSL *s, const char *hostname);
void SSL_set_hostflags(SSL *s, unsigned int flags);
const char *SSL_get0_peername(SSL *s);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-fe0b25f1a25e6b9f46d80e94e7d4e9c6"><title>DESCRIPTION</title>
    <para>
      These functions configure server hostname checks in the SSL client.
    </para>
    <para>
      SSL_set1_host() sets the expected DNS hostname to <emphasis role="bold">name</emphasis> clearing any previously specified host
      name or names.  If <emphasis role="bold">name</emphasis> is NULL, or
      the empty string the list of hostnames is cleared, and name checks
      are not performed on the peer certificate.  When a non-empty
      <emphasis role="bold">name</emphasis> is specified, certificate
      verification automatically checks the peer hostname via
      <citerefentry> <refentrytitle>X509_check_host</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> with <emphasis role="bold">flags</emphasis> as specified via SSL_set_hostflags(). 
      Clients that enable DANE TLSA authentication via <citerefentry>
      <refentrytitle>SSL_dane_enable</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> should leave it to that
      function to set the primary reference identifier of the peer, and
      should not call SSL_set1_host().
    </para>
    <para>
      SSL_add1_host() adds <emphasis role="bold">name</emphasis> as an
      additional reference identifier that can match the peer's
      certificate.  Any previous names set via SSL_set1_host() or
      SSL_add1_host() are retained, no change is made if <emphasis role="bold">name</emphasis> is NULL or empty.  When multiple names
      are configured, the peer is considered verified when any name
      matches.	This function is required for DANE TLSA in the presence of
      service name indirection via CNAME, MX or SRV records as specified in
      RFC7671, RFC7672 or RFC7673.
    </para>
    <para>
      SSL_set_hostflags() sets the <emphasis role="bold">flags</emphasis>
      that will be passed to <citerefentry>
      <refentrytitle>X509_check_host</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> when name checks are
      applicable, by default the <emphasis role="bold">flags</emphasis>
      value is 0.  See <citerefentry>
      <refentrytitle>X509_check_host</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> for the list of available
      flags and their meaning.
    </para>
    <para>
      SSL_get0_peername() returns the DNS hostname or subject CommonName
      from the peer certificate that matched one of the reference
      identifiers.  When wildcard matching is not disabled, the name
      matched in the peer certificate may be a wildcard name.  When one of
      the reference identifiers configured via SSL_set1_host() or
      SSL_add1_host() starts with ".", which indicates a parent domain
      prefix rather than a fixed name, the matched peer name may be a
      sub-domain of the reference identifier.  The returned string is
      allocated by the library and is no longer valid once the associated
      <emphasis role="bold">ssl</emphasis> handle is cleared or freed, or a
      renegotiation takes place.  Applications must not free the return
      value.
    </para>
    <para>
      SSL clients are advised to use these functions in preference to
      explicitly calling <citerefentry>
      <refentrytitle>X509_check_host</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.  Hostname checks are out of
      scope with the RFC7671 DANE-EE(3) certificate usage, and the internal
      check will be suppressed as appropriate when DANE is enabled.
    </para>
  </refsection>
  <refsection xml:id="ID-645552ccd2c9883238711971e8f7c81d"><title>RETURN VALUES</title>
    <para>
      SSL_set1_host() and SSL_add1_host() return 1 for success and 0 for
      failure.
    </para>
    <para>
      SSL_get0_peername() returns NULL if peername verification is not
      applicable (as with RFC7671 DANE-EE(3)), or no trusted peername was
      matched.	Otherwise, it returns the matched peername.  To determine
      whether verification succeeded call <citerefentry>
      <refentrytitle>SSL_get_verify_result</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-b8f0cebe31d04e804dd6e4c276d92f58"><title>EXAMPLE</title>
    <para>
      Suppose "smtp.example.com" is the MX host of the domain
      "example.com". The calls below will arrange to match either the MX
      hostname or the destination domain name in the SMTP server
      certificate.  Wildcards are supported, but must match the entire
      label.  The actual name matched in the certificate (which might be a
      wildcard) is retrieved, and must be copied by the application if it
      is to be retained beyond the lifetime of the SSL connection.
    </para>
    <screen>SSL_set_hostflags(ssl, X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);
if (!SSL_set1_host(ssl, "smtp.example.com")) {
  /* handle error */
}
if (!SSL_add1_host(ssl, "example.com")) {
  /* handle error */
}

/* XXX: Perform SSL_connect() handshake and handle errors here */

if (SSL_get_verify_result(ssl) == X509_V_OK) {
    const char *peername = SSL_get0_peername(ssl);

    if (peername != NULL) {
        /* Name checks were in scope and matched the peername */
    }
}</screen>
  </refsection>
  <refsection xml:id="ID-8245bd8f5bf37fe795620be50ecf2f5e"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>X509_check_host</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_get_verify_result</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>. <citerefentry>
      <refentrytitle>SSL_dane_enable</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-2ba086939c2ac2168617b464e39f2364"><title>HISTORY</title>
    <para>
      These functions were first added to OpenSSL 1.1.0.
    </para>
  </refsection>
  <refsection xml:id="ID-fbdf24e953e0be378718d3199865863a"><title>COPYRIGHT</title>
    <para>
      Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>