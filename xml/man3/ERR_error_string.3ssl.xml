<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>ERR_error_string.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>ERR_error_string, ERR_error_string_n, ERR_lib_error_string,
ERR_func_error_string, ERR_reason_error_string</refname>
<refpurpose>obtain human-readable
error message</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/err.h&gt;</synopsis>
<synopsis>char *ERR_error_string(unsigned long e, char *buf);
void ERR_error_string_n(unsigned long e, char *buf, size_t len);</synopsis>
<synopsis>const char *ERR_lib_error_string(unsigned long e);
const char *ERR_func_error_string(unsigned long e);
const char *ERR_reason_error_string(unsigned long e);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-47e07406c7d2ecf01b674306285ca50f"><title>DESCRIPTION</title>
    <para>
      ERR_error_string() generates a human-readable string representing the
      error code <emphasis role="italic">e</emphasis>, and places it at
      <emphasis role="italic">buf</emphasis>. <emphasis role="italic">buf</emphasis> must be at least 256 bytes long. If
      <emphasis role="italic">buf</emphasis> is <emphasis role="bold">NULL</emphasis>, the error string is placed in a static
      buffer. Note that this function is not thread-safe and does no checks
      on the size of the buffer; use ERR_error_string_n() instead.
    </para>
    <para>
      ERR_error_string_n() is a variant of ERR_error_string() that writes
      at most <emphasis role="italic">len</emphasis> characters (including
      the terminating 0) and truncates the string if necessary. For
      ERR_error_string_n(), <emphasis role="italic">buf</emphasis> may not
      be <emphasis role="bold">NULL</emphasis>.
    </para>
    <para>
      The string will have the following format:
    </para>
    <screen>error:[error code]:[library name]:[function name]:[reason string]</screen>
    <para>
      <emphasis role="italic">error code</emphasis> is an 8 digit
      hexadecimal number, <emphasis role="italic">library name</emphasis>,
      <emphasis role="italic">function name</emphasis> and <emphasis role="italic">reason string</emphasis> are ASCII text.
    </para>
    <para>
      ERR_lib_error_string(), ERR_func_error_string() and
      ERR_reason_error_string() return the library name, function name and
      reason string respectively.
    </para>
    <para>
      If there is no text string registered for the given error code, the
      error string will contain the numeric code.
    </para>
    <para>
      <citerefentry> <refentrytitle>ERR_print_errors</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> can be used to print all
      error codes currently in the queue.
    </para>
  </refsection>
  <refsection xml:id="ID-dd22a5f640f7f291ab52d2002faa08df"><title>RETURN VALUES</title>
    <para>
      ERR_error_string() returns a pointer to a static buffer containing
      the string if <emphasis role="italic">buf</emphasis> <emphasis role="bold">== NULL</emphasis>, <emphasis role="italic">buf</emphasis> otherwise.
    </para>
    <para>
      ERR_lib_error_string(), ERR_func_error_string() and
      ERR_reason_error_string() return the strings, and <emphasis role="bold">NULL</emphasis> if none is registered for the error code.
    </para>
  </refsection>
  <refsection xml:id="ID-e423e53214de8ad52315179d9547ebf9"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>err</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ERR_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>ERR_print_errors</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
</refentry>