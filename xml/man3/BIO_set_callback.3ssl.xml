<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_set_callback.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_set_callback_ex, BIO_get_callback_ex, BIO_set_callback, BIO_get_callback,
BIO_set_callback_arg, BIO_get_callback_arg, BIO_debug_callback</refname>
<refpurpose>BIO callback functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/bio.h&gt;</synopsis>
<synopsis>typedef long (*BIO_callback_fn_ex)(BIO *b, int oper, const char *argp,
                                   size_t len, int argi,
                                   long argl, int ret, size_t *processed);
typedef long (*BIO_callback_fn)(BIO *b, int oper, const char *argp, int argi,
                                long argl, long ret);</synopsis>
<synopsis>void BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex callback);
BIO_callback_fn_ex BIO_get_callback_ex(const BIO *b);</synopsis>
<synopsis>void BIO_set_callback(BIO *b, BIO_callack_fn cb);
BIO_callack_fn BIO_get_callback(BIO *b);
void BIO_set_callback_arg(BIO *b, char *arg);
char *BIO_get_callback_arg(const BIO *b);</synopsis>
<synopsis>long BIO_debug_callback(BIO *bio, int cmd, const char *argp, int argi,
                        long argl, long ret);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-42b142dcab7a98b5dc5d07ac69970692"><title>DESCRIPTION</title>
    <para>
      BIO_set_callback_ex() and BIO_get_callback_ex() set and retrieve the
      BIO callback. The callback is called during most high level BIO
      operations. It can be used for debugging purposes to trace operations
      on a BIO or to modify its operation.
    </para>
    <para>
      BIO_set_callback() and BIO_get_callback() set and retrieve the old
      format BIO callback. New code should not use these functions, but
      they are retained for backwards compatbility. Any callback set via
      BIO_set_callback_ex() will get called in preference to any set by
      BIO_set_callback().
    </para>
    <para>
      BIO_set_callback_arg() and BIO_get_callback_arg() are macros which
      can be used to set and retrieve an argument for use in the callback.
    </para>
    <para>
      BIO_debug_callback() is a standard debugging callback which prints
      out information relating to each BIO operation. If the callback
      argument is set it is interpreted as a BIO to send the information
      to, otherwise stderr is used.
    </para>
    <para>
      BIO_callback_fn_ex() is the type of the callback function and
      BIO_callback_fn() is the type of the old format callback function.
      The meaning of each argument is described below:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">b</emphasis></term>
          <listitem>
            <para>
	      The BIO the callback is attached to is passed in <emphasis role="bold">b</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">oper</emphasis></term>
          <listitem>
            <para>
	      <emphasis role="bold">oper</emphasis> is set to the operation
	      being performed. For some operations the callback is called
	      twice, once before and once after the actual operation, the
	      latter case has <emphasis role="bold">oper</emphasis> or'ed
	      with BIO_CB_RETURN.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">len</emphasis></term>
          <listitem>
            <para>
	      The length of the data requested to be read or written. This
	      is only useful if <emphasis role="bold">oper</emphasis> is
	      BIO_CB_READ, BIO_CB_WRITE or BIO_CB_GETS.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">argp</emphasis> <emphasis role="bold">argi</emphasis> <emphasis role="bold">argl</emphasis></term>
          <listitem>
            <para>
	      The meaning of the arguments <emphasis role="bold">argp</emphasis>, <emphasis role="bold">argi</emphasis> and <emphasis role="bold">argl</emphasis> depends on the value of <emphasis role="bold">oper</emphasis>, that is the operation being
	      performed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">processed</emphasis></term>
          <listitem>
            <para>
	      <emphasis role="bold">processed</emphasis> is a pointer to a
	      location which will be updated with the amount of data that
	      was actually read or written. Only used for BIO_CB_READ,
	      BIO_CB_WRITE, BIO_CB_GETS and BIO_CB_PUTS.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">ret</emphasis></term>
          <listitem>
            <para>
	      <emphasis role="bold">ret</emphasis> is the return value that
	      would be returned to the application if no callback were
	      present. The actual value returned is the return value of the
	      callback itself. In the case of callbacks called before the
	      actual BIO operation 1 is placed in <emphasis role="bold">ret</emphasis>, if the return value is not
	      positive it will be immediately returned to the application
	      and the BIO operation will not be performed.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      The callback should normally simply return <emphasis role="bold">ret</emphasis> when it has finished processing, unless it
      specifically wishes to modify the value returned to the application.
    </para>
  </refsection>
  <refsection xml:id="ID-f6666cc127b9ef81fd09985d051c8f7b"><title>CALLBACK OPERATIONS</title>
    <para>
      In the notes below, <emphasis role="bold">callback</emphasis> defers
      to the actual callback function that is called.
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">BIO_free(b)</emphasis></term>
          <listitem>
            <screen>callback_ex(b, BIO_CB_FREE, NULL, 0, 0, 0L, 1L, NULL)</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_FREE, NULL, 0L, 0L, 1L)</screen>
            <para>
	      is called before the free operation.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">BIO_read_ex(b, out, outl, read)</emphasis></term>
          <listitem>
            <screen>callback_ex(b, BIO_CB_READ, out, outl, 0, 0L, 1L, read)</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_READ, out, outl, 0L, 1L)</screen>
            <para>
	      is called before the read and
            </para>
            <screen>callback_ex(b, BIO_CB_READ | BIO_CB_RETURN, out, outl, 0, 0L, retvalue, read)</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_READ|BIO_CB_RETURN, out, outl, 0L, retvalue)</screen>
            <para>
	      after.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">BIO_write(b, in, inl, written)</emphasis></term>
          <listitem>
            <screen>callback_ex(b, BIO_CB_WRITE, in, inl, 0, 0L, 1L, written)</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_WRITE, in, inl, 0L, 1L)</screen>
            <para>
	      is called before the write and
            </para>
            <screen>callback_ex(b, BIO_CB_WRITE | BIO_CB_RETURN, in, inl, 0, 0L, retvalue, written)</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_WRITE|BIO_CB_RETURN, in, inl, 0L, retvalue)</screen>
            <para>
	      after.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">BIO_gets(b, out, outl)</emphasis></term>
          <listitem>
            <screen>callback_ex(b, BIO_CB_GETS, out, outl, 0, 0L, 1, NULL, NULL)</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_GETS, out, outl, 0L, 1L)</screen>
            <para>
	      is called before the operation and
            </para>
            <screen>callback_ex(b, BIO_CB_GETS | BIO_CB_RETURN, out, outl, 0, 0L, retvalue, read)</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_GETS|BIO_CB_RETURN, out, outl, 0L, retvalue)</screen>
            <para>
	      after.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">BIO_puts(b, in)</emphasis></term>
          <listitem>
            <screen>callback_ex(b, BIO_CB_PUTS, in, 0, 0, 0L, 1L, NULL);</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_PUTS, in, 0, 0L, 1L)</screen>
            <para>
	      is called before the operation and
            </para>
            <screen>callback_ex(b, BIO_CB_PUTS | BIO_CB_RETURN, in, 0, 0, 0L, retvalue, written)</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_WRITE|BIO_CB_RETURN, in, 0, 0L, retvalue)</screen>
            <para>
	      after.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">BIO_ctrl(BIO *b, int cmd, long larg, void *parg)</emphasis></term>
          <listitem>
            <screen>callback_ex(b, BIO_CB_CTRL, parg, 0, cmd, larg, 1L, NULL)</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_CTRL, parg, cmd, larg, 1L)</screen>
            <para>
	      is called before the call and
            </para>
            <screen>callback_ex(b, BIO_CB_CTRL | BIO_CB_RETURN, parg, 0, cmd, larg, ret, NULL)</screen>
            <para>
	      or
            </para>
            <screen>callback(b, BIO_CB_CTRL|BIO_CB_RETURN, parg, cmd, larg, ret)</screen>
            <para>
	      after.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-33ad59e4b38e973583e83d957dee7404"><title>EXAMPLE</title>
    <para>
      The BIO_debug_callback() function is a good example, its source is in
      crypto/bio/bio_cb.c
    </para>
  </refsection>
  <refsection xml:id="ID-df6568797b507c7f41b0aedc91e04387"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>