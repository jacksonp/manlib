<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_CTX_set_tlsext_status_cb.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_CTX_set_tlsext_status_cb, SSL_CTX_set_tlsext_status_arg,
SSL_CTX_set_tlsext_status_type, SSL_set_tlsext_status_type,
SSL_get_tlsext_status_ocsp_resp, SSL_set_tlsext_status_ocsp_resp</refname>
<refpurpose>OCSP
Certificate Status Request functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/tls1.h&gt;</synopsis>
<synopsis>long SSL_CTX_set_tlsext_status_cb(SSL_CTX *ctx,
                                  int (*callback)(SSL *, void *));
long SSL_CTX_set_tlsext_status_arg(SSL_CTX *ctx, void *arg);</synopsis>
<synopsis>long SSL_CTX_set_tlsext_status_type(SSL_CTX *ctx, int type);</synopsis>
<synopsis>long SSL_set_tlsext_status_type(SSL *s, int type);</synopsis>
<synopsis>long SSL_get_tlsext_status_ocsp_resp(ssl, unsigned char **resp);
long SSL_set_tlsext_status_ocsp_resp(ssl, unsigned char *resp, int len);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-f4c6c28288d805590da2963728a83460"><title>DESCRIPTION</title>
    <para>
      A client application may request that a server send back an OCSP
      status response (also known as OCSP stapling). To do so the client
      should call the SSL_CTX_set_tlsext_status_type() function prior to
      the creation of any SSL objects. Alternatively an application can
      call the SSL_set_tlsext_status_type() function on an individual SSL
      object prior to the start of the handshake. Currently the only
      supported type is <emphasis role="bold">TLSEXT_STATUSTYPE_ocsp</emphasis>. This value should be
      passed in the <emphasis role="bold">type</emphasis> argument.
    </para>
    <para>
      The client should additionally provide a callback function to decide
      what to do with the returned OCSP response by calling
      SSL_CTX_set_tlsext_status_cb(). The callback function should
      determine whether the returned OCSP response is acceptable or not.
      The callback will be passed as an argument the value previously set
      via a call to SSL_CTX_set_tlsext_status_arg(). Note that the callback
      will not be called in the event of a handshake where session
      resumption occurs (because there are no Certificates exchanged in
      such a handshake).
    </para>
    <para>
      The response returned by the server can be obtained via a call to
      SSL_get_tlsext_status_ocsp_resp(). The value <emphasis role="bold">*resp</emphasis> will be updated to point to the OCSP
      response data and the return value will be the length of that data.
      Typically a callback would obtain an OCSP_RESPONSE object from this
      data via a call to the d2i_OCSP_RESPONSE() function. If the server
      has not provided any response data then <emphasis role="bold">*resp</emphasis> will be NULL and the return value from
      SSL_get_tlsext_status_ocsp_resp() will be -1.
    </para>
    <para>
      A server application must also call the
      SSL_CTX_set_tlsext_status_cb() function if it wants to be able to
      provide clients with OCSP Certificate Status responses. Typically the
      server callback would obtain the server certificate that is being
      sent back to the client via a call to SSL_get_certificate(); obtain
      the OCSP response to be sent back; and then set that response data by
      calling SSL_set_tlsext_status_ocsp_resp(). A pointer to the response
      data should be provided in the <emphasis role="bold">resp</emphasis>
      argument, and the length of that data should be in the <emphasis role="bold">len</emphasis> argument.
    </para>
  </refsection>
  <refsection xml:id="ID-e3a6f3eb9edb9faf5472ee1ea3baf1bf"><title>RETURN VALUES</title>
    <para>
      The callback when used on the client side should return a negative
      value on error; 0 if the response is not acceptable (in which case
      the handshake will fail) or a positive value if it is acceptable.
    </para>
    <para>
      The callback when used on the server side should return with either
      SSL_TLSEXT_ERR_OK (meaning that the OCSP response that has been set
      should be returned), SSL_TLSEXT_ERR_NOACK (meaning that an OCSP
      response should not be returned) or SSL_TLSEXT_ERR_ALERT_FATAL
      (meaning that a fatal error has occurred).
    </para>
    <para>
      SSL_CTX_set_tlsext_status_cb(), SSL_CTX_set_tlsext_status_arg(),
      SSL_CTX_set_tlsext_status_type(), SSL_set_tlsext_status_type() and
      SSL_set_tlsext_status_ocsp_resp() return 0 on error or 1 on success.
    </para>
    <para>
      SSL_get_tlsext_status_ocsp_resp() returns the length of the OCSP
      response data or -1 if there is no OCSP response data.
    </para>
  </refsection>
  <refsection xml:id="ID-562a005c167801f16c515ac89c0a2a83"><title>HISTORY</title>
    <para>
      SSL_CTX_set_tlsext_status_type() was added in OpenSSL 1.1.0.
    </para>
  </refsection>
</refentry>