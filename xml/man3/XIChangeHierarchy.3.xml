<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
<info>
    
</info>
<refmeta>
<refentrytitle>xichangehierarchy</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class="source"> </refmiscinfo>
<refmiscinfo class="manual"> </refmiscinfo>
</refmeta>
<refnamediv>
    <refname>XIChangeHierarchy</refname>
    <refpurpose>change the device hierarchy.</refpurpose>
</refnamediv>
<refsynopsisdiv xml:id="_synopsis">
<literallayout class="monospaced">#include &lt;X11/extensions/XInput2.h&gt;</literallayout>
<literallayout class="monospaced">Status XIChangeHierarchy( Display *display,
                          XIAnyHierarchyChangeInfo *changes,
                          int num_changes);</literallayout>
<literallayout class="monospaced">display
       Specifies the connection to the X server.</literallayout>
<literallayout class="monospaced">num_changes
       Specifies the number of elements in changes.</literallayout>
<literallayout class="monospaced">changes
       Specifies the changes to be made.</literallayout>
</refsynopsisdiv>
<refsect1 xml:id="_description">
<title>DESCRIPTION</title>
<literallayout class="monospaced">XIChangeHierarchy modifies the device hierarchy by creating or
removing master devices or changing the attachment of slave
devices. If num_changes is non-zero, changes is an array of
XIAnyHierarchyChangeInfo structures. If num_changes is equal or less than
zero, XIChangeHierarchy does nothing.</literallayout>
<literallayout class="monospaced">XIChangeHierarchy processes changes in order, effective
immediately. If an error occurs, processing is aborted and the
error is reported to the client. Changes already made remain
effective.</literallayout>
<literallayout class="monospaced">The list of changes is any combination of
XIAnyHierarchyChangeInfo. The type of a hierarchy change can be
XIAddMaster, XIRemoveMaster, XIAttachSlave or XIDetachSlave.</literallayout>
<literallayout class="monospaced">typedef union {
    int type;
    XIAddMasterInfo add;
    XIRemoveMasterInfo remove;
    XIAttachSlave attach;
    XIDetachSlave detach;
} XIAnyHierarchyChangeInfo;</literallayout>
<literallayout class="monospaced">typedef struct {
    int type; /* XIAddMaster */
    char* name;
    Bool send_core;
    Bool enable;
} XIAddMasterInfo;</literallayout>
<literallayout class="monospaced">typedef struct {
    int type; /* XIRemoveMaster */
    int deviceid;
    int return_mode;
    int return_pointer;
    int return_keyboard;
} XIRemoveMasterInfo;</literallayout>
<literallayout class="monospaced">typedef struct {
    int type; /* XIAttachSlave */
    int deviceid;
    int new_master;
} XIAttachSlaveInfo;</literallayout>
<literallayout class="monospaced">typedef struct {
    int type; /* XIDetachSlave */
    int deviceid;
} XIDetachSlaveInfo;</literallayout>
<literallayout class="monospaced">XIAddMasterInfo creates a new master pointer and a new
master keyboard labelled "name pointer" and "name keyboard"
respectively. If sendCore is True, the devices will send core
events. If enable is True, the device is enabled immediately.</literallayout>
<literallayout class="monospaced">XIAddMasterInfo can generate a BadValue error.</literallayout>
<literallayout class="monospaced">XIRemoveMasterInfo removes device and its paired master device.
If returnMode is XIAttachToMaster, all pointers attached to
device or its paired master device are attached to
returnPointer. Likewise, all keyboards are attached to
returnKeyboard. If returnMode is XIFloating, all attached
devices are set to floating.</literallayout>
<literallayout class="monospaced">XIRemoveMasterInfo can generate a BadValue and a BadDevice
error.</literallayout>
<literallayout class="monospaced">XIAttachSlaveInfo attaches device to newMaster. If the device
is currently attached to a master device, it is detached from
the master device and attached to the new master device.</literallayout>
<literallayout class="monospaced">XIAttachSlaveInfo can generate a BadDevice error.</literallayout>
<literallayout class="monospaced">XIDettachSlaveInfo deattaches device from the current master
device and sets it floating. If the device is already floating,
no changes are made.</literallayout>
<literallayout class="monospaced">XIDetachSlaveInfo can generate a BadDevice error.</literallayout>
<literallayout class="monospaced">XIChangeHierarchy generates an XIHierarchyEvent if any
modifications were successful.</literallayout>
</refsect1>
<refsect1 xml:id="_diagnostics">
<title>DIAGNOSTICS</title>
<literallayout class="monospaced">BadDevice
       An invalid device was specified. The device does not
       exist or is not a appropriate for the type of change.</literallayout>
<literallayout class="monospaced">BadValue
       Some numeric value falls out of the allowed range.</literallayout>
</refsect1>
</refentry>