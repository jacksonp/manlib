<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_read.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_read</refname>
<refpurpose>read bytes from a TLS/SSL connection.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>int SSL_read(SSL *ssl, void *buf, int num);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-fc63dbb8c21108a89bc1323f292addd7"><title>DESCRIPTION</title>
    <para>
      SSL_read() tries to read <emphasis role="bold">num</emphasis> bytes
      from the specified <emphasis role="bold">ssl</emphasis> into the
      buffer <emphasis role="bold">buf</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-dec15e7d692845ea287f36e7b36390f4"><title>NOTES</title>
    <para>
      If necessary, SSL_read() will negotiate a TLS/SSL session, if not
      already explicitly performed by <citerefentry>
      <refentrytitle>SSL_connect</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> or <citerefentry>
      <refentrytitle>SSL_accept</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>. If the peer requests a re-negotiation, it will be
      performed transparently during the SSL_read() operation. The
      behaviour of SSL_read() depends on the underlying BIO.
    </para>
    <para>
      For the transparent negotiation to succeed, the <emphasis role="bold">ssl</emphasis> must have been initialized to client or
      server mode. This is being done by calling <citerefentry>
      <refentrytitle>SSL_set_connect_state</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> or SSL_set_accept_state()
      before the first call to an SSL_read() or <citerefentry>
      <refentrytitle>SSL_write</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> function.
    </para>
    <para>
      SSL_read() works based on the SSL/TLS records. The data are received
      in records (with a maximum record size of 16kB for SSLv3/TLSv1). Only
      when a record has been completely received, it can be processed
      (decryption and check of integrity). Therefore data that was not
      retrieved at the last call of SSL_read() can still be buffered inside
      the SSL layer and will be retrieved on the next call to SSL_read().
      If <emphasis role="bold">num</emphasis> is higher than the number of
      bytes buffered, SSL_read() will return with the bytes buffered. If no
      more bytes are in the buffer, SSL_read() will trigger the processing
      of the next record. Only when the record has been received and
      processed completely, SSL_read() will return reporting success. At
      most the contents of the record will be returned. As the size of an
      SSL/TLS record may exceed the maximum packet size of the underlying
      transport (e.g. TCP), it may be necessary to read several packets
      from the transport layer before the record is complete and SSL_read()
      can succeed.
    </para>
    <para>
      If the underlying BIO is <emphasis role="bold">blocking</emphasis>,
      SSL_read() will only return, once the read operation has been
      finished or an error occurred, except when a renegotiation take
      place, in which case a SSL_ERROR_WANT_READ may occur. This behaviour
      can be controlled with the SSL_MODE_AUTO_RETRY flag of the
      <citerefentry> <refentrytitle>SSL_CTX_set_mode</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> call.
    </para>
    <para>
      If the underlying BIO is <emphasis role="bold">non-blocking</emphasis>, SSL_read() will also return when
      the underlying BIO could not satisfy the needs of SSL_read() to
      continue the operation. In this case a call to <citerefentry>
      <refentrytitle>SSL_get_error</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> with the return value of SSL_read() will yield
      <emphasis role="bold">SSL_ERROR_WANT_READ</emphasis> or <emphasis role="bold">SSL_ERROR_WANT_WRITE</emphasis>. As at any time a
      re-negotiation is possible, a call to SSL_read() can also cause write
      operations! The calling process then must repeat the call after
      taking appropriate action to satisfy the needs of SSL_read(). The
      action depends on the underlying BIO. When using a non-blocking
      socket, nothing is to be done, but select() can be used to check for
      the required condition. When using a buffering BIO, like a BIO pair,
      data must be written into or retrieved out of the BIO before being
      able to continue.
    </para>
    <para>
      <citerefentry> <refentrytitle>SSL_pending</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> can be used to find out
      whether there are buffered bytes available for immediate retrieval.
      In this case SSL_read() can be called without blocking or actually
      receiving new data from the underlying socket.
    </para>
  </refsection>
  <refsection xml:id="ID-b909031c0e2ef2310a2dece4757f8c7c"><title>WARNING</title>
    <para>
      When an SSL_read() operation has to be repeated because of <emphasis role="bold">SSL_ERROR_WANT_READ</emphasis> or <emphasis role="bold">SSL_ERROR_WANT_WRITE</emphasis>, it must be repeated with
      the same arguments.
    </para>
  </refsection>
  <refsection xml:id="ID-4afb2640cb86e238abed1c4de5e8c22f"><title>RETURN VALUES</title>
    <para>
      The following return values can occur:
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term>&gt;0</term>
          <listitem>
            <para>
	      The read operation was successful; the return value is the
	      number of bytes actually read from the TLS/SSL connection.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>0</term>
          <listitem>
            <para>
	      The read operation was not successful. The reason may either
	      be a clean shutdown due to a "close notify" alert sent by the
	      peer (in which case the SSL_RECEIVED_SHUTDOWN flag in the ssl
	      shutdown state is set (see <citerefentry>
	      <refentrytitle>SSL_shutdown</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
	      <refentrytitle>SSL_set_shutdown</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry>). It is also
	      possible, that the peer simply shut down the underlying
	      transport and the shutdown is incomplete. Call
	      SSL_get_error() with the return value <emphasis role="bold">ret</emphasis> to find out, whether an error
	      occurred or the connection was shut down cleanly
	      (SSL_ERROR_ZERO_RETURN).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&lt;0</term>
          <listitem>
            <para>
	      The read operation was not successful, because either an
	      error occurred or action must be taken by the calling
	      process. Call SSL_get_error() with the return value <emphasis role="bold">ret</emphasis> to find out the reason.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-a689109ee4218ad84b6465c62d75513f"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>SSL_get_error</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_write</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_set_mode</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_CTX_new</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_connect</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_accept</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry> <citerefentry>
      <refentrytitle>SSL_set_connect_state</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>SSL_pending</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_shutdown</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_set_shutdown</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ssl</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>bio</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-4b7b0fe5a9e80a359cbe46f88db7f3e0"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>