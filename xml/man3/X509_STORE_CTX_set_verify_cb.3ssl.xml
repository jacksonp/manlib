<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>X509_STORE_CTX_set_verify_cb.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>X509_STORE_CTX_get_verify_cb,
X509_STORE_CTX_set_verify_cb</refname>
<refpurpose>get and set verification callback</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/x509_vfy.h&gt;</synopsis>
<synopsis>typedef int (*X509_STORE_CTX_verify_cb)(int, X509_STORE_CTX *);</synopsis>
<synopsis>X509_STORE_CTX_verify_cb X509_STORE_CTX_get_verify_cb(X509_STORE_CTX *ctx);</synopsis>
<synopsis>void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx,
                                  X509_STORE_CTX_verify_cb verify_cb);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-4a417828ec593b9c47567245e94eb924"><title>DESCRIPTION</title>
    <para>
      X509_STORE_CTX_set_verify_cb() sets the verification callback of
      <emphasis role="bold">ctx</emphasis> to <emphasis role="bold">verify_cb</emphasis> overwriting any existing callback.
    </para>
    <para>
      The verification callback can be used to customise the operation of
      certificate verification, either by overriding error conditions or
      logging errors for debugging purposes.
    </para>
    <para>
      However a verification callback is <emphasis role="bold">not</emphasis> essential and the default operation is
      often sufficient.
    </para>
    <para>
      The <emphasis role="bold">ok</emphasis> parameter to the callback
      indicates the value the callback should return to retain the default
      behaviour. If it is zero then and error condition is indicated. If it
      is 1 then no error occurred. If the flag <emphasis role="bold">X509_V_FLAG_NOTIFY_POLICY</emphasis> is set then
      <emphasis role="bold">ok</emphasis> is set to 2 to indicate the
      policy checking is complete.
    </para>
    <para>
      The <emphasis role="bold">ctx</emphasis> parameter to the callback is
      the <emphasis role="bold">X509_STORE_CTX</emphasis> structure that is
      performing the verification operation. A callback can examine this
      structure and receive additional information about the error, for
      example by calling X509_STORE_CTX_get_current_cert(). Additional
      application data can be passed to the callback via the <emphasis role="bold">ex_data</emphasis> mechanism.
    </para>
    <para>
      X509_STORE_CTX_get_verify_cb() returns the value of the current
      callback for the specific <emphasis role="bold">ctx</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-87c94f400bd64c61ba7d6ac3743f3882"><title>WARNING</title>
    <para>
      In general a verification callback should <emphasis role="bold">NOT</emphasis> unconditionally return 1 in all
      circumstances because this will allow verification to succeed no
      matter what the error. This effectively removes all security from the
      application because <emphasis role="bold">any</emphasis> certificate
      (including untrusted generated ones) will be accepted.
    </para>
  </refsection>
  <refsection xml:id="ID-f685b60c75c72c9ef7f9bfc42e8492b6"><title>NOTES</title>
    <para>
      The verification callback can be set and inherited from the parent
      structure performing the operation. In some cases (such as S/MIME
      verification) the <emphasis role="bold">X509_STORE_CTX</emphasis>
      structure is created and destroyed internally and the only way to set
      a custom verification callback is by inheriting it from the
      associated <emphasis role="bold">X509_STORE</emphasis>.
    </para>
  </refsection>
  <refsection xml:id="ID-4c6cb6c7bc5363817e90093e3b312e66"><title>RETURN VALUES</title>
    <para>
      X509_STORE_CTX_set_verify_cb() does not return a value.
    </para>
  </refsection>
  <refsection xml:id="ID-0aaa253db499caef6ab0148446928c95"><title>EXAMPLES</title>
    <para>
      Default callback operation:
    </para>
    <screen>int verify_callback(int ok, X509_STORE_CTX *ctx)
       {
       return ok;
       }</screen>
    <para>
      Simple example, suppose a certificate in the chain is expired and we
      wish to continue after this error:
    </para>
    <screen>int verify_callback(int ok, X509_STORE_CTX *ctx)
       {
       /* Tolerate certificate expiration */
       if (X509_STORE_CTX_get_error(ctx) == X509_V_ERR_CERT_HAS_EXPIRED)
                       return 1;
       /* Otherwise don't override */
       return ok;
       }</screen>
    <para>
      More complex example, we don't wish to continue after <emphasis role="bold">any</emphasis> certificate has expired just one specific
      case:
    </para>
    <screen>int verify_callback(int ok, X509_STORE_CTX *ctx)
       {
       int err = X509_STORE_CTX_get_error(ctx);
       X509 *err_cert = X509_STORE_CTX_get_current_cert(ctx);
       if (err == X509_V_ERR_CERT_HAS_EXPIRED)
               {
               if (check_is_acceptable_expired_cert(err_cert)
                       return 1;
               }
       return ok;
       }</screen>
    <para>
      Full featured logging callback. In this case the <emphasis role="bold">bio_err</emphasis> is assumed to be a global logging
      <emphasis role="bold">BIO</emphasis>, an alternative would to store a
      BIO in <emphasis role="bold">ctx</emphasis> using <emphasis role="bold">ex_data</emphasis>.
    </para>
    <screen>int verify_callback(int ok, X509_STORE_CTX *ctx)
       {
       X509 *err_cert;
       int err, depth;

err_cert = X509_STORE_CTX_get_current_cert(ctx);
err =   X509_STORE_CTX_get_error(ctx);
depth = X509_STORE_CTX_get_error_depth(ctx);

BIO_printf(bio_err, "depth=%d ", depth);
if (err_cert)
        {
        X509_NAME_print_ex(bio_err, X509_get_subject_name(err_cert),
                                0, XN_FLAG_ONELINE);
        BIO_puts(bio_err, "\n");
        }
else
        BIO_puts(bio_err, "&lt;no cert&gt;\n");
if (!ok)
        BIO_printf(bio_err, "verify error:num=%d:%s\n", err,
                X509_verify_cert_error_string(err));
switch (err)
        {
case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:
        BIO_puts(bio_err, "issuer= ");
        X509_NAME_print_ex(bio_err, X509_get_issuer_name(err_cert),
                                0, XN_FLAG_ONELINE);
        BIO_puts(bio_err, "\n");
        break;
case X509_V_ERR_CERT_NOT_YET_VALID:
case X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD:
        BIO_printf(bio_err, "notBefore=");
        ASN1_TIME_print(bio_err, X509_get_notBefore(err_cert));
        BIO_printf(bio_err, "\n");
        break;
case X509_V_ERR_CERT_HAS_EXPIRED:
case X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD:
        BIO_printf(bio_err, "notAfter=");
        ASN1_TIME_print(bio_err, X509_get_notAfter(err_cert));
        BIO_printf(bio_err, "\n");
        break;
case X509_V_ERR_NO_EXPLICIT_POLICY:
        policies_print(bio_err, ctx);
        break;
        }
if (err == X509_V_OK &amp;&amp; ok == 2)
        /* print out policies */

BIO_printf(bio_err, "verify return:%d\n", ok);
return(ok);
}</screen>
  </refsection>
  <refsection xml:id="ID-3040bbc3b1ceafd4c182af9d48d06a97"><title>SEE ALSO</title>
    <para>
      <citerefentry>
      <refentrytitle>X509_STORE_CTX_get_error</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> <citerefentry>
      <refentrytitle>X509_STORE_set_verify_cb_func</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> <citerefentry>
      <refentrytitle>X509_STORE_CTX_get_ex_new_index</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-54c74f4ae3ae1f343bef5d4f3a0f0455"><title>COPYRIGHT</title>
    <para>
      Copyright 2009-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>