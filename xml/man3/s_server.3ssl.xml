<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>s_server.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>s_server</refname>
<refpurpose>SSL/TLS server program</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis><emphasis role="bold">openssl</emphasis> <emphasis role="bold">s_server</emphasis>
[<emphasis role="bold">-help</emphasis>]
[<emphasis role="bold">-accept port</emphasis>]
[<emphasis role="bold">-naccept count</emphasis>]
[<emphasis role="bold">-context id</emphasis>]
[<emphasis role="bold">-verify depth</emphasis>]
[<emphasis role="bold">-Verify depth</emphasis>]
[<emphasis role="bold">-crl_check</emphasis>]
[<emphasis role="bold">-crl_check_all</emphasis>]
[<emphasis role="bold">-cert filename</emphasis>]
[<emphasis role="bold">-certform DER|PEM</emphasis>]
[<emphasis role="bold">-key keyfile</emphasis>]
[<emphasis role="bold">-keyform DER|PEM</emphasis>]
[<emphasis role="bold">-pass arg</emphasis>]
[<emphasis role="bold">-dcert filename</emphasis>]
[<emphasis role="bold">-dcertform DER|PEM</emphasis>]
[<emphasis role="bold">-dkey keyfile</emphasis>]
[<emphasis role="bold">-dkeyform DER|PEM</emphasis>]
[<emphasis role="bold">-dpass arg</emphasis>]
[<emphasis role="bold">-dhparam filename</emphasis>]
[<emphasis role="bold">-nbio</emphasis>]
[<emphasis role="bold">-nbio_test</emphasis>]
[<emphasis role="bold">-crlf</emphasis>]
[<emphasis role="bold">-debug</emphasis>]
[<emphasis role="bold">-msg</emphasis>]
[<emphasis role="bold">-state</emphasis>]
[<emphasis role="bold">-CApath directory</emphasis>]
[<emphasis role="bold">-CAfile filename</emphasis>]
[<emphasis role="bold">-no-CAfile</emphasis>]
[<emphasis role="bold">-no-CApath</emphasis>]
[<emphasis role="bold">-attime timestamp</emphasis>]
[<emphasis role="bold">-check_ss_sig</emphasis>]
[<emphasis role="bold">-explicit_policy</emphasis>]
[<emphasis role="bold">-extended_crl</emphasis>]
[<emphasis role="bold">-ignore_critical</emphasis>]
[<emphasis role="bold">-inhibit_any</emphasis>]
[<emphasis role="bold">-inhibit_map</emphasis>]
[<emphasis role="bold">-partial_chain</emphasis>]
[<emphasis role="bold">-policy arg</emphasis>]
[<emphasis role="bold">-policy_check</emphasis>]
[<emphasis role="bold">-policy_print</emphasis>]
[<emphasis role="bold">-purpose purpose</emphasis>]
[<emphasis role="bold">-suiteB_128</emphasis>]
[<emphasis role="bold">-suiteB_128_only</emphasis>]
[<emphasis role="bold">-suiteB_192</emphasis>]
[<emphasis role="bold">-trusted_first</emphasis>]
[<emphasis role="bold">-no_alt_chains</emphasis>]
[<emphasis role="bold">-use_deltas</emphasis>]
[<emphasis role="bold">-verify_depth num</emphasis>]
[<emphasis role="bold">-verify_return_error</emphasis>]
[<emphasis role="bold">-verify_email email</emphasis>]
[<emphasis role="bold">-verify_hostname hostname</emphasis>]
[<emphasis role="bold">-verify_ip ip</emphasis>]
[<emphasis role="bold">-verify_name name</emphasis>]
[<emphasis role="bold">-x509_strict</emphasis>]
[<emphasis role="bold">-nocert</emphasis>]
[<emphasis role="bold">-cipher cipherlist</emphasis>]
[<emphasis role="bold">-serverpref</emphasis>]
[<emphasis role="bold">-quiet</emphasis>]
[<emphasis role="bold">-ssl3</emphasis>]
[<emphasis role="bold">-tls1</emphasis>]
[<emphasis role="bold">-dtls</emphasis>]
[<emphasis role="bold">-dtls1</emphasis>]
[<emphasis role="bold">-dtls1_2</emphasis>]
[<emphasis role="bold">-listen</emphasis>]
[<emphasis role="bold">-async</emphasis>]
[<emphasis role="bold">-split_send_frag</emphasis>]
[<emphasis role="bold">-max_pipelines</emphasis>]
[<emphasis role="bold">-read_buf</emphasis>]
[<emphasis role="bold">-no_ssl3</emphasis>]
[<emphasis role="bold">-no_tls1</emphasis>]
[<emphasis role="bold">-no_tls1_1</emphasis>]
[<emphasis role="bold">-no_tls1_2</emphasis>]
[<emphasis role="bold">-no_dhe</emphasis>]
[<emphasis role="bold">-bugs</emphasis>]
[<emphasis role="bold">-comp</emphasis>]
[<emphasis role="bold">-no_comp</emphasis>]
[<emphasis role="bold">-brief</emphasis>]
[<emphasis role="bold">-www</emphasis>]
[<emphasis role="bold">-WWW</emphasis>]
[<emphasis role="bold">-HTTP</emphasis>]
[<emphasis role="bold">-engine id</emphasis>]
[<emphasis role="bold">-tlsextdebug</emphasis>]
[<emphasis role="bold">-no_ticket</emphasis>]
[<emphasis role="bold">-id_prefix arg</emphasis>]
[<emphasis role="bold">-rand file(s)</emphasis>]
[<emphasis role="bold">-serverinfo file</emphasis>]
[<emphasis role="bold">-no_resumption_on_reneg</emphasis>]
[<emphasis role="bold">-status</emphasis>]
[<emphasis role="bold">-status_verbose</emphasis>]
[<emphasis role="bold">-status_timeout nsec</emphasis>]
[<emphasis role="bold">-status_url url</emphasis>]
[<emphasis role="bold">-nextprotoneg protocols</emphasis>]</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-08d9926cb4e7e2da691fd7a869cb86af"><title>DESCRIPTION</title>
    <para>
      The <emphasis role="bold">s_server</emphasis> command implements a
      generic SSL/TLS server which listens for connections on a given port
      using SSL/TLS.
    </para>
  </refsection>
  <refsection xml:id="ID-0a147eb4ebc7e0be5fae9d8d3cdfb88a"><title>OPTIONS</title>
    <para>
      In addition to the options below the <emphasis role="bold">s_server</emphasis> utility also supports the common and
      server only options documented in the SSL_CONF_cmd(3) manual page.
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">-help</emphasis></term>
          <listitem>
            <para>
	      Print out a usage message.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-accept port</emphasis></term>
          <listitem>
            <para>
	      The TCP port to listen on for connections. If not specified
	      4433 is used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-naccept count</emphasis></term>
          <listitem>
            <para>
	      The server will exit after receiving <emphasis role="bold">number</emphasis> connections, default unlimited.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-context id</emphasis></term>
          <listitem>
            <para>
	      Sets the SSL context id. It can be given any string value. If
	      this option is not present a default value will be used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-cert certname</emphasis></term>
          <listitem>
            <para>
	      The certificate to use, most servers cipher suites require
	      the use of a certificate and some require a certificate with
	      a certain public key type: for example the DSS cipher suites
	      require a certificate containing a DSS (DSA) key. If not
	      specified then the filename "server.pem" will be used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-certform format</emphasis></term>
          <listitem>
            <para>
	      The certificate format to use: DER or PEM. PEM is the
	      default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-key keyfile</emphasis></term>
          <listitem>
            <para>
	      The private key to use. If not specified then the certificate
	      file will be used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-keyform format</emphasis></term>
          <listitem>
            <para>
	      The private format to use: DER or PEM. PEM is the default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-pass arg</emphasis></term>
          <listitem>
            <para>
	      The private key password source. For more information about
	      the format of <emphasis role="bold">arg</emphasis> see the
	      <emphasis role="bold">PASS PHRASE ARGUMENTS</emphasis>
	      section in <citerefentry>
	      <refentrytitle>openssl</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-dcert filename</emphasis>, <emphasis role="bold">-dkey keyname</emphasis></term>
          <listitem>
            <para>
	      Specify an additional certificate and private key, these
	      behave in the same manner as the <emphasis role="bold">-cert</emphasis> and <emphasis role="bold">-key</emphasis> options except there is no
	      default if they are not specified (no additional certificate
	      and key is used). As noted above some cipher suites require a
	      certificate containing a key of a certain type. Some cipher
	      suites need a certificate carrying an RSA key and some a DSS
	      (DSA) key. By using RSA and DSS certificates and keys a
	      server can support clients which only support RSA or DSS
	      cipher suites by using an appropriate certificate.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-dcertform format</emphasis>, <emphasis role="bold">-dkeyform format</emphasis>, <emphasis role="bold">-dpass arg</emphasis></term>
          <listitem>
            <para>
	      Additional certificate and private key format and passphrase
	      respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nocert</emphasis></term>
          <listitem>
            <para>
	      If this option is set then no certificate is used. This
	      restricts the cipher suites available to the anonymous ones
	      (currently just anonymous DH).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-dhparam filename</emphasis></term>
          <listitem>
            <para>
	      The DH parameter file to use. The ephemeral DH cipher suites
	      generate keys using a set of DH parameters. If not specified
	      then an attempt is made to load the parameters from the
	      server certificate file. If this fails then a static set of
	      parameters hard coded into the <emphasis role="bold">s_server</emphasis> program will be used.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no_dhe</emphasis></term>
          <listitem>
            <para>
	      If this option is set then no DH parameters will be loaded
	      effectively disabling the ephemeral DH cipher suites.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-crl_check</emphasis>, <emphasis role="bold">-crl_check_all</emphasis></term>
          <listitem>
            <para>
	      Check the peer certificate has not been revoked by its CA.
	      The CRL(s) are appended to the certificate file. With the
	      <emphasis role="bold">-crl_check_all</emphasis> option all
	      CRLs of all CAs in the chain are checked.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-CApath directory</emphasis></term>
          <listitem>
            <para>
	      The directory to use for client certificate verification.
	      This directory must be in "hash format", see <emphasis role="bold">verify</emphasis> for more information. These are
	      also used when building the server certificate chain.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-CAfile file</emphasis></term>
          <listitem>
            <para>
	      A file containing trusted certificates to use during client
	      authentication and to use when attempting to build the server
	      certificate chain. The list is also used in the list of
	      acceptable client CAs passed to the client when a certificate
	      is requested.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no-CAfile</emphasis></term>
          <listitem>
            <para>
	      Do not load the trusted CA certificates from the default file
	      location
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no-CApath</emphasis></term>
          <listitem>
            <para>
	      Do not load the trusted CA certificates from the default
	      directory location
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify depth</emphasis>, <emphasis role="bold">-Verify depth</emphasis></term>
          <listitem>
            <para>
	      The verify depth to use. This specifies the maximum length of
	      the client certificate chain and makes the server request a
	      certificate from the client. With the <emphasis role="bold">-verify</emphasis> option a certificate is
	      requested but the client does not have to send one, with the
	      <emphasis role="bold">-Verify</emphasis> option the client
	      must supply a certificate or an error occurs.
            </para>
            <para>
	      If the ciphersuite cannot request a client certificate (for
	      example an anonymous ciphersuite or PSK) this option has no
	      effect.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-attime</emphasis>, <emphasis role="bold">-check_ss_sig</emphasis>, <emphasis role="bold">-crl_check</emphasis>, <emphasis role="bold">-crl_check_all</emphasis>,
<emphasis role="bold">-explicit_policy</emphasis>, <emphasis role="bold">-extended_crl</emphasis>, <emphasis role="bold">-ignore_critical</emphasis>, <emphasis role="bold">-inhibit_any</emphasis>,
<emphasis role="bold">-inhibit_map</emphasis>, <emphasis role="bold">-no_alt_chains</emphasis>, <emphasis role="bold">-partial_chain</emphasis>, <emphasis role="bold">-policy</emphasis>,
<emphasis role="bold">-policy_check</emphasis>, <emphasis role="bold">-policy_print</emphasis>, <emphasis role="bold">-purpose</emphasis>, <emphasis role="bold">-suiteB_128</emphasis>,
<emphasis role="bold">-suiteB_128_only</emphasis>, <emphasis role="bold">-suiteB_192</emphasis>, <emphasis role="bold">-trusted_first</emphasis>, <emphasis role="bold">-use_deltas</emphasis>,
<emphasis role="bold">-verify_depth</emphasis>, <emphasis role="bold">-verify_email</emphasis>, <emphasis role="bold">-verify_hostname</emphasis>, <emphasis role="bold">-verify_ip</emphasis>,
<emphasis role="bold">-verify_name</emphasis>, <emphasis role="bold">-x509_strict</emphasis></term>
          <listitem>
            <para>
	      Set different peer certificate verification options. See the
	      <citerefentry> <refentrytitle>verify</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry> manual page for
	      details.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-verify_return_error</emphasis></term>
          <listitem>
            <para>
	      Verification errors normally just print a message but allow
	      the connection to continue, for debugging purposes. If this
	      option is used, then verification errors close the
	      connection.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-state</emphasis></term>
          <listitem>
            <para>
	      Prints the SSL session states.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-debug</emphasis></term>
          <listitem>
            <para>
	      Print extensive debugging information including a hex dump of
	      all traffic.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-msg</emphasis></term>
          <listitem>
            <para>
	      Show all protocol messages with hex dump.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-trace</emphasis></term>
          <listitem>
            <para>
	      Show verbose trace output of protocol messages. OpenSSL needs
	      to be compiled with <emphasis role="bold">enable-ssl-trace</emphasis> for this option to
	      work.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-msgfile</emphasis></term>
          <listitem>
            <para>
	      File to send output of <emphasis role="bold">-msg</emphasis>
	      or <emphasis role="bold">-trace</emphasis> to, default
	      standard output.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nbio_test</emphasis></term>
          <listitem>
            <para>
	      Tests non blocking I/O
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nbio</emphasis></term>
          <listitem>
            <para>
	      Turns on non blocking I/O
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-crlf</emphasis></term>
          <listitem>
            <para>
	      This option translated a line feed from the terminal into
	      CR+LF.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-quiet</emphasis></term>
          <listitem>
            <para>
	      Inhibit printing of session and certificate information.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-psk_hint hint</emphasis></term>
          <listitem>
            <para>
	      Use the PSK identity hint <emphasis role="bold">hint</emphasis> when using a PSK cipher suite.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-psk key</emphasis></term>
          <listitem>
            <para>
	      Use the PSK key <emphasis role="bold">key</emphasis> when
	      using a PSK cipher suite. The key is given as a hexadecimal
	      number without leading 0x, for example -psk 1a2b3c4d.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-ssl2</emphasis>, <emphasis role="bold">-ssl3</emphasis>, <emphasis role="bold">-tls1</emphasis>, <emphasis role="bold">-tls1_1</emphasis>, <emphasis role="bold">-tls1_2</emphasis>, <emphasis role="bold">-no_ssl2</emphasis>, <emphasis role="bold">-no_ssl3</emphasis>, <emphasis role="bold">-no_tls1</emphasis>, <emphasis role="bold">-no_tls1_1</emphasis>, <emphasis role="bold">-no_tls1_2</emphasis></term>
          <listitem>
            <para>
	      These options require or disable the use of the specified SSL
	      or TLS protocols. By default <emphasis role="bold">s_server</emphasis> will negotiate the highest
	      mutually supported protocol version. When a specific TLS
	      version is required, only that version will be accepted from
	      the client.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-dtls</emphasis>, <emphasis role="bold">-dtls1</emphasis>, <emphasis role="bold">-dtls1_2</emphasis></term>
          <listitem>
            <para>
	      These options make <emphasis role="bold">s_server</emphasis>
	      use DTLS protocols instead of TLS. With <emphasis role="bold">-dtls</emphasis>, <emphasis role="bold">s_server</emphasis> will negotiate any supported
	      DTLS protcol version, whilst <emphasis role="bold">-dtls1</emphasis> and <emphasis role="bold">-dtls1_2</emphasis> will only support DTLSv1.0
	      and DTLSv1.2 respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-listen</emphasis></term>
          <listitem>
            <para>
	      This option can only be used in conjunction with one of the
	      DTLS options above. With this option <emphasis role="bold">s_server</emphasis> will listen on a UDP port for
	      incoming connections. Any ClientHellos that arrive will be
	      checked to see if they have a cookie in them or not. Any
	      without a cookie will be responded to with a
	      HelloVerifyRequest. If a ClientHello with a cookie is
	      received then <emphasis role="bold">s_server</emphasis> will
	      connect to that peer and complete the handshake.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-async</emphasis></term>
          <listitem>
            <para>
	      Switch on asynchronous mode. Cryptographic operations will be
	      performed asynchronously. This will only have an effect if an
	      asynchronous capable engine is also used via the <emphasis role="bold">-engine</emphasis> option. For test purposes the
	      dummy async engine (dasync) can be used (if available).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-split_send_frag int</emphasis></term>
          <listitem>
            <para>
	      The size used to split data for encrypt pipelines. If more
	      data is written in one go than this value then it will be
	      split into multiple pipelines, up to the maximum number of
	      pipelines defined by max_pipelines. This only has an effect
	      if a suitable ciphersuite has been negotiated, an engine that
	      supports pipelining has been loaded, and max_pipelines is
	      greater than 1. See <citerefentry>
	      <refentrytitle>SSL_CTX_set_split_send_fragment</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> for further
	      information.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-max_pipelines int</emphasis></term>
          <listitem>
            <para>
	      The maximum number of encrypt/decrypt pipelines to be used.
	      This will only have an effect if an engine has been loaded
	      that supports pipelining (e.g. the dasync engine) and a
	      suiteable ciphersuite has been negotiated. The default value
	      is 1. See <citerefentry>
	      <refentrytitle>SSL_CTX_set_max_pipelines</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> for further
	      information.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-read_buf int</emphasis></term>
          <listitem>
            <para>
	      The default read buffer size to be used for connections. This
	      will only have an effect if the buffer size is larger than
	      the size that would otherwise be used and pipelining is in
	      use (see <citerefentry>
	      <refentrytitle>SSL_CTX_set_default_read_buffer_len</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry> for further
	      information).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-bugs</emphasis></term>
          <listitem>
            <para>
	      There are several known bug in SSL and TLS implementations.
	      Adding this option enables various workarounds.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-comp</emphasis></term>
          <listitem>
            <para>
	      Enable negotiation of TLS compression. This option was
	      introduced in OpenSSL 1.1.0. TLS compression is not
	      recommended and is off by default as of OpenSSL 1.1.0.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no_comp</emphasis></term>
          <listitem>
            <para>
	      Disable negotiation of TLS compression. TLS compression is
	      not recommended and is off by default as of OpenSSL 1.1.0.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-brief</emphasis></term>
          <listitem>
            <para>
	      Provide a brief summary of connection parameters instead of
	      the normal verbose output.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-cipher cipherlist</emphasis></term>
          <listitem>
            <para>
	      This allows the cipher list used by the server to be
	      modified.  When the client sends a list of supported ciphers
	      the first client cipher also included in the server list is
	      used. Because the client specifies the preference order, the
	      order of the server cipherlist irrelevant. See the <emphasis role="bold">ciphers</emphasis> command for more information.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-serverpref</emphasis></term>
          <listitem>
            <para>
	      Use the server's cipher preferences, rather than the client's
	      preferences.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-tlsextdebug</emphasis></term>
          <listitem>
            <para>
	      Print a hex dump of any TLS extensions received from the
	      server.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no_ticket</emphasis></term>
          <listitem>
            <para>
	      Disable RFC4507bis session ticket support.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-www</emphasis></term>
          <listitem>
            <para>
	      Sends a status message back to the client when it connects.
	      This includes information about the ciphers used and various
	      session parameters. The output is in HTML format so this
	      option will normally be used with a web browser.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-WWW</emphasis></term>
          <listitem>
            <para>
	      Emulates a simple web server. Pages will be resolved relative
	      to the current directory, for example if the URL
	      https://myhost/page.html is requested the file ./page.html
	      will be loaded.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-HTTP</emphasis></term>
          <listitem>
            <para>
	      Emulates a simple web server. Pages will be resolved relative
	      to the current directory, for example if the URL
	      https://myhost/page.html is requested the file ./page.html
	      will be loaded. The files loaded are assumed to contain a
	      complete and correct HTTP response (lines that are part of
	      the HTTP response line and headers must end with CRLF).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-rev</emphasis></term>
          <listitem>
            <para>
	      Simple test server which just reverses the text received from
	      the client and sends it back to the server. Also sets
	      <emphasis role="bold">-brief</emphasis>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-engine id</emphasis></term>
          <listitem>
            <para>
	      Specifying an engine (by its unique <emphasis role="bold">id</emphasis> string) will cause <emphasis role="bold">s_server</emphasis> to attempt to obtain a
	      functional reference to the specified engine, thus
	      initialising it if needed. The engine will then be set as the
	      default for all available algorithms.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-id_prefix arg</emphasis></term>
          <listitem>
            <para>
	      Generate SSL/TLS session IDs prefixed by <emphasis role="bold">arg</emphasis>. This is mostly useful for testing
	      any SSL/TLS code (eg. proxies) that wish to deal with
	      multiple servers, when each of which might be generating a
	      unique range of session IDs (eg. with a certain prefix).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-rand file(s)</emphasis></term>
          <listitem>
            <para>
	      A file or files containing random data used to seed the
	      random number generator, or an EGD socket (see <citerefentry>
	      <refentrytitle>RAND_egd</refentrytitle>
	      <manvolnum>3</manvolnum> </citerefentry>). Multiple files can
	      be specified separated by a OS-dependent character. The
	      separator is <emphasis role="bold">;</emphasis> for
	      MS-Windows, <emphasis role="bold">,</emphasis> for OpenVMS,
	      and <emphasis role="bold">:</emphasis> for all others.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-serverinfo file</emphasis></term>
          <listitem>
            <para>
	      A file containing one or more blocks of PEM data.  Each PEM
	      block must encode a TLS ServerHello extension (2 bytes type,
	      2 bytes length, followed by "length" bytes of extension
	      data).  If the client sends an empty TLS ClientHello
	      extension matching the type, the corresponding ServerHello
	      extension will be returned.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-no_resumption_on_reneg</emphasis></term>
          <listitem>
            <para>
	      Set the <emphasis role="bold">SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION</emphasis>
	      option.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-status</emphasis></term>
          <listitem>
            <para>
	      Enables certificate status request support (aka OCSP
	      stapling).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-status_verbose</emphasis></term>
          <listitem>
            <para>
	      Enables certificate status request support (aka OCSP
	      stapling) and gives a verbose printout of the OCSP response.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-status_timeout nsec</emphasis></term>
          <listitem>
            <para>
	      Sets the timeout for OCSP response to <emphasis role="bold">nsec</emphasis> seconds.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-status_url url</emphasis></term>
          <listitem>
            <para>
	      Sets a fallback responder URL to use if no responder URL is
	      present in the server certificate. Without this option an
	      error is returned if the server certificate does not contain
	      a responder address.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">-nextprotoneg protocols</emphasis></term>
          <listitem>
            <para>
	      Enable Next Protocol Negotiation TLS extension and provide a
	      comma-separated list of supported protocol names. The list
	      should contain most wanted protocols first. Protocol names
	      are printable ASCII strings, for example "http/1.1" or
	      "spdy/3".
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-88dd8ba1577d7ce2ec28b9dc21025c4a"><title>CONNECTED COMMANDS</title>
    <para>
      If a connection request is established with an SSL client and neither
      the <emphasis role="bold">-www</emphasis> nor the <emphasis role="bold">-WWW</emphasis> option has been used then normally any
      data received from the client is displayed and any key presses will
      be sent to the client.
    </para>
    <para>
      Certain single letter commands are also recognized which perform
      special operations: these are listed below.
    </para>
    <para>
      <variablelist>
        <varlistentry>
          <term><emphasis role="bold">q</emphasis></term>
          <listitem>
            <para>
	      end the current SSL connection but still accept new
	      connections.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">Q</emphasis></term>
          <listitem>
            <para>
	      end the current SSL connection and exit.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">r</emphasis></term>
          <listitem>
            <para>
	      renegotiate the SSL session.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">R</emphasis></term>
          <listitem>
            <para>
	      renegotiate the SSL session and request a client certificate.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">P</emphasis></term>
          <listitem>
            <para>
	      send some plain text down the underlying TCP connection: this
	      should cause the client to disconnect due to a protocol
	      violation.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">S</emphasis></term>
          <listitem>
            <para>
	      print out some session cache status information.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsection>
  <refsection xml:id="ID-b3cd85df62dd43ac8ea4c66e98509ca3"><title>NOTES</title>
    <para>
      <emphasis role="bold">s_server</emphasis> can be used to debug SSL
      clients. To accept connections from a web browser the command:
    </para>
    <screen>openssl s_server -accept 443 -www</screen>
    <para>
      can be used for example.
    </para>
    <para>
      Most web browsers (in particular Netscape and MSIE) only support RSA
      cipher suites, so they cannot connect to servers which don't use a
      certificate carrying an RSA key or a version of OpenSSL with RSA
      disabled.
    </para>
    <para>
      Although specifying an empty list of CAs when requesting a client
      certificate is strictly speaking a protocol violation, some SSL
      clients interpret this to mean any CA is acceptable. This is useful
      for debugging purposes.
    </para>
    <para>
      The session parameters can printed out using the <emphasis role="bold">sess_id</emphasis> program.
    </para>
  </refsection>
  <refsection xml:id="ID-70f920ab3980d7d4f275d95505413326"><title>BUGS</title>
    <para>
      Because this program has a lot of options and also because some of
      the techniques used are rather old, the C source of <emphasis role="bold">s_server</emphasis> is rather hard to read and not a
      model of how things should be done. A typical SSL server program
      would be much simpler.
    </para>
    <para>
      The output of common ciphers is wrong: it just gives the list of
      ciphers that OpenSSL recognizes and the client supports.
    </para>
    <para>
      There should be a way for the <emphasis role="bold">s_server</emphasis> program to print out details of any
      unknown cipher suites a client says it supports.
    </para>
  </refsection>
  <refsection xml:id="ID-92ffe3b320e5586ece8072c3dc2299e3"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>sess_id</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>s_client</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>ciphers</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-bc40ce22158acfa368d0cc8af067e510"><title>HISTORY</title>
    <para>
      The -no_alt_chains options was first added to OpenSSL 1.1.0.
    </para>
  </refsection>
</refentry>