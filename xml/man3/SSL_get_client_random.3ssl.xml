<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>SSL_get_client_random.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>SSL_get_client_random, SSL_get_server_random, SSL_SESSION_get_master_key</refname>
<refpurpose>retrieve internal TLS/SSL random values and master key</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/ssl.h&gt;</synopsis>
<synopsis>size_t SSL_get_client_random(const SSL *ssl, unsigned char *out, size_t outlen);
size_t SSL_get_server_random(const SSL *ssl, unsigned char *out, size_t outlen);
size_t SSL_SESSION_get_master_key(const SSL_SESSION *session, unsigned char *out, size_t outlen);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-f31232d30aea8694f7e387ea13a5a636"><title>DESCRIPTION</title>
    <para>
      SSL_get_client_random() extracts the random value sent from the
      client to the server during the initial SSL/TLS handshake.  It copies
      as many bytes as it can of this value into the buffer provided in
      <emphasis role="bold">out</emphasis>, which must have at least
      <emphasis role="bold">outlen</emphasis> bytes available. It returns
      the total number of bytes that were actually copied.  If <emphasis role="bold">outlen</emphasis> is zero, SSL_get_client_random() copies
      nothing, and returns the total size of the client_random value.
    </para>
    <para>
      SSL_get_server_random() behaves the same, but extracts the random
      value sent from the server to the client during the initial SSL/TLS
      handshake.
    </para>
    <para>
      SSL_SESSION_get_master_key() behaves the same, but extracts the
      master secret used to guarantee the security of the SSL/TLS session. 
      This one can be dangerous if misused; see NOTES below.
    </para>
    <screen></screen>
  </refsection>
  <refsection xml:id="ID-7db7b2514faf190943e6b29818e6e36e"><title>NOTES</title>
    <para>
      You probably shouldn't use these functions.
    </para>
    <para>
      These functions expose internal values from the TLS handshake, for
      use in low-level protocols.  You probably should not use them, unless
      you are implementing something that needs access to the internal
      protocol details.
    </para>
    <para>
      Despite the names of SSL_get_client_random() and
      SSL_get_server_random(), they ARE NOT random number generators. 
      Instead, they return the mostly-random values that were already
      generated and used in the TLS protocol.  Using them in place of
      RAND_bytes() would be grossly foolish.
    </para>
    <para>
      The security of your TLS session depends on keeping the master key
      secret: do not expose it, or any information about it, to anybody. If
      you need to calculate another secret value that depends on the master
      secret, you should probably use SSL_export_keying_material() instead,
      and forget that you ever saw these functions.
    </para>
    <para>
      In current versions of the TLS protocols, the length of client_random
      (and also server_random) is always SSL3_RANDOM_SIZE bytes. Support
      for other outlen arguments to the SSL_get_*_random() functions is
      provided in case of the unlikely event that a future version or
      variant of TLS uses some other length there.
    </para>
    <para>
      Finally, though the "client_random" and "server_random" values are
      called "random", many TLS implementations will generate four bytes of
      those values based on their view of the current time.
    </para>
    <screen></screen>
  </refsection>
  <refsection xml:id="ID-b0c834007866659e005fb5c398270cd2"><title>RETURN VALUES</title>
    <para>
      If <emphasis role="bold">outlen</emphasis> is greater than 0, these
      functions return the number of bytes actually copied, which will be
      less than or equal to <emphasis role="bold">outlen</emphasis>.
    </para>
    <para>
      If <emphasis role="bold">outlen</emphasis> is 0, these functions
      return the maximum number of bytes they would copy--that is, the
      length of the underlying field.
    </para>
  </refsection>
  <refsection xml:id="ID-4f0dc158dc308865f08f63a372e81822"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>ssl</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>RAND_bytes</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>, <citerefentry>
      <refentrytitle>SSL_export_keying_material</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
    <screen></screen>
  </refsection>
  <refsection xml:id="ID-49832f7fbff9f2271ab733dc322dfe15"><title>COPYRIGHT</title>
    <para>
      Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>