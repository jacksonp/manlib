<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>BIO_f_ssl.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>BIO_do_handshake,
BIO_f_ssl, BIO_set_ssl, BIO_get_ssl, BIO_set_ssl_mode,
BIO_set_ssl_renegotiate_bytes,
BIO_get_num_renegotiates, BIO_set_ssl_renegotiate_timeout, BIO_new_ssl,
BIO_new_ssl_connect, BIO_new_buffer_ssl_connect, BIO_ssl_copy_session_id,
BIO_ssl_shutdown</refname>
<refpurpose>SSL BIO</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis/>
  </refsynopsisdiv>
  <screen>#include &amp;lt;openssl/bio.h&amp;gt;
#include &amp;lt;openssl/ssl.h&amp;gt;

const BIO_METHOD *BIO_f_ssl(void);

long BIO_set_ssl(BIO *b, SSL *ssl, long c);
long BIO_get_ssl(BIO *b, SSL **sslp);
long BIO_set_ssl_mode(BIO *b, long client);
long BIO_set_ssl_renegotiate_bytes(BIO *b, long num);
long BIO_set_ssl_renegotiate_timeout(BIO *b, long seconds);
long BIO_get_num_renegotiates(BIO *b);

BIO *BIO_new_ssl(SSL_CTX *ctx, int client);
BIO *BIO_new_ssl_connect(SSL_CTX *ctx);
BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx);
int BIO_ssl_copy_session_id(BIO *to, BIO *from);
void BIO_ssl_shutdown(BIO *bio);

long BIO_do_handshake(BIO *b);</screen>
  <refsection xml:id="ID-1e7284fb80fb261d168e1b072b32a34e"><title>DESCRIPTION</title>
    <para>
      BIO_f_ssl() returns the SSL BIO method. This is a filter BIO which is
      a wrapper round the OpenSSL SSL routines adding a BIO "flavour" to
      SSL I/O.
    </para>
    <para>
      I/O performed on an SSL BIO communicates using the SSL protocol with
      the SSLs read and write BIOs. If an SSL connection is not established
      then an attempt is made to establish one on the first I/O call.
    </para>
    <para>
      If a BIO is appended to an SSL BIO using BIO_push() it is
      automatically used as the SSL BIOs read and write BIOs.
    </para>
    <para>
      Calling BIO_reset() on an SSL BIO closes down any current SSL
      connection by calling SSL_shutdown(). BIO_reset() is then sent to the
      next BIO in the chain: this will typically disconnect the underlying
      transport. The SSL BIO is then reset to the initial accept or connect
      state.
    </para>
    <para>
      If the close flag is set when an SSL BIO is freed then the internal
      SSL structure is also freed using SSL_free().
    </para>
    <para>
      BIO_set_ssl() sets the internal SSL pointer of BIO <emphasis role="bold">b</emphasis> to <emphasis role="bold">ssl</emphasis>
      using the close flag <emphasis role="bold">c</emphasis>.
    </para>
    <para>
      BIO_get_ssl() retrieves the SSL pointer of BIO <emphasis role="bold">b</emphasis>, it can then be manipulated using the
      standard SSL library functions.
    </para>
    <para>
      BIO_set_ssl_mode() sets the SSL BIO mode to <emphasis role="bold">client</emphasis>. If <emphasis role="bold">client</emphasis> is 1 client mode is set. If <emphasis role="bold">client</emphasis> is 0 server mode is set.
    </para>
    <para>
      BIO_set_ssl_renegotiate_bytes() sets the renegotiate byte count to
      <emphasis role="bold">num</emphasis>. When set after every <emphasis role="bold">num</emphasis> bytes of I/O (read and write) the SSL
      session is automatically renegotiated. <emphasis role="bold">num</emphasis> must be at least 512 bytes.
    </para>
    <para>
      BIO_set_ssl_renegotiate_timeout() sets the renegotiate timeout to
      <emphasis role="bold">seconds</emphasis>. When the renegotiate
      timeout elapses the session is automatically renegotiated.
    </para>
    <para>
      BIO_get_num_renegotiates() returns the total number of session
      renegotiations due to I/O or timeout.
    </para>
    <para>
      BIO_new_ssl() allocates an SSL BIO using SSL_CTX <emphasis role="bold">ctx</emphasis> and using client mode if <emphasis role="bold">client</emphasis> is non zero.
    </para>
    <para>
      BIO_new_ssl_connect() creates a new BIO chain consisting of an SSL
      BIO (using <emphasis role="bold">ctx</emphasis>) followed by a
      connect BIO.
    </para>
    <para>
      BIO_new_buffer_ssl_connect() creates a new BIO chain consisting of a
      buffering BIO, an SSL BIO (using <emphasis role="bold">ctx</emphasis>) and a connect BIO.
    </para>
    <para>
      BIO_ssl_copy_session_id() copies an SSL session id between BIO chains
      <emphasis role="bold">from</emphasis> and <emphasis role="bold">to</emphasis>. It does this by locating the SSL BIOs in
      each chain and calling SSL_copy_session_id() on the internal SSL
      pointer.
    </para>
    <para>
      BIO_ssl_shutdown() closes down an SSL connection on BIO chain
      <emphasis role="bold">bio</emphasis>. It does this by locating the
      SSL BIO in the chain and calling SSL_shutdown() on its internal SSL
      pointer.
    </para>
    <para>
      BIO_do_handshake() attempts to complete an SSL handshake on the
      supplied BIO and establish the SSL connection. It returns 1 if the
      connection was established successfully. A zero or negative value is
      returned if the connection could not be established, the call
      BIO_should_retry() should be used for non blocking connect BIOs to
      determine if the call should be retried. If an SSL connection has
      already been established this call has no effect.
    </para>
  </refsection>
  <refsection xml:id="ID-8c735afa1efae3e7038d899212597670"><title>NOTES</title>
    <para>
      SSL BIOs are exceptional in that if the underlying transport is non
      blocking they can still request a retry in exceptional circumstances.
      Specifically this will happen if a session renegotiation takes place
      during a BIO_read_ex() operation, one case where this happens is when
      step up occurs.
    </para>
    <para>
      The SSL flag SSL_AUTO_RETRY can be set to disable this behaviour.
      That is when this flag is set an SSL BIO using a blocking transport
      will never request a retry.
    </para>
    <para>
      Since unknown BIO_ctrl() operations are sent through filter BIOs the
      servers name and port can be set using BIO_set_host() on the BIO
      returned by BIO_new_ssl_connect() without having to locate the
      connect BIO first.
    </para>
    <para>
      Applications do not have to call BIO_do_handshake() but may wish to
      do so to separate the handshake process from other I/O processing.
    </para>
    <para>
      BIO_set_ssl(), BIO_get_ssl(), BIO_set_ssl_mode(),
      BIO_set_ssl_renegotiate_bytes(), BIO_set_ssl_renegotiate_timeout(),
      BIO_get_num_renegotiates(), and BIO_do_handshake() are implemented as
      macros.
    </para>
  </refsection>
  <refsection xml:id="ID-b9c41e6f4a19cef26a242b8550e20a8e"><title>EXAMPLE</title>
    <para>
      This SSL/TLS client example, attempts to retrieve a page from an
      SSL/TLS web server. The I/O routines are identical to those of the
      unencrypted example in <citerefentry>
      <refentrytitle>BIO_s_connect</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
    <screen>BIO *sbio, *out;
int len;
char tmpbuf[1024];
SSL_CTX *ctx;
SSL *ssl;

/* XXX Seed the PRNG if needed. */

ctx = SSL_CTX_new(TLS_client_method());

/* XXX Set verify paths and mode here. */

sbio = BIO_new_ssl_connect(ctx);
BIO_get_ssl(sbio, &amp;ssl);
if (ssl == NULL) {
    fprintf(stderr, "Can't locate SSL pointer\n");
    ERR_print_errors_fp(stderr);
    exit(1);
}

/* Don't want any retries */
SSL_set_mode(ssl, SSL_MODE_AUTO_RETRY);

/* XXX We might want to do other things with ssl here */

/* An empty host part means the loopback address */
BIO_set_conn_hostname(sbio, ":https");

out = BIO_new_fp(stdout, BIO_NOCLOSE);
if (BIO_do_connect(sbio) &lt;= 0) {
    fprintf(stderr, "Error connecting to server\n");
    ERR_print_errors_fp(stderr);
    exit(1);
}
if (BIO_do_handshake(sbio) &lt;= 0) {
       fprintf(stderr, "Error establishing SSL connection\n");
       ERR_print_errors_fp(stderr);
       exit(1);
}

/* XXX Could examine ssl here to get connection info */

BIO_puts(sbio, "GET / HTTP/1.0\n\n");
for ( ; ; ) {
    len = BIO_read(sbio, tmpbuf, 1024);
    if (len &lt;= 0)
        break;
    BIO_write(out, tmpbuf, len);
}
BIO_free_all(sbio);
BIO_free(out);</screen>
    <para>
      Here is a simple server example. It makes use of a buffering BIO to
      allow lines to be read from the SSL BIO using BIO_gets. It creates a
      pseudo web page containing the actual request from a client and also
      echoes the request to standard output.
    </para>
    <screen>BIO *sbio, *bbio, *acpt, *out;
int len;
char tmpbuf[1024];
SSL_CTX *ctx;
SSL *ssl;

/* XXX Seed the PRNG if needed. */

ctx = SSL_CTX_new(TLS_server_method());
if (!SSL_CTX_use_certificate_file(ctx, "server.pem", SSL_FILETYPE_PEM)
        || !SSL_CTX_use_PrivateKey_file(ctx, "server.pem", SSL_FILETYPE_PEM)
        || !SSL_CTX_check_private_key(ctx)) {
    fprintf(stderr, "Error setting up SSL_CTX\n");
    ERR_print_errors_fp(stderr);
    exit(1);
}

/* XXX Other things like set verify locations, EDH temp callbacks. */

/* New SSL BIO setup as server */
sbio = BIO_new_ssl(ctx, 0);
BIO_get_ssl(sbio, &amp;ssl);
if (ssl == NULL) {
    fprintf(stderr, "Can't locate SSL pointer\n");
    ERR_print_errors_fp(stderr);
    exit(1);
}

SSL_set_mode(ssl, SSL_MODE_AUTO_RETRY);
bbio = BIO_new(BIO_f_buffer());
sbio = BIO_push(bbio, sbio);
acpt = BIO_new_accept("4433");

/*
 * By doing this when a new connection is established
 * we automatically have sbio inserted into it. The
 * BIO chain is now 'swallowed' by the accept BIO and
 * will be freed when the accept BIO is freed.
 */
BIO_set_accept_bios(acpt, sbio);
out = BIO_new_fp(stdout, BIO_NOCLOSE);

/* Setup accept BIO */
if (BIO_do_accept(acpt) &lt;= 0) {
    fprintf(stderr, "Error setting up accept BIO\n");
    ERR_print_errors_fp(stderr);
    exit(1);
}

if (BIO_do_accept(acpt) &lt;= 0) {
    fprintf(stderr, "Error in connection\n");
    ERR_print_errors_fp(stderr);
    exit(1);
}

/* We only want one connection so remove and free accept BIO */
sbio = BIO_pop(acpt);
BIO_free_all(acpt);

if (BIO_do_handshake(sbio) &lt;= 0) {
    fprintf(stderr, "Error in SSL handshake\n");
    ERR_print_errors_fp(stderr);
    exit(1);
}

BIO_puts(sbio, "HTTP/1.0 200 OK\r\nContent-type: text/plain\r\n\r\n");
BIO_puts(sbio, "\r\nConnection Established\r\nRequest headers:\r\n");
BIO_puts(sbio, "--------------------------------------------------\r\n");

for ( ; ; ) {
    len = BIO_gets(sbio, tmpbuf, 1024);
    if (len &lt;= 0)
        break;
    BIO_write(sbio, tmpbuf, len);
    BIO_write(out, tmpbuf, len);
    /* Look for blank line signifying end of headers*/
    if (tmpbuf[0] == '\r' || tmpbuf[0] == '\n')
        break;
}

BIO_puts(sbio, "--------------------------------------------------\r\n");
BIO_puts(sbio, "\r\n");
BIO_flush(sbio);
BIO_free_all(sbio);</screen>
  </refsection>
  <refsection xml:id="ID-c425dcf171be7b90f8622a8c4dc9db7a"><title>BUGS</title>
    <para>
      In OpenSSL versions before 1.0.0 the BIO_pop() call was handled
      incorrectly, the I/O BIO reference count was incorrectly incremented
      (instead of decremented) and dissociated with the SSL BIO even if the
      SSL BIO was not explicitly being popped (e.g. a pop higher up the
      chain). Applications which included workarounds for this bug (e.g.
      freeing BIOs more than once) should be modified to handle this fix or
      they may free up an already freed BIO.
    </para>
  </refsection>
  <refsection xml:id="ID-2ececc53f09efc1e042cef1d58261548"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>