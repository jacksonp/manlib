<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>DES_random_key.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>DES_random_key, DES_set_key, DES_key_sched, DES_set_key_checked,
DES_set_key_unchecked, DES_set_odd_parity, DES_is_weak_key,
DES_ecb_encrypt, DES_ecb2_encrypt, DES_ecb3_encrypt, DES_ncbc_encrypt,
DES_cfb_encrypt, DES_ofb_encrypt, DES_pcbc_encrypt, DES_cfb64_encrypt,
DES_ofb64_encrypt, DES_xcbc_encrypt, DES_ede2_cbc_encrypt,
DES_ede2_cfb64_encrypt, DES_ede2_ofb64_encrypt, DES_ede3_cbc_encrypt,
DES_ede3_cfb64_encrypt, DES_ede3_ofb64_encrypt,
DES_cbc_cksum, DES_quad_cksum, DES_string_to_key, DES_string_to_2keys,
DES_fcrypt, DES_crypt</refname>
<refpurpose>DES encryption</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis>#include &lt;openssl/des.h&gt;</synopsis>
<synopsis>void DES_random_key(DES_cblock *ret);</synopsis>
<synopsis>int DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule);
int DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule);
int DES_set_key_checked(const_DES_cblock *key,
       DES_key_schedule *schedule);
void DES_set_key_unchecked(const_DES_cblock *key,
       DES_key_schedule *schedule);</synopsis>
<synopsis>void DES_set_odd_parity(DES_cblock *key);
int DES_is_weak_key(const_DES_cblock *key);</synopsis>
<synopsis>void DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
       DES_key_schedule *ks, int enc);
void DES_ecb2_encrypt(const_DES_cblock *input, DES_cblock *output,
       DES_key_schedule *ks1, DES_key_schedule *ks2, int enc);
void DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,
       DES_key_schedule *ks1, DES_key_schedule *ks2,
       DES_key_schedule *ks3, int enc);</synopsis>
<synopsis>void DES_ncbc_encrypt(const unsigned char *input, unsigned char *output,
       long length, DES_key_schedule *schedule, DES_cblock *ivec,
       int enc);
void DES_cfb_encrypt(const unsigned char *in, unsigned char *out,
       int numbits, long length, DES_key_schedule *schedule,
       DES_cblock *ivec, int enc);
void DES_ofb_encrypt(const unsigned char *in, unsigned char *out,
       int numbits, long length, DES_key_schedule *schedule,
       DES_cblock *ivec);
void DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,
       long length, DES_key_schedule *schedule, DES_cblock *ivec,
       int enc);
void DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,
       long length, DES_key_schedule *schedule, DES_cblock *ivec,
       int *num, int enc);
void DES_ofb64_encrypt(const unsigned char *in, unsigned char *out,
       long length, DES_key_schedule *schedule, DES_cblock *ivec,
       int *num);</synopsis>
<synopsis>void DES_xcbc_encrypt(const unsigned char *input, unsigned char *output,
       long length, DES_key_schedule *schedule, DES_cblock *ivec,
       const_DES_cblock *inw, const_DES_cblock *outw, int enc);</synopsis>
<synopsis>void DES_ede2_cbc_encrypt(const unsigned char *input,
       unsigned char *output, long length, DES_key_schedule *ks1,
       DES_key_schedule *ks2, DES_cblock *ivec, int enc);
void DES_ede2_cfb64_encrypt(const unsigned char *in,
       unsigned char *out, long length, DES_key_schedule *ks1,
       DES_key_schedule *ks2, DES_cblock *ivec, int *num, int enc);
void DES_ede2_ofb64_encrypt(const unsigned char *in,
       unsigned char *out, long length, DES_key_schedule *ks1,
       DES_key_schedule *ks2, DES_cblock *ivec, int *num);</synopsis>
<synopsis>void DES_ede3_cbc_encrypt(const unsigned char *input,
       unsigned char *output, long length, DES_key_schedule *ks1,
       DES_key_schedule *ks2, DES_key_schedule *ks3, DES_cblock *ivec,
       int enc);
void DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
       long length, DES_key_schedule *ks1, DES_key_schedule *ks2,
       DES_key_schedule *ks3, DES_cblock *ivec, int *num, int enc);
void DES_ede3_ofb64_encrypt(const unsigned char *in, unsigned char *out,
       long length, DES_key_schedule *ks1,
       DES_key_schedule *ks2, DES_key_schedule *ks3,
       DES_cblock *ivec, int *num);</synopsis>
<synopsis>DES_LONG DES_cbc_cksum(const unsigned char *input, DES_cblock *output,
       long length, DES_key_schedule *schedule,
       const_DES_cblock *ivec);
DES_LONG DES_quad_cksum(const unsigned char *input, DES_cblock output[],
       long length, int out_count, DES_cblock *seed);
void DES_string_to_key(const char *str, DES_cblock *key);
void DES_string_to_2keys(const char *str, DES_cblock *key1,
       DES_cblock *key2);</synopsis>
<synopsis>char *DES_fcrypt(const char *buf, const char *salt, char *ret);
char *DES_crypt(const char *buf, const char *salt);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="ID-a3c29d5a52ec5c226e8c2119798dd3db"><title>DESCRIPTION</title>
    <para>
      This library contains a fast implementation of the DES encryption
      algorithm.
    </para>
    <para>
      There are two phases to the use of DES encryption.  The first is the
      generation of a <emphasis role="italic">DES_key_schedule</emphasis>
      from a key, the second is the actual encryption.	A DES key is of
      type <emphasis role="italic">DES_cblock</emphasis>. This type is
      consists of 8 bytes with odd parity.  The least significant bit in
      each byte is the parity bit.  The key schedule is an expanded form of
      the key; it is used to speed the encryption process.
    </para>
    <para>
      DES_random_key() generates a random key.	The PRNG must be seeded
      prior to using this function (see <citerefentry>
      <refentrytitle>rand</refentrytitle> <manvolnum>3</manvolnum>
      </citerefentry>).  If the PRNG could not generate a secure key, 0 is
      returned.
    </para>
    <para>
      Before a DES key can be used, it must be converted into the
      architecture dependent <emphasis role="italic">DES_key_schedule</emphasis> via the
      DES_set_key_checked() or DES_set_key_unchecked() function.
    </para>
    <para>
      DES_set_key_checked() will check that the key passed is of odd parity
      and is not a week or semi-weak key.  If the parity is wrong, then -1
      is returned.  If the key is a weak key, then -2 is returned.  If an
      error is returned, the key schedule is not generated.
    </para>
    <para>
      DES_set_key() works like DES_set_key_checked() if the <emphasis role="italic">DES_check_key</emphasis> flag is non-zero, otherwise
      like DES_set_key_unchecked().  These functions are available for
      compatibility; it is recommended to use a function that does not
      depend on a global variable.
    </para>
    <para>
      DES_set_odd_parity() sets the parity of the passed <emphasis role="italic">key</emphasis> to odd.
    </para>
    <para>
      DES_is_weak_key() returns 1 if the passed key is a weak key, 0 if it
      is ok.
    </para>
    <para>
      The following routines mostly operate on an input and output stream
      of <emphasis role="italic">DES_cblock</emphasis>s.
    </para>
    <para>
      DES_ecb_encrypt() is the basic DES encryption routine that encrypts
      or decrypts a single 8-byte <emphasis role="italic">DES_cblock</emphasis> in <emphasis role="italic">electronic code book</emphasis> (ECB) mode.  It always
      transforms the input data, pointed to by <emphasis role="italic">input</emphasis>, into the output data, pointed to by
      the <emphasis role="italic">output</emphasis> argument. If the
      <emphasis role="italic">encrypt</emphasis> argument is non-zero
      (DES_ENCRYPT), the <emphasis role="italic">input</emphasis>
      (cleartext) is encrypted in to the <emphasis role="italic">output</emphasis> (ciphertext) using the key_schedule
      specified by the <emphasis role="italic">schedule</emphasis>
      argument, previously set via <emphasis role="italic">DES_set_key</emphasis>. If <emphasis role="italic">encrypt</emphasis> is zero (DES_DECRYPT), the <emphasis role="italic">input</emphasis> (now ciphertext) is decrypted into the
      <emphasis role="italic">output</emphasis> (now cleartext).  Input and
      output may overlap.  DES_ecb_encrypt() does not return a value.
    </para>
    <para>
      DES_ecb3_encrypt() encrypts/decrypts the <emphasis role="italic">input</emphasis> block by using three-key Triple-DES
      encryption in ECB mode.  This involves encrypting the input with
      <emphasis role="italic">ks1</emphasis>, decrypting with the key
      schedule <emphasis role="italic">ks2</emphasis>, and then encrypting
      with <emphasis role="italic">ks3</emphasis>.  This routine greatly
      reduces the chances of brute force breaking of DES and has the
      advantage of if <emphasis role="italic">ks1</emphasis>, <emphasis role="italic">ks2</emphasis> and <emphasis role="italic">ks3</emphasis> are the same, it is equivalent to just
      encryption using ECB mode and <emphasis role="italic">ks1</emphasis>
      as the key.
    </para>
    <para>
      The macro DES_ecb2_encrypt() is provided to perform two-key
      Triple-DES encryption by using <emphasis role="italic">ks1</emphasis>
      for the final encryption.
    </para>
    <para>
      DES_ncbc_encrypt() encrypts/decrypts using the <emphasis role="italic">cipher-block-chaining</emphasis> (CBC) mode of DES.  If
      the <emphasis role="italic">encrypt</emphasis> argument is non-zero,
      the routine cipher-block-chain encrypts the cleartext data pointed to
      by the <emphasis role="italic">input</emphasis> argument into the
      ciphertext pointed to by the <emphasis role="italic">output</emphasis> argument, using the key schedule
      provided by the <emphasis role="italic">schedule</emphasis> argument,
      and initialization vector provided by the <emphasis role="italic">ivec</emphasis> argument.  If the <emphasis role="italic">length</emphasis> argument is not an integral multiple
      of eight bytes, the last block is copied to a temporary area and zero
      filled.  The output is always an integral multiple of eight bytes.
    </para>
    <para>
      DES_xcbc_encrypt() is RSA's DESX mode of DES.  It uses <emphasis role="italic">inw</emphasis> and <emphasis role="italic">outw</emphasis> to 'whiten' the encryption.  <emphasis role="italic">inw</emphasis> and <emphasis role="italic">outw</emphasis> are secret (unlike the iv) and are as
      such, part of the key.  So the key is sort of 24 bytes.  This is much
      better than CBC DES.
    </para>
    <para>
      DES_ede3_cbc_encrypt() implements outer triple CBC DES encryption
      with three keys. This means that each DES operation inside the CBC
      mode is an <literal role="code">C=E(ks3,D(ks2,E(ks1,M)))</literal>.  This
      mode is used by SSL.
    </para>
    <para>
      The DES_ede2_cbc_encrypt() macro implements two-key Triple-DES by
      reusing <emphasis role="italic">ks1</emphasis> for the final
      encryption.  <literal role="code">C=E(ks1,D(ks2,E(ks1,M)))</literal>. This form
      of Triple-DES is used by the RSAREF library.
    </para>
    <para>
      DES_pcbc_encrypt() encrypt/decrypts using the propagating cipher
      block chaining mode used by Kerberos v4. Its parameters are the same
      as DES_ncbc_encrypt().
    </para>
    <para>
      DES_cfb_encrypt() encrypt/decrypts using cipher feedback mode.  This
      method takes an array of characters as input and outputs and array of
      characters.  It does not require any padding to 8 character groups.
      Note: the <emphasis role="italic">ivec</emphasis> variable is changed
      and the new changed value needs to be passed to the next call to this
      function.  Since this function runs a complete DES ECB encryption per
      <emphasis role="italic">numbits</emphasis>, this function is only
      suggested for use when sending small numbers of characters.
    </para>
    <para>
      DES_cfb64_encrypt() implements CFB mode of DES with 64bit feedback. 
      Why is this useful you ask?  Because this routine will allow you to
      encrypt an arbitrary number of bytes, no 8 byte padding.	Each call
      to this routine will encrypt the input bytes to output and then
      update ivec and num.  num contains 'how far' we are though ivec.	If
      this does not make much sense, read more about cfb mode of DES :-).
    </para>
    <para>
      DES_ede3_cfb64_encrypt() and DES_ede2_cfb64_encrypt() is the same as
      DES_cfb64_encrypt() except that Triple-DES is used.
    </para>
    <para>
      DES_ofb_encrypt() encrypts using output feedback mode.  This method
      takes an array of characters as input and outputs and array of
      characters.  It does not require any padding to 8 character groups.
      Note: the <emphasis role="italic">ivec</emphasis> variable is changed
      and the new changed value needs to be passed to the next call to this
      function.  Since this function runs a complete DES ECB encryption per
      numbits, this function is only suggested for use when sending small
      numbers of characters.
    </para>
    <para>
      DES_ofb64_encrypt() is the same as DES_cfb64_encrypt() using Output
      Feed Back mode.
    </para>
    <para>
      DES_ede3_ofb64_encrypt() and DES_ede2_ofb64_encrypt() is the same as
      DES_ofb64_encrypt(), using Triple-DES.
    </para>
    <para>
      The following functions are included in the DES library for
      compatibility with the MIT Kerberos library.
    </para>
    <para>
      DES_cbc_cksum() produces an 8 byte checksum based on the input stream
      (via CBC encryption).  The last 4 bytes of the checksum are returned
      and the complete 8 bytes are placed in <emphasis role="italic">output</emphasis>. This function is used by Kerberos
      v4.  Other applications should use <citerefentry>
      <refentrytitle>EVP_DigestInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> etc. instead.
    </para>
    <para>
      DES_quad_cksum() is a Kerberos v4 function.  It returns a 4 byte
      checksum from the input bytes.  The algorithm can be iterated over
      the input, depending on <emphasis role="italic">out_count</emphasis>,
      1, 2, 3 or 4 times.  If <emphasis role="italic">output</emphasis> is
      non-NULL, the 8 bytes generated by each pass are written into
      <emphasis role="italic">output</emphasis>.
    </para>
    <para>
      The following are DES-based transformations:
    </para>
    <para>
      DES_fcrypt() is a fast version of the Unix crypt(3) function.  This
      version takes only a small amount of space relative to other fast
      crypt() implementations.	This is different to the normal crypt in
      that the third parameter is the buffer that the return value is
      written into.  It needs to be at least 14 bytes long.  This function
      is thread safe, unlike the normal crypt.
    </para>
    <para>
      DES_crypt() is a faster replacement for the normal system crypt().
      This function calls DES_fcrypt() with a static array passed as the
      third parameter.	This mostly emulates the normal non-thread-safe
      semantics of crypt(3). The <emphasis role="bold">salt</emphasis> must
      be two ASCII characters.
    </para>
    <para>
      DES_enc_write() writes <emphasis role="italic">len</emphasis> bytes
      to file descriptor <emphasis role="italic">fd</emphasis> from buffer
      <emphasis role="italic">buf</emphasis>. The data is encrypted via
      <emphasis role="italic">pcbc_encrypt</emphasis> (default) using
      <emphasis role="italic">sched</emphasis> for the key and <emphasis role="italic">iv</emphasis> as a starting vector.  The actual data
      send down <emphasis role="italic">fd</emphasis> consists of 4 bytes
      (in network byte order) containing the length of the following
      encrypted data.  The encrypted data then follows, padded with random
      data out to a multiple of 8 bytes.
    </para>
  </refsection>
  <refsection xml:id="ID-6c4e15a3e51fbe80cf26c0b7062ab652"><title>BUGS</title>
    <para>
      DES_3cbc_encrypt() is flawed and must not be used in applications.
    </para>
    <para>
      DES_cbc_encrypt() does not modify <emphasis role="bold">ivec</emphasis>; use DES_ncbc_encrypt() instead.
    </para>
    <para>
      DES_cfb_encrypt() and DES_ofb_encrypt() operates on input of 8 bits.
      What this means is that if you set numbits to 12, and length to 2,
      the first 12 bits will come from the 1st input byte and the low half
      of the second input byte.  The second 12 bits will have the low 8
      bits taken from the 3rd input byte and the top 4 bits taken from the
      4th input byte.  The same holds for output.  This function has been
      implemented this way because most people will be using a multiple of
      8 and because once you get into pulling bytes input bytes apart
      things get ugly!
    </para>
    <para>
      DES_string_to_key() is available for backward compatibility with the
      MIT library.  New applications should use a cryptographic hash
      function. The same applies for DES_string_to_2key().
    </para>
  </refsection>
  <refsection xml:id="ID-cf2cbc875160ac55c1854d7602f7d57a"><title>NOTES</title>
    <para>
      The <emphasis role="bold">des</emphasis> library was written to be
      source code compatible with the MIT Kerberos library.
    </para>
    <para>
      Applications should use the higher level functions <citerefentry>
      <refentrytitle>EVP_EncryptInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry> etc. instead of calling
      these functions directly.
    </para>
    <para>
      Single-key DES is insecure due to its short key size.  ECB mode is
      not suitable for most applications; see <citerefentry>
      <refentrytitle>des_modes</refentrytitle> <manvolnum>7</manvolnum>
      </citerefentry>.
    </para>
  </refsection>
  <refsection xml:id="ID-37cf9d0d831c9c3927515df03ade7d33"><title>HISTORY</title>
    <para>
      The requirement that the <emphasis role="bold">salt</emphasis>
      parameter to DES_crypt() and DES_fcrypt() be two ASCII characters was
      first enforced in OpenSSL 1.1.0.	Previous versions tried to use the
      letter uppercase <emphasis role="bold">A</emphasis> if both character
      were not present, and could crash when given non-ASCII on some
      platforms.
    </para>
  </refsection>
  <refsection xml:id="ID-8710bbe42d25c399997fdbd2e6c52b3b"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>des_modes</refentrytitle>
      <manvolnum>7</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>EVP_EncryptInit</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
  </refsection>
  <refsection xml:id="ID-104beb5f5282172484894b4c7df537ee"><title>COPYRIGHT</title>
    <para>
      Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.
    </para>
    <para>
      Licensed under the OpenSSL license (the "License").  You may not use
      this file except in compliance with the License.	You can obtain a
      copy in the file LICENSE in the source distribution or at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.openssl.org/source/license.html">https://www.openssl.org/source/license.html</link>.
    </para>
  </refsection>
</refentry>