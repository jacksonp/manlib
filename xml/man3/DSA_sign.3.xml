<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>DSA_sign.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>DSA_sign, DSA_sign_setup, DSA_verify</refname>
<refpurpose>DSA signatures</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
<synopsis format="linespecific">#include &lt;openssl/dsa.h&gt;</synopsis>
<synopsis format="linespecific">int    DSA_sign(int type, const unsigned char *dgst, int len,
               unsigned char *sigret, unsigned int *siglen, DSA *dsa);</synopsis>
<synopsis format="linespecific">int    DSA_sign_setup(DSA *dsa, BN_CTX *ctx, BIGNUM **kinvp,
               BIGNUM **rp);</synopsis>
<synopsis format="linespecific">int    DSA_verify(int type, const unsigned char *dgst, int len,
               unsigned char *sigbuf, int siglen, DSA *dsa);</synopsis>
  </refsynopsisdiv>
  <refsection xml:id="sources.openssl.doc.crypto.DSA_sign.pod:DESCRIPTION"><title>DESCRIPTION</title>
    <para>
      DSA_sign() computes a digital signature on the <emphasis role="bold">len</emphasis> byte message digest <emphasis role="bold">dgst</emphasis> using the private key <emphasis role="bold">dsa</emphasis> and places its ASN.1 DER encoding at
      <emphasis role="bold">sigret</emphasis>. The length of the signature
      is places in *<emphasis role="bold">siglen</emphasis>. <emphasis role="bold">sigret</emphasis> must point to DSA_size(<emphasis role="bold">dsa</emphasis>) bytes of memory.
    </para>
    <para>
      DSA_sign_setup() may be used to precompute part of the signing
      operation in case signature generation is time-critical. It expects
      <emphasis role="bold">dsa</emphasis> to contain DSA parameters. It
      places the precomputed values in newly allocated <emphasis role="bold">BIGNUM</emphasis>s at *<emphasis role="bold">kinvp</emphasis> and *<emphasis role="bold">rp</emphasis>, after freeing the old ones unless
      *<emphasis role="bold">kinvp</emphasis> and *<emphasis role="bold">rp</emphasis> are NULL. These values may be passed to
      DSA_sign() in <emphasis role="bold">dsa-&gt;kinv</emphasis> and
      <emphasis role="bold">dsa-&gt;r</emphasis>. <emphasis role="bold">ctx</emphasis> is a pre-allocated <emphasis role="bold">BN_CTX</emphasis> or NULL.
    </para>
    <para>
      DSA_verify() verifies that the signature <emphasis role="bold">sigbuf</emphasis> of size <emphasis role="bold">siglen</emphasis> matches a given message digest
      <emphasis role="bold">dgst</emphasis> of size <emphasis role="bold">len</emphasis>. <emphasis role="bold">dsa</emphasis> is
      the signer's public key.
    </para>
    <para>
      The <emphasis role="bold">type</emphasis> parameter is ignored.
    </para>
    <para>
      The PRNG must be seeded before DSA_sign() (or DSA_sign_setup()) is
      called.
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.DSA_sign.pod:RETURN_VALUES"><title>RETURN VALUES</title>
    <para>
      DSA_sign() and DSA_sign_setup() return 1 on success, 0 on error.
      DSA_verify() returns 1 for a valid signature, 0 for an incorrect
      signature and -1 on error. The error codes can be obtained by
      ERR_get_error(3).
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.DSA_sign.pod:CONFORMING_TO"><title>CONFORMING TO</title>
    <para>
      US Federal Information Processing Standard FIPS 186 (Digital
      Signature Standard, DSS), ANSI X9.30
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.DSA_sign.pod:SEE_ALSO"><title>SEE ALSO</title>
    <para>
      dsa(3), ERR_get_error(3), rand(3), DSA_do_sign(3)
    </para>
  </refsection>
  <refsection xml:id="sources.openssl.doc.crypto.DSA_sign.pod:HISTORY"><title>HISTORY</title>
    <para>
      DSA_sign() and DSA_verify() are available in all versions of SSLeay.
      DSA_sign_setup() was added in SSLeay 0.8.
    </para>
  </refsection>
</refentry>