<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0">
  <refmeta>
    <refentrytitle>x509v3_config.pod</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>x509v3_config</refname>
<refpurpose>X509 V3 certificate extension configuration format</refpurpose>
  </refnamediv>
  <refsection xml:id="ID-fe3e1c7b7aa814b5c70437a8c96145bf"><title>DESCRIPTION</title>
    <para>
      Several of the OpenSSL utilities can add extensions to a certificate
      or certificate request based on the contents of a configuration file.
    </para>
    <para>
      Typically the application will contain an option to point to an
      extension section. Each line of the extension section takes the form:
    </para>
    <screen>extension_name=[critical,] extension_options</screen>
    <para>
      If <emphasis role="bold">critical</emphasis> is present then the
      extension will be critical.
    </para>
    <para>
      The format of <emphasis role="bold">extension_options</emphasis>
      depends on the value of <emphasis role="bold">extension_name</emphasis>.
    </para>
    <para>
      There are four main types of extension: <emphasis role="italic">string</emphasis> extensions, <emphasis role="italic">multi-valued</emphasis> extensions, <emphasis role="italic">raw</emphasis> and <emphasis role="italic">arbitrary</emphasis> extensions.
    </para>
    <para>
      String extensions simply have a string which contains either the
      value itself or how it is obtained.
    </para>
    <para>
      For example:
    </para>
    <screen>nsComment="This is a Comment"</screen>
    <para>
      Multi-valued extensions have a short form and a long form. The short
      form is a list of names and values:
    </para>
    <screen>basicConstraints=critical,CA:true,pathlen:1</screen>
    <para>
      The long form allows the values to be placed in a separate section:
    </para>
    <screen>basicConstraints=critical,@bs_section

[bs_section]

CA=true
pathlen=1</screen>
    <para>
      Both forms are equivalent.
    </para>
    <para>
      The syntax of raw extensions is governed by the extension code: it
      can for example contain data in multiple sections. The correct syntax
      to use is defined by the extension code itself: check out the
      certificate policies extension for an example.
    </para>
    <para>
      If an extension type is unsupported then the <emphasis role="italic">arbitrary</emphasis> extension syntax must be used, see
      the <link linkend="ID-aaccb05820f5b766ca48c76b1b13a932"><quote>ARBITRARY
      EXTENSIONS</quote></link> section for more details.
    </para>
  </refsection>
  <refsection xml:id="ID-f1f13457fc50ab6e80a2209236d6f568"><title>STANDARD EXTENSIONS</title>
    <para>
      The following sections describe each supported extension in detail.
    </para>
    <refsection xml:id="ID-50b1a9b649f1100d12c4162713ed7161"><title>Basic Constraints.</title>
      <para>
	This is a multi valued extension which indicates whether a
	certificate is a CA certificate. The first (mandatory) name is
	<emphasis role="bold">CA</emphasis> followed by <emphasis role="bold">TRUE</emphasis> or <emphasis role="bold">FALSE</emphasis>. If <emphasis role="bold">CA</emphasis> is <emphasis role="bold">TRUE</emphasis>
	then an optional <emphasis role="bold">pathlen</emphasis> name
	followed by an non-negative value can be included.
      </para>
      <para>
	For example:
      </para>
      <screen>basicConstraints=CA:TRUE

basicConstraints=CA:FALSE

basicConstraints=critical,CA:TRUE, pathlen:0</screen>
      <para>
	A CA certificate <emphasis role="bold">must</emphasis> include the
	basicConstraints value with the CA field set to TRUE. An end user
	certificate must either set CA to FALSE or exclude the extension
	entirely. Some software may require the inclusion of
	basicConstraints with CA set to FALSE for end entity certificates.
      </para>
      <para>
	The pathlen parameter indicates the maximum number of CAs that can
	appear below this one in a chain. So if you have a CA with a
	pathlen of zero it can only be used to sign end user certificates
	and not further CAs.
      </para>
      <screen></screen>
    </refsection>
    <refsection xml:id="ID-8e496fa3278a804bbbb2cde4390eb404"><title>Key Usage.</title>
      <para>
	Key usage is a multi valued extension consisting of a list of names
	of the permitted key usages.
      </para>
      <para>
	The supported names are: digitalSignature, nonRepudiation,
	keyEncipherment, dataEncipherment, keyAgreement, keyCertSign,
	cRLSign, encipherOnly and decipherOnly.
      </para>
      <para>
	Examples:
      </para>
      <screen>keyUsage=digitalSignature, nonRepudiation

keyUsage=critical, keyCertSign

</screen>
    </refsection>
    <refsection xml:id="ID-03dc291e769113f8b1856514869b7e39"><title>Extended Key Usage.</title>
      <para>
	This extensions consists of a list of usages indicating purposes
	for which the certificate public key can be used for,
      </para>
      <para>
	These can either be object short names of the dotted numerical form
	of OIDs. While any OID can be used only certain values make sense.
	In particular the following PKIX, NS and MS values are meaningful:
      </para>
      <screen>Value                  Meaning
-----                  -------
serverAuth             SSL/TLS Web Server Authentication.
clientAuth             SSL/TLS Web Client Authentication.
codeSigning            Code signing.
emailProtection        E-mail Protection (S/MIME).
timeStamping           Trusted Timestamping
OCSPSigning            OCSP Signing
ipsecIKE               ipsec Internet Key Exchnage
msCodeInd              Microsoft Individual Code Signing (authenticode)
msCodeCom              Microsoft Commercial Code Signing (authenticode)
msCTLSign              Microsoft Trust List Signing
msEFS                  Microsoft Encrypted File System</screen>
      <para>
	Examples:
      </para>
      <screen>extendedKeyUsage=critical,codeSigning,1.2.3.4
extendedKeyUsage=serverAuth,clientAuth

</screen>
    </refsection>
    <refsection xml:id="ID-dcb87f57995fcef95152bdc5ae25216a"><title>Subject Key Identifier.</title>
      <para>
	This is really a string extension and can take two possible values.
	Either the word <emphasis role="bold">hash</emphasis> which will
	automatically follow the guidelines in RFC3280 or a hex string
	giving the extension value to include. The use of the hex string is
	strongly discouraged.
      </para>
      <para>
	Example:
      </para>
      <screen>subjectKeyIdentifier=hash

</screen>
    </refsection>
    <refsection xml:id="ID-b8fe17a2a2a4a57a49dca190b08a50e1"><title>Authority Key Identifier.</title>
      <para>
	The authority key identifier extension permits two options. keyid
	and issuer: both can take the optional value "always".
      </para>
      <para>
	If the keyid option is present an attempt is made to copy the
	subject key identifier from the parent certificate. If the value
	"always" is present then an error is returned if the option fails.
      </para>
      <para>
	The issuer option copies the issuer and serial number from the
	issuer certificate. This will only be done if the keyid option
	fails or is not included unless the "always" flag will always
	include the value.
      </para>
      <para>
	Example:
      </para>
      <screen>authorityKeyIdentifier=keyid,issuer

</screen>
    </refsection>
    <refsection xml:id="ID-949e1ff32fca8a7b914368ad4646d9ba"><title>Subject Alternative Name.</title>
      <para>
	The subject alternative name extension allows various literal
	values to be included in the configuration file. These include
	<emphasis role="bold">email</emphasis> (an email address) <emphasis role="bold">URI</emphasis> a uniform resource indicator, <emphasis role="bold">DNS</emphasis> (a DNS domain name), <emphasis role="bold">RID</emphasis> (a registered ID: OBJECT IDENTIFIER),
	<emphasis role="bold">IP</emphasis> (an IP address), <emphasis role="bold">dirName</emphasis> (a distinguished name) and
	otherName.
      </para>
      <para>
	The email option include a special 'copy' value. This will
	automatically include and email addresses contained in the
	certificate subject name in the extension.
      </para>
      <para>
	The IP address used in the <emphasis role="bold">IP</emphasis>
	options can be in either IPv4 or IPv6 format.
      </para>
      <para>
	The value of <emphasis role="bold">dirName</emphasis> should point
	to a section containing the distinguished name to use as a set of
	name value pairs. Multi values AVAs can be formed by prefacing the
	name with a <emphasis role="bold">+</emphasis> character.
      </para>
      <para>
	otherName can include arbitrary data associated with an OID: the
	value should be the OID followed by a semicolon and the content in
	standard <citerefentry>
	<refentrytitle>ASN1_generate_nconf</refentrytitle>
	<manvolnum>3</manvolnum> </citerefentry> format.
      </para>
      <para>
	Examples:
      </para>
      <screen>subjectAltName=email:copy,email:my@other.address,URI:http://my.url.here/
subjectAltName=IP:192.168.7.1
subjectAltName=IP:13::17
subjectAltName=email:my@other.address,RID:1.2.3.4
subjectAltName=otherName:1.2.3.4;UTF8:some other identifier

subjectAltName=dirName:dir_sect

[dir_sect]
C=UK
O=My Organization
OU=My Unit
CN=My Name

</screen>
    </refsection>
    <refsection xml:id="ID-5d6ac6b516277280df7ed70410c66215"><title>Issuer Alternative Name.</title>
      <para>
	The issuer alternative name option supports all the literal options
	of subject alternative name. It does <emphasis role="bold">not</emphasis> support the email:copy option because
	that would not make sense. It does support an additional
	issuer:copy option that will copy all the subject alternative name
	values from the issuer certificate (if possible).
      </para>
      <para>
	Example:
      </para>
      <screen>issuserAltName = issuer:copy

</screen>
    </refsection>
    <refsection xml:id="ID-e0062a78c0cf51e731826aaba772428b"><title>Authority Info Access.</title>
      <para>
	The authority information access extension gives details about how
	to access certain information relating to the CA. Its syntax is
	accessOID;location where <emphasis role="italic">location</emphasis> has the same syntax as subject
	alternative name (except that email:copy is not supported).
	accessOID can be any valid OID but only certain values are
	meaningful, for example OCSP and caIssuers.
      </para>
      <para>
	Example:
      </para>
      <screen>authorityInfoAccess = OCSP;URI:http://ocsp.my.host/
authorityInfoAccess = caIssuers;URI:http://my.ca/ca.html

</screen>
    </refsection>
    <refsection xml:id="ID-fb8e20d1372f3ead22e57f1326627a27"><title>CRL distribution points.</title>
      <para>
	This is a multi-valued extension whose options can be either in
	name:value pair using the same form as subject alternative name or
	a single value representing a section name containing all the
	distribution point fields.
      </para>
      <para>
	For a name:value pair a new DistributionPoint with the fullName
	field set to the given value both the cRLissuer and reasons fields
	are omitted in this case.
      </para>
      <para>
	In the single option case the section indicated contains values for
	each field. In this section:
      </para>
      <para>
	If the name is "fullname" the value field should contain the full
	name of the distribution point in the same format as subject
	alternative name.
      </para>
      <para>
	If the name is "relativename" then the value field should contain a
	section name whose contents represent a DN fragment to be placed in
	this field.
      </para>
      <para>
	The name "CRLIssuer" if present should contain a value for this
	field in subject alternative name format.
      </para>
      <para>
	If the name is "reasons" the value field should consist of a comma
	separated field containing the reasons. Valid reasons are:
	"keyCompromise", "CACompromise", "affiliationChanged",
	"superseded", "cessationOfOperation", "certificateHold",
	"privilegeWithdrawn" and "AACompromise".
      </para>
      <screen></screen>
      <para>
	Simple examples:
      </para>
      <screen>crlDistributionPoints=URI:http://myhost.com/myca.crl
crlDistributionPoints=URI:http://my.com/my.crl,URI:http://oth.com/my.crl</screen>
      <para>
	Full distribution point example:
      </para>
      <screen>crlDistributionPoints=crldp1_section

[crldp1_section]

fullname=URI:http://myhost.com/myca.crl
CRLissuer=dirName:issuer_sect
reasons=keyCompromise, CACompromise

[issuer_sect]
C=UK
O=Organisation
CN=Some Name</screen>
    </refsection>
    <refsection xml:id="ID-4032dd8240802e09aa6c57a30ef0c8ab"><title>Issuing Distribution Point</title>
      <para>
	This extension should only appear in CRLs. It is a multi valued
	extension whose syntax is similar to the "section" pointed to by
	the CRL distribution points extension with a few differences.
      </para>
      <para>
	The names "reasons" and "CRLissuer" are not recognized.
      </para>
      <para>
	The name "onlysomereasons" is accepted which sets this field. The
	value is in the same format as the CRL distribution point "reasons"
	field.
      </para>
      <para>
	The names "onlyuser", "onlyCA", "onlyAA" and "indirectCRL" are also
	accepted the values should be a boolean value (TRUE or FALSE) to
	indicate the value of the corresponding field.
      </para>
      <para>
	Example:
      </para>
      <screen>issuingDistributionPoint=critical, @idp_section

[idp_section]

fullname=URI:http://myhost.com/myca.crl
indirectCRL=TRUE
onlysomereasons=keyCompromise, CACompromise

[issuer_sect]
C=UK
O=Organisation
CN=Some Name

</screen>
    </refsection>
    <refsection xml:id="ID-4d51bf6aff67733232372ed69a23ef25"><title>Certificate Policies.</title>
      <para>
	This is a <emphasis role="italic">raw</emphasis> extension. All the
	fields of this extension can be set by using the appropriate
	syntax.
      </para>
      <para>
	If you follow the PKIX recommendations and just using one OID then
	you just include the value of that OID. Multiple OIDs can be set
	separated by commas, for example:
      </para>
      <screen>certificatePolicies= 1.2.4.5, 1.1.3.4</screen>
      <para>
	If you wish to include qualifiers then the policy OID and
	qualifiers need to be specified in a separate section: this is done
	by using the @section syntax instead of a literal OID value.
      </para>
      <para>
	The section referred to must include the policy OID using the name
	policyIdentifier, cPSuri qualifiers can be included using the
	syntax:
      </para>
      <screen>CPS.nnn=value</screen>
      <para>
	userNotice qualifiers can be set using the syntax:
      </para>
      <screen>userNotice.nnn=@notice</screen>
      <para>
	The value of the userNotice qualifier is specified in the relevant
	section. This section can include explicitText, organization and
	noticeNumbers options. explicitText and organization are text
	strings, noticeNumbers is a comma separated list of numbers. The
	organization and noticeNumbers options (if included) must BOTH be
	present. If you use the userNotice option with IE5 then you need
	the 'ia5org' option at the top level to modify the encoding:
	otherwise it will not be interpreted properly.
      </para>
      <para>
	Example:
      </para>
      <screen>certificatePolicies=ia5org,1.2.3.4,1.5.6.7.8,@polsect

[polsect]

policyIdentifier = 1.3.5.8
CPS.1="http://my.host.name/"
CPS.2="http://my.your.name/"
userNotice.1=@notice

[notice]

explicitText="Explicit Text Here"
organization="Organisation Name"
noticeNumbers=1,2,3,4</screen>
      <para>
	The <emphasis role="bold">ia5org</emphasis> option changes the type
	of the <emphasis role="italic">organization</emphasis> field. In
	RFC2459 it can only be of type DisplayText. In RFC3280 IA5Strring
	is also permissible. Some software (for example some versions of
	MSIE) may require ia5org.
      </para>
    </refsection>
    <refsection xml:id="ID-372497affc65aa93b7904b9c0256d800"><title>Policy Constraints</title>
      <para>
	This is a multi-valued extension which consisting of the names
	<emphasis role="bold">requireExplicitPolicy</emphasis> or <emphasis role="bold">inhibitPolicyMapping</emphasis> and a non negative
	integer value. At least one component must be present.
      </para>
      <para>
	Example:
      </para>
      <screen>policyConstraints = requireExplicitPolicy:3

</screen>
    </refsection>
    <refsection xml:id="ID-949b2d1b1853f79a061569276cbd7537"><title>Inhibit Any Policy</title>
      <para>
	This is a string extension whose value must be a non negative
	integer.
      </para>
      <para>
	Example:
      </para>
      <screen>inhibitAnyPolicy = 2

</screen>
    </refsection>
    <refsection xml:id="ID-599f163eb27cc78e0815a39d1e309bb2"><title>Name Constraints</title>
      <para>
	The name constraints extension is a multi-valued extension. The
	name should begin with the word <emphasis role="bold">permitted</emphasis> or <emphasis role="bold">excluded</emphasis> followed by a <emphasis role="bold">;</emphasis>. The rest of the name and the value
	follows the syntax of subjectAltName except email:copy is not
	supported and the <emphasis role="bold">IP</emphasis> form should
	consist of an IP addresses and subnet mask separated by a <emphasis role="bold">/</emphasis>.
      </para>
      <para>
	Examples:
      </para>
      <screen>nameConstraints=permitted;IP:192.168.0.0/255.255.0.0

nameConstraints=permitted;email:.somedomain.com

nameConstraints=excluded;email:.com

</screen>
    </refsection>
    <refsection xml:id="ID-6e0c81892980b1e63a0f7df83787574e"><title>OCSP No Check</title>
      <para>
	The OCSP No Check extension is a string extension but its value is
	ignored.
      </para>
      <para>
	Example:
      </para>
      <screen>noCheck = ignored

</screen>
    </refsection>
    <refsection xml:id="ID-142f70efbc3bea07676793be7654626d"><title>TLS Feature (aka Must Staple)</title>
      <para>
	This is a multi-valued extension consisting of a list of TLS
	extension identifiers. Each identifier may be a number (0..65535)
	or a supported name. When a TLS client sends a listed extension,
	the TLS server is expected to include that extension in its reply.
      </para>
      <para>
	The supported names are: <emphasis role="bold">status_request</emphasis> and <emphasis role="bold">status_request_v2</emphasis>.
      </para>
      <para>
	Example:
      </para>
      <screen>tlsfeature = status_request

</screen>
    </refsection>
  </refsection>
  <refsection xml:id="ID-61860cbe32a38638ab2ad7c7feb918c7"><title>DEPRECATED EXTENSIONS</title>
    <para>
      The following extensions are non standard, Netscape specific and
      largely obsolete. Their use in new applications is discouraged.
    </para>
    <refsection xml:id="ID-20a5316cc0287d9e4baf9d331d4ea494"><title>Netscape String extensions.</title>
      <para>
	Netscape Comment (<emphasis role="bold">nsComment</emphasis>) is a
	string extension containing a comment which will be displayed when
	the certificate is viewed in some browsers.
      </para>
      <para>
	Example:
      </para>
      <screen>nsComment = "Some Random Comment"</screen>
      <para>
	Other supported extensions in this category are: <emphasis role="bold">nsBaseUrl</emphasis>, <emphasis role="bold">nsRevocationUrl</emphasis>, <emphasis role="bold">nsCaRevocationUrl</emphasis>, <emphasis role="bold">nsRenewalUrl</emphasis>, <emphasis role="bold">nsCaPolicyUrl</emphasis> and <emphasis role="bold">nsSslServerName</emphasis>.
      </para>
      <screen></screen>
    </refsection>
    <refsection xml:id="ID-75b573725f6324be75a9b43766f4e251"><title>Netscape Certificate Type</title>
      <para>
	This is a multi-valued extensions which consists of a list of flags
	to be included. It was used to indicate the purposes for which a
	certificate could be used. The basicConstraints, keyUsage and
	extended key usage extensions are now used instead.
      </para>
      <para>
	Acceptable values for nsCertType are: <emphasis role="bold">client</emphasis>, <emphasis role="bold">server</emphasis>, <emphasis role="bold">email</emphasis>, <emphasis role="bold">objsign</emphasis>, <emphasis role="bold">reserved</emphasis>, <emphasis role="bold">sslCA</emphasis>, <emphasis role="bold">emailCA</emphasis>, <emphasis role="bold">objCA</emphasis>.
      </para>
      <screen></screen>
    </refsection>
  </refsection>
  <refsection xml:id="ID-aaccb05820f5b766ca48c76b1b13a932"><title>ARBITRARY EXTENSIONS</title>
    <para>
      If an extension is not supported by the OpenSSL code then it must be
      encoded using the arbitrary extension format. It is also possible to
      use the arbitrary format for supported extensions. Extreme care
      should be taken to ensure that the data is formatted correctly for
      the given extension type.
    </para>
    <para>
      There are two ways to encode arbitrary extensions.
    </para>
    <para>
      The first way is to use the word ASN1 followed by the extension
      content using the same syntax as <citerefentry>
      <refentrytitle>ASN1_generate_nconf</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>. For example:
    </para>
    <screen>1.2.3.4=critical,ASN1:UTF8String:Some random data

1.2.3.4=ASN1:SEQUENCE:seq_sect

[seq_sect]

field1 = UTF8:field1
field2 = UTF8:field2</screen>
    <para>
      It is also possible to use the word DER to include the raw encoded
      data in any extension.
    </para>
    <screen>1.2.3.4=critical,DER:01:02:03:04
1.2.3.4=DER:01020304</screen>
    <para>
      The value following DER is a hex dump of the DER encoding of the
      extension Any extension can be placed in this form to override the
      default behaviour. For example:
    </para>
    <screen>basicConstraints=critical,DER:00:01:02:03</screen>
  </refsection>
  <refsection xml:id="ID-3b90b3c2dd391efaf54f1b6b1cd80993"><title>WARNING</title>
    <para>
      There is no guarantee that a specific implementation will process a
      given extension. It may therefore be sometimes possible to use
      certificates for purposes prohibited by their extensions because a
      specific application does not recognize or honour the values of the
      relevant extensions.
    </para>
    <para>
      The DER and ASN1 options should be used with caution. It is possible
      to create totally invalid extensions if they are not used carefully.
    </para>
    <screen></screen>
  </refsection>
  <refsection xml:id="ID-4b99a82aeceab18e3bcf4ddb630372ec"><title>NOTES</title>
    <para>
      If an extension is multi-value and a field value must contain a comma
      the long form must be used otherwise the comma would be
      misinterpreted as a field separator. For example:
    </para>
    <screen>subjectAltName=URI:ldap://somehost.com/CN=foo,OU=bar</screen>
    <para>
      will produce an error but the equivalent form:
    </para>
    <screen>subjectAltName=@subject_alt_section

[subject_alt_section]
subjectAltName=URI:ldap://somehost.com/CN=foo,OU=bar</screen>
    <para>
      is valid.
    </para>
    <para>
      Due to the behaviour of the OpenSSL <emphasis role="bold">conf</emphasis> library the same field name can only
      occur once in a section. This means that:
    </para>
    <screen>subjectAltName=@alt_section

[alt_section]

email=steve@here
email=steve@there</screen>
    <para>
      will only recognize the last value. This can be worked around by
      using the form:
    </para>
    <screen>[alt_section]

email.1=steve@here
email.2=steve@there</screen>
  </refsection>
  <refsection xml:id="ID-79235201a1b460a17780295135be989d"><title>SEE ALSO</title>
    <para>
      <citerefentry> <refentrytitle>req</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ca</refentrytitle> <manvolnum>1</manvolnum>
      </citerefentry>, <citerefentry> <refentrytitle>x509</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry>, <citerefentry>
      <refentrytitle>ASN1_generate_nconf</refentrytitle>
      <manvolnum>3</manvolnum> </citerefentry>
    </para>
    <screen></screen>
  </refsection>
</refentry>