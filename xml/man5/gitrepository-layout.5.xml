<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>gitrepository-layout</refentrytitle>
<manvolnum>5</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>gitrepository-layout</refname>
  <refpurpose>Git Repository Layout</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<simpara>$GIT_DIR/*</simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>A Git repository comes in two different flavours:</simpara>
<itemizedlist>
<listitem>
<simpara>
a <literal>.git</literal> directory at the root of the working tree;
</simpara>
</listitem>
<listitem>
<simpara>
a <literal>&lt;project&gt;.git</literal> directory that is a <emphasis>bare</emphasis> repository
   (i.e. without its own working tree), that is typically used for
   exchanging histories with others by pushing into it and fetching
   from it.
</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Note</emphasis>: Also you can have a plain text file <literal>.git</literal> at the root of
your working tree, containing <literal>gitdir: &lt;path&gt;</literal> to point at the real
directory that has the repository.  This mechanism is often used for
a working tree of a submodule checkout, to allow you in the
containing superproject to <literal>git checkout</literal> a branch that does not
have the submodule.  The <literal>checkout</literal> has to remove the entire
submodule working tree, without losing the submodule repository.</simpara>
<simpara>These things may exist in a Git repository.</simpara>
<variablelist>
<varlistentry>
<term>
objects
</term>
<listitem>
<simpara>
        Object store associated with this repository.  Usually
        an object store is self sufficient (i.e. all the objects
        that are referred to by an object found in it are also
        found in it), but there are a few ways to violate it.
</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
You could have an incomplete but locally usable repository
by creating a shallow clone.  See <citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
<listitem>
<simpara>
You could be using the <literal>objects/info/alternates</literal> or
<literal>$GIT_ALTERNATE_OBJECT_DIRECTORIES</literal> mechanisms to <emphasis>borrow</emphasis>
objects from other object stores.  A repository with this kind
of incomplete object store is not suitable to be published for
use with dumb transports but otherwise is OK as long as
<literal>objects/info/alternates</literal> points at the object stores it
borrows from.
</simpara>
</listitem>
</orderedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
objects/[0-9a-f][0-9a-f]
</term>
<listitem>
<simpara>
        A newly created object is stored in its own file.
        The objects are splayed over 256 subdirectories using
        the first two characters of the sha1 object name to
        keep the number of directory entries in <literal>objects</literal>
        itself to a manageable number. Objects found
        here are often called <emphasis>unpacked</emphasis> (or <emphasis>loose</emphasis>) objects.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
objects/pack
</term>
<listitem>
<simpara>
        Packs (files that store many object in compressed form,
        along with index files to allow them to be randomly
        accessed) are found in this directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
objects/info
</term>
<listitem>
<simpara>
        Additional information about the object store is
        recorded in this directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
objects/info/packs
</term>
<listitem>
<simpara>
        This file is to help dumb transports discover what packs
        are available in this object store.  Whenever a pack is
        added or removed, <literal>git update-server-info</literal> should be run
        to keep this file up-to-date if the repository is
        published for dumb transports.  <emphasis>git repack</emphasis> does this
        by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
objects/info/alternates
</term>
<listitem>
<simpara>
        This file records paths to alternate object stores that
        this object store borrows objects from, one pathname per
        line. Note that not only native Git tools use it locally,
        but the HTTP fetcher also tries to use it remotely; this
        will usually work if you have relative paths (relative
        to the object database, not to the repository!) in your
        alternates file, but it will not work if you use absolute
        paths unless the absolute path in filesystem and web URL
        is the same. See also <emphasis>objects/info/http-alternates</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
objects/info/http-alternates
</term>
<listitem>
<simpara>
        This file records URLs to alternate object stores that
        this object store borrows objects from, to be used when
        the repository is fetched over HTTP.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
refs
</term>
<listitem>
<simpara>
        References are stored in subdirectories of this
        directory.  The <emphasis>git prune</emphasis> command knows to preserve
        objects reachable from refs found in this directory and
        its subdirectories.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
refs/heads/<literal>name</literal>
</term>
<listitem>
<simpara>
        records tip-of-the-tree commit objects of branch <literal>name</literal>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
refs/tags/<literal>name</literal>
</term>
<listitem>
<simpara>
        records any object name (not necessarily a commit
        object, or a tag object that points at a commit object).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
refs/remotes/<literal>name</literal>
</term>
<listitem>
<simpara>
        records tip-of-the-tree commit objects of branches copied
        from a remote repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
refs/replace/<literal>&lt;obj-sha1&gt;</literal>
</term>
<listitem>
<simpara>
        records the SHA-1 of the object that replaces <literal>&lt;obj-sha1&gt;</literal>.
        This is similar to info/grafts and is internally used and
        maintained by <citerefentry>
<refentrytitle>git-replace</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. Such refs can be exchanged
        between repositories while grafts are not.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
packed-refs
</term>
<listitem>
<simpara>
        records the same information as refs/heads/, refs/tags/,
        and friends record in a more efficient way.  See
        <citerefentry>
<refentrytitle>git-pack-refs</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
HEAD
</term>
<listitem>
<simpara>
        A symref (see glossary) to the <literal>refs/heads/</literal> namespace
        describing the currently active branch.  It does not mean
        much if the repository is not associated with any working tree
        (i.e. a <emphasis>bare</emphasis> repository), but a valid Git repository
        <emphasis role="strong">must</emphasis> have the HEAD file; some porcelains may use it to
        guess the designated "default" branch of the repository
        (usually <emphasis>master</emphasis>).  It is legal if the named branch
        <emphasis>name</emphasis> does not (yet) exist.  In some legacy setups, it is
        a symbolic link instead of a symref that points at the current
        branch.
</simpara>
<simpara>HEAD can also record a specific commit directly, instead of
being a symref to point at the current branch.  Such a state
is often called <emphasis>detached HEAD.</emphasis>  See <citerefentry>
<refentrytitle>git-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
for details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
branches
</term>
<listitem>
<simpara>
        A slightly deprecated way to store shorthands to be used
        to specify a URL to <emphasis>git fetch</emphasis>, <emphasis>git pull</emphasis> and <emphasis>git push</emphasis>.
        A file can be stored as <literal>branches/&lt;name&gt;</literal> and then
        <emphasis>name</emphasis> can be given to these commands in place of
        <emphasis>repository</emphasis> argument.  See the REMOTES section in
        <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.  This mechanism is legacy
        and not likely to be found in modern repositories.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
hooks
</term>
<listitem>
<simpara>
        Hooks are customization scripts used by various Git
        commands.  A handful of sample hooks are installed when
        <emphasis>git init</emphasis> is run, but all of them are disabled by
        default.  To enable, the <literal>.sample</literal> suffix has to be
        removed from the filename by renaming.
        Read <citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for more details about
        each hook.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
index
</term>
<listitem>
<simpara>
        The current index file for the repository.  It is
        usually not found in a bare repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
info
</term>
<listitem>
<simpara>
        Additional information about the repository is recorded
        in this directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
info/refs
</term>
<listitem>
<simpara>
        This file helps dumb transports discover what refs are
        available in this repository.  If the repository is
        published for dumb transports, this file should be
        regenerated by <emphasis>git update-server-info</emphasis> every time a tag
        or branch is created or modified.  This is normally done
        from the <literal>hooks/update</literal> hook, which is run by the
        <emphasis>git-receive-pack</emphasis> command when you <emphasis>git push</emphasis> into the
        repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
info/grafts
</term>
<listitem>
<simpara>
        This file records fake commit ancestry information, to
        pretend the set of parents a commit has is different
        from how the commit was actually created.  One record
        per line describes a commit and its fake parents by
        listing their 40-byte hexadecimal object names separated
        by a space and terminated by a newline.
</simpara>
<simpara>Note that the grafts mechanism is outdated and can lead to problems
transferring objects between repositories; see <citerefentry>
<refentrytitle>git-replace</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
for a more flexible and robust system to do the same thing.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
info/exclude
</term>
<listitem>
<simpara>
        This file, by convention among Porcelains, stores the
        exclude pattern list. <literal>.gitignore</literal> is the per-directory
        ignore file.  <emphasis>git status</emphasis>, <emphasis>git add</emphasis>, <emphasis>git rm</emphasis> and
        <emphasis>git clean</emphasis> look at it but the core Git commands do not look
        at it.  See also: <citerefentry>
<refentrytitle>gitignore</refentrytitle><manvolnum>5</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
info/sparse-checkout
</term>
<listitem>
<simpara>
        This file stores sparse checkout patterns.
        See also: <citerefentry>
<refentrytitle>git-read-tree</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remotes
</term>
<listitem>
<simpara>
        Stores shorthands for URL and default refnames for use
        when interacting with remote repositories via <emphasis>git fetch</emphasis>,
        <emphasis>git pull</emphasis> and <emphasis>git push</emphasis> commands.  See the REMOTES section
        in <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for details.  This mechanism is legacy
        and not likely to be found in modern repositories.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
logs
</term>
<listitem>
<simpara>
        Records of changes made to refs are stored in this
        directory.  See <citerefentry>
<refentrytitle>git-update-ref</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
        for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
logs/refs/heads/<literal>name</literal>
</term>
<listitem>
<simpara>
        Records all changes made to the branch tip named <literal>name</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
logs/refs/tags/<literal>name</literal>
</term>
<listitem>
<simpara>
        Records all changes made to the tag named <literal>name</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
shallow
</term>
<listitem>
<simpara>
        This is similar to <literal>info/grafts</literal> but is internally used
        and maintained by shallow clone mechanism.  See <literal>--depth</literal>
        option to <citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> and <citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
modules
</term>
<listitem>
<simpara>
        Contains the git-repositories of the submodules.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>git-init</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-clone</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-fetch</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-pack-refs</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-gc</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>git-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>gitglossary</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>,
<ulink url="user-manual.html">The Git User&#8217;s Manual</ulink></simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite.</simpara>
</refsect1>
</refentry>
