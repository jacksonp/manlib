<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-worktree</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-worktree</refname>
  <refpurpose>Manage multiple working trees</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git worktree add</emphasis> [-f] [--detach] [-b &lt;new-branch&gt;] &lt;path&gt; [&lt;branch&gt;]
<emphasis>git worktree prune</emphasis> [-n] [-v] [--expire &lt;expire&gt;]
<emphasis>git worktree list</emphasis> [--porcelain]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Manage multiple working trees attached to the same repository.</simpara>
<simpara>A git repository can support multiple working trees, allowing you to check
out more than one branch at a time.  With <literal>git worktree add</literal> a new working
tree is associated with the repository.  This new working tree is called a
"linked working tree" as opposed to the "main working tree" prepared by "git
init" or "git clone".  A repository has one main working tree (if it&#8217;s not a
bare repository) and zero or more linked working trees.</simpara>
<simpara>When you are done with a linked working tree you can simply delete it.
The working tree&#8217;s administrative files in the repository (see
"DETAILS" below) will eventually be removed automatically (see
<literal>gc.worktreePruneExpire</literal> in <citerefentry>
<refentrytitle>git-config</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>), or you can run
<literal>git worktree prune</literal> in the main or any linked working tree to
clean up any stale administrative files.</simpara>
<simpara>If you move a linked working tree to another file system, or
within a file system that does not support hard links, you need to run
at least one git command inside the linked working tree
(e.g. <literal>git status</literal>) in order to update its administrative files in the
repository so that they do not get automatically pruned.</simpara>
<simpara>If a linked working tree is stored on a portable device or network share
which is not always mounted, you can prevent its administrative files from
being pruned by creating a file named <emphasis>locked</emphasis> alongside the other
administrative files, optionally containing a plain text reason that
pruning should be suppressed. See section "DETAILS" for more information.</simpara>
</refsect1>
<refsect1 id="_commands">
<title>COMMANDS</title>
<variablelist>
<varlistentry>
<term>
add &lt;path&gt; [&lt;branch&gt;]
</term>
<listitem>
<simpara>
Create <literal>&lt;path&gt;</literal> and checkout <literal>&lt;branch&gt;</literal> into it. The new working directory
is linked to the current repository, sharing everything except working
directory specific files such as HEAD, index, etc.
</simpara>
<simpara>If <literal>&lt;branch&gt;</literal> is omitted and neither <literal>-b</literal> nor <literal>-B</literal> nor <literal>--detached</literal> used,
then, as a convenience, a new branch based at HEAD is created automatically,
as if <literal>-b $(basename &lt;path&gt;)</literal> was specified.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
prune
</term>
<listitem>
<simpara>
Prune working tree information in $GIT_DIR/worktrees.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
list
</term>
<listitem>
<simpara>
List details of each worktree.  The main worktree is listed first, followed by
each of the linked worktrees.  The output details include if the worktree is
bare, the revision currently checked out, and the branch currently checked out
(or <emphasis>detached HEAD</emphasis> if none).
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-f
</term>
<term>
--force
</term>
<listitem>
<simpara>
        By default, <literal>add</literal> refuses to create a new working tree when <literal>&lt;branch&gt;</literal>
        is already checked out by another working tree. This option overrides
        that safeguard.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-b &lt;new-branch&gt;
</term>
<term>
-B &lt;new-branch&gt;
</term>
<listitem>
<simpara>
        With <literal>add</literal>, create a new branch named <literal>&lt;new-branch&gt;</literal> starting at
        <literal>&lt;branch&gt;</literal>, and check out <literal>&lt;new-branch&gt;</literal> into the new working tree.
        If <literal>&lt;branch&gt;</literal> is omitted, it defaults to HEAD.
        By default, <literal>-b</literal> refuses to create a new branch if it already
        exists. <literal>-B</literal> overrides this safeguard, resetting <literal>&lt;new-branch&gt;</literal> to
        <literal>&lt;branch&gt;</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--detach
</term>
<listitem>
<simpara>
        With <literal>add</literal>, detach HEAD in the new working tree. See "DETACHED HEAD"
        in <citerefentry>
<refentrytitle>git-checkout</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--dry-run
</term>
<listitem>
<simpara>
        With <literal>prune</literal>, do not remove anything; just report what it would
        remove.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--porcelain
</term>
<listitem>
<simpara>
        With <literal>list</literal>, output in an easy-to-parse format for scripts.
        This format will remain stable across Git versions and regardless of user
        configuration.  See below for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        With <literal>prune</literal>, report all removals.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--expire &lt;time&gt;
</term>
<listitem>
<simpara>
        With <literal>prune</literal>, only expire unused working trees older than &lt;time&gt;.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_details">
<title>DETAILS</title>
<simpara>Each linked working tree has a private sub-directory in the repository&#8217;s
$GIT_DIR/worktrees directory.  The private sub-directory&#8217;s name is usually
the base name of the linked working tree&#8217;s path, possibly appended with a
number to make it unique.  For example, when <literal>$GIT_DIR=/path/main/.git</literal> the
command <literal>git worktree add /path/other/test-next next</literal> creates the linked
working tree in <literal>/path/other/test-next</literal> and also creates a
<literal>$GIT_DIR/worktrees/test-next</literal> directory (or <literal>$GIT_DIR/worktrees/test-next1</literal>
if <literal>test-next</literal> is already taken).</simpara>
<simpara>Within a linked working tree, $GIT_DIR is set to point to this private
directory (e.g. <literal>/path/main/.git/worktrees/test-next</literal> in the example) and
$GIT_COMMON_DIR is set to point back to the main working tree&#8217;s $GIT_DIR
(e.g. <literal>/path/main/.git</literal>). These settings are made in a <literal>.git</literal> file located at
the top directory of the linked working tree.</simpara>
<simpara>Path resolution via <literal>git rev-parse --git-path</literal> uses either
$GIT_DIR or $GIT_COMMON_DIR depending on the path. For example, in the
linked working tree <literal>git rev-parse --git-path HEAD</literal> returns
<literal>/path/main/.git/worktrees/test-next/HEAD</literal> (not
<literal>/path/other/test-next/.git/HEAD</literal> or <literal>/path/main/.git/HEAD</literal>) while <literal>git
rev-parse --git-path refs/heads/master</literal> uses
$GIT_COMMON_DIR and returns <literal>/path/main/.git/refs/heads/master</literal>,
since refs are shared across all working trees.</simpara>
<simpara>See <citerefentry>
<refentrytitle>gitrepository-layout</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for more information. The rule of
thumb is do not make any assumption about whether a path belongs to
$GIT_DIR or $GIT_COMMON_DIR when you need to directly access something
inside $GIT_DIR. Use <literal>git rev-parse --git-path</literal> to get the final path.</simpara>
<simpara>To prevent a $GIT_DIR/worktrees entry from being pruned (which
can be useful in some situations, such as when the
entry&#8217;s working tree is stored on a portable device), add a file named
<emphasis>locked</emphasis> to the entry&#8217;s directory. The file contains the reason in
plain text. For example, if a linked working tree&#8217;s <literal>.git</literal> file points
to <literal>/path/main/.git/worktrees/test-next</literal> then a file named
<literal>/path/main/.git/worktrees/test-next/locked</literal> will prevent the
<literal>test-next</literal> entry from being pruned.  See
<citerefentry>
<refentrytitle>gitrepository-layout</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for details.</simpara>
</refsect1>
<refsect1 id="_list_output_format">
<title>LIST OUTPUT FORMAT</title>
<simpara>The worktree list command has two output formats.  The default format shows the
details on a single line with columns.  For example:</simpara>
<literallayout class="monospaced">S git worktree list
/path/to/bare-source            (bare)
/path/to/linked-worktree        abcd1234 [master]
/path/to/other-linked-worktree  1234abc  (detached HEAD)</literallayout><simpara></simpara>
<refsect2 id="_porcelain_format">
<title>Porcelain Format</title>
<simpara>The porcelain format has a line per attribute.  Attributes are listed with a
label and value separated by a single space.  Boolean attributes (like <emphasis>bare</emphasis>
and <emphasis>detached</emphasis>) are listed as a label only, and are only present if and only
if the value is true.  An empty line indicates the end of a worktree.  For
example:</simpara>
<literallayout class="monospaced">S git worktree list --porcelain
worktree /path/to/bare-source
bare

worktree /path/to/linked-worktree
HEAD abcd1234abcd1234abcd1234abcd1234abcd1234
branch refs/heads/master

worktree /path/to/other-linked-worktree
HEAD 1234abc1234abc1234abc1234abc1234abc1234a
detached</literallayout><simpara></simpara>
</refsect2>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<simpara>You are in the middle of a refactoring session and your boss comes in and
demands that you fix something immediately. You might typically use
<citerefentry>
<refentrytitle>git-stash</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> to store your changes away temporarily, however, your
working tree is in such a state of disarray (with new, moved, and removed
files, and other bits and pieces strewn around) that you don&#8217;t want to risk
disturbing any of it. Instead, you create a temporary linked working tree to
make the emergency fix, remove it when done, and then resume your earlier
refactoring session.</simpara>
<literallayout class="monospaced">$ git worktree add -b emergency-fix ../temp master
$ pushd ../temp
# ... hack hack hack ...
$ git commit -a -m 'emergency fix for boss'
$ popd
$ rm -rf ../temp
$ git worktree prune</literallayout><simpara></simpara>
</refsect1>
<refsect1 id="_bugs">
<title>BUGS</title>
<simpara>Multiple checkout in general is still experimental, and the support
for submodules is incomplete. It is NOT recommended to make multiple
checkouts of a superproject.</simpara>
<simpara>git-worktree could provide more automation for tasks currently
performed manually, such as:</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>remove</literal> to remove a linked working tree and its administrative files (and
  warn if the working tree is dirty)
</simpara>
</listitem>
<listitem>
<simpara>
<literal>mv</literal> to move or rename a working tree and update its administrative files
</simpara>
</listitem>
<listitem>
<simpara>
<literal>lock</literal> to prevent automatic pruning of administrative files (for instance,
  for a working tree on a portable device)
</simpara>
</listitem>
</itemizedlist>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
