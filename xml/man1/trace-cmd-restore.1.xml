<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
<info>
    
</info>
<refmeta>
<refentrytitle>trace-cmd-restore</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source"> </refmiscinfo>
<refmiscinfo class="manual"> </refmiscinfo>
</refmeta>
<refnamediv>
    <refname>trace-cmd-restore</refname>
    <refpurpose>restore a failed trace record</refpurpose>
</refnamediv>
<refsynopsisdiv xml:id="_synopsis">
<simpara><emphasis role="strong">trace-cmd restore</emphasis> [<emphasis>OPTIONS</emphasis>] [<emphasis>command</emphasis>] cpu-file [cpu-file …]</simpara>
</refsynopsisdiv>
<refsect1 xml:id="_description">
<title>DESCRIPTION</title>
<simpara>The trace-cmd(1) restore command will restore a crashed trace-cmd-record(1)
file. If for some reason a trace-cmd record fails, it will leave a the
per-cpu data files and not create the final trace.dat file. The trace-cmd
restore will append the files to create a working trace.dat file that can
be read with trace-cmd-report(1).</simpara>
<simpara>When trace-cmd record runs, it spawns off a process per CPU and writes
to a per cpu file usually called <emphasis>trace.dat.cpuX</emphasis>, where X represents the
CPU number that it is tracing. If the -o option was used in the trace-cmd
record, then the CPU data files will have that name instead of the
<emphasis>trace.dat</emphasis> name. If a unexpected crash occurs before the tracing
is finished, then the per CPU files will still exist but there will
not be any trace.dat file to read from. trace-cmd restore will allow you
to create a trace.dat file with the existing data files.</simpara>
</refsect1>
<refsect1 xml:id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-c</emphasis>
</term>
<listitem>
<simpara>
    Create a partial trace.dat file from the machine, to be used with
    a full trace-cmd restore at another time. This option is useful for
    embedded devices. If a server contains the cpu files of a crashed
    trace-cmd record (or trace-cmd listen), trace-cmd restore can be
    executed on the embedded device with the -c option to get all the
    stored information of that embedded device. Then the file created
    could be copied to the server to run the trace-cmd restore there
    with the cpu files.
</simpara>
<literallayout class="monospaced">If *-o* is not specified, then the file created will be called
'trace-partial.dat'. This is because the file is not a full version
of something that trace-cmd-report(1) could use.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-t</emphasis> tracing_dir
</term>
<listitem>
<simpara>
    Used with <emphasis role="strong">-c</emphasis>, it overrides the location to read the events from.
    By default, tracing information is read from the debugfs/tracing
    directory. <emphasis role="strong">-t</emphasis> will use that location instead. This can be useful
    if the trace.dat file to create is from another machine.
    Just tar -cvf events.tar debugfs/tracing and copy and untar that
    file locally, and use that directory instead.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-k</emphasis> kallsyms
</term>
<listitem>
<simpara>
    Used with <emphasis role="strong">-c</emphasis>, it overrides where to read the kallsyms file from.
    By default, /proc/kallsyms is used. <emphasis role="strong">-k</emphasis> will override the file to
    read the kallsyms from. This can be useful if the trace.dat file
    to create is from another machine. Just copy the /proc/kallsyms
    file locally, and use <emphasis role="strong">-k</emphasis> to point to that file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-o</emphasis> output'
</term>
<listitem>
<simpara>
    By default, trace-cmd restore will create a <emphasis>trace.dat</emphasis> file
    (or <emphasis>trace-partial.dat</emphasis> if <emphasis role="strong">-c</emphasis> is specified). You can
    specify a different file to write to with the <emphasis role="strong">-o</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-i</emphasis> input
</term>
<listitem>
<simpara>
    By default, trace-cmd restore will read the information of the
    current system to create the initial data stored in the <emphasis>trace.dat</emphasis>
    file. If the crash was on another machine, then that machine should
    have the trace-cmd restore run with the <emphasis role="strong">-c</emphasis> option to create the
    trace.dat partial file. Then that file can be copied to the current
    machine where trace-cmd restore will use <emphasis role="strong">-i</emphasis> to load that file
    instead of reading from the current system.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 xml:id="_examples">
<title>EXAMPLES</title>
<simpara>If a crash happened on another box, you could run:</simpara>
<literallayout class="monospaced">$ trace-cmd restore -c -o box-partial.dat</literallayout>
<simpara>Then on the server that has the cpu files:</simpara>
<literallayout class="monospaced">$ trace-cmd restore -i box-partial.dat trace.dat.cpu0 trace.dat.cpu1</literallayout>
<simpara>This would create a trace.dat file for the embedded box.</simpara>
</refsect1>
<refsect1 xml:id="_see_also">
<title>SEE ALSO</title>
<simpara>trace-cmd(1), trace-cmd-record(1), trace-cmd-report(1), trace-cmd-start(1),
trace-cmd-stop(1), trace-cmd-extract(1), trace-cmd-reset(1), trace-cmd-split(1),
trace-cmd-list(1), trace-cmd-listen(1)</simpara>
</refsect1>
<refsect1 xml:id="_author">
<title>AUTHOR</title>
<simpara>Written by Steven Rostedt, &lt;<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="mailto:rostedt@goodmis.org">rostedt@goodmis.org</link>&gt;</simpara>
</refsect1>
<refsect1 xml:id="_resources">
<title>RESOURCES</title>
<simpara>git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/trace-cmd.git</simpara>
</refsect1>
<refsect1 xml:id="_copying">
<title>COPYING</title>
<simpara>Copyright (C) 2010 Red Hat, Inc. Free use of this software is granted under
the terms of the GNU Public License (GPL).</simpara>
</refsect1>
</refentry>