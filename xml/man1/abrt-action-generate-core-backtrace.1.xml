<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
<info>
    
</info>
<refmeta>
<refentrytitle>abrt-action-generate-core-backtrace</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source"> </refmiscinfo>
<refmiscinfo class="manual"> </refmiscinfo>
</refmeta>
<refnamediv>
    <refname>abrt-action-generate-core-backtrace</refname>
    <refpurpose>Generates coredump-level backtrace</refpurpose>
</refnamediv>
<refsynopsisdiv xml:id="_synopsis">
<simpara><emphasis>abrt-action-generate-core-backtrace</emphasis> [-v] [-r] [-d DIR]</simpara>
</refsynopsisdiv>
<refsect1 xml:id="_description">
<title>DESCRIPTION</title>
<simpara>This tool uses coredump from the file <emphasis>coredump</emphasis> and binary at the path stored
in file <emphasis>executable</emphasis> in the problem directory to generate coredump-level
backtrace.</simpara>
<simpara>Coredump-level backtrace resembles ordinary backtrace in that it contains
information about call frames present on the stack at the time of the crash.
However, it only contains information that can be obtained from the coredump
without debugging symbols available - mainly relative addresses of
the stored instruction pointers. Such backtrace can still be useful
for reporting and reproducing the bug and does not require debugging
information files to be installed.</simpara>
<simpara>The result is saved in the problem directory in a file named
<emphasis>core_backtrace</emphasis>.</simpara>
<refsect2 xml:id="_integration_with_libreport_events">
<title>Integration with libreport events</title>
<simpara><emphasis>abrt-action-generate-core-backtrace</emphasis> can be used as an analyzer for
application crashes which dump core.</simpara>
<simpara>Example usage in report_event.conf:</simpara>
<screen>EVENT=analyze analyzer=CCpp
        abrt-action-generate-core-backtrace</screen>
</refsect2>
</refsect1>
<refsect1 xml:id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-d DIR
</term>
<listitem>
<simpara>
   Path to problem directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-r
</term>
<listitem>
<simpara>
   Do not hash function fingerprints. Useful for debugging.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<listitem>
<simpara>
   Be more verbose. Can be given multiple times.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 xml:id="_authors">
<title>AUTHORS</title>
<itemizedlist>
<listitem>
<simpara>
ABRT team
</simpara>
</listitem>
</itemizedlist>
</refsect1>
</refentry>