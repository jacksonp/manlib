<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-shortlog</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-shortlog</refname>
  <refpurpose>Summarize 'git log' output</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout>git log --pretty=short | <emphasis>git shortlog</emphasis> [&lt;options&gt;]
<emphasis>git shortlog</emphasis> [&lt;options&gt;] [&lt;revision range&gt;] [[--] &lt;path&gt;&#8230;]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Summarizes <emphasis>git log</emphasis> output in a format suitable for inclusion
in release announcements. Each commit will be grouped by author and title.</simpara>
<simpara>Additionally, "[PATCH]" will be stripped from the commit description.</simpara>
<simpara>If no revisions are passed on the command line and either standard input
is not a terminal or there is no current branch, <emphasis>git shortlog</emphasis> will
output a summary of the log read from standard input, without
reference to the current repository.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-n
</term>
<term>
--numbered
</term>
<listitem>
<simpara>
        Sort output according to the number of commits per author instead
        of author alphabetic order.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s
</term>
<term>
--summary
</term>
<listitem>
<simpara>
        Suppress commit description and provide a commit count summary only.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-e
</term>
<term>
--email
</term>
<listitem>
<simpara>
        Show the email address of each author.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--format[=&lt;format&gt;]
</term>
<listitem>
<simpara>
        Instead of the commit subject, use some other information to
        describe each commit.  <emphasis>&lt;format&gt;</emphasis> can be any string accepted
        by the <literal>--format</literal> option of <emphasis>git log</emphasis>, such as <emphasis>* [%h] %s</emphasis>.
        (See the "PRETTY FORMATS" section of <citerefentry>
<refentrytitle>git-log</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>.)
</simpara>
<literallayout class="monospaced">Each pretty-printed commit will be rewrapped before it is shown.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
-w[&lt;width&gt;[,&lt;indent1&gt;[,&lt;indent2&gt;]]]
</term>
<listitem>
<simpara>
        Linewrap the output by wrapping each line at <literal>width</literal>.  The first
        line of each entry is indented by <literal>indent1</literal> spaces, and the second
        and subsequent lines are indented by <literal>indent2</literal> spaces. <literal>width</literal>,
        <literal>indent1</literal>, and <literal>indent2</literal> default to 76, 6 and 9 respectively.
</simpara>
<simpara>If width is <literal>0</literal> (zero) then indent the lines of the output without wrapping
them.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;revision range&gt;
</term>
<listitem>
<simpara>
        Show only commits in the specified revision range.  When no
        &lt;revision range&gt; is specified, it defaults to <literal>HEAD</literal> (i.e. the
        whole history leading to the current commit).  <literal>origin..HEAD</literal>
        specifies all the commits reachable from the current commit
        (i.e. <literal>HEAD</literal>), but not from <literal>origin</literal>. For a complete list of
        ways to spell &lt;revision range&gt;, see the "Specifying Ranges"
        section of <citerefentry>
<refentrytitle>gitrevisions</refentrytitle><manvolnum>7</manvolnum>
</citerefentry>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
[--] &lt;path&gt;&#8230;
</term>
<listitem>
<simpara>
        Consider only commits that are enough to explain how the files
        that match the specified paths came to be.
</simpara>
<simpara>Paths may need to be prefixed with "-- " to separate them from
options or the revision range, when confusion arises.</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_mapping_authors">
<title>MAPPING AUTHORS</title>
<simpara>The <literal>.mailmap</literal> feature is used to coalesce together commits by the same
person in the shortlog, where their name and/or email address was
spelled differently.</simpara>
<simpara>If the file <literal>.mailmap</literal> exists at the toplevel of the repository, or at
the location pointed to by the mailmap.file or mailmap.blob
configuration options, it
is used to map author and committer names and email addresses to
canonical real names and email addresses.</simpara>
<simpara>In the simple form, each line in the file consists of the canonical
real name of an author, whitespace, and an email address used in the
commit (enclosed by <emphasis>&lt;</emphasis> and <emphasis>&gt;</emphasis>) to map to the name. For example:</simpara>
<literallayout class="monospaced">Proper Name &lt;commit@email.xx&gt;</literallayout>
<simpara>The more complex forms are:</simpara>
<literallayout class="monospaced">&lt;proper@email.xx&gt; &lt;commit@email.xx&gt;</literallayout>
<simpara>which allows mailmap to replace only the email part of a commit, and:</simpara>
<literallayout class="monospaced">Proper Name &lt;proper@email.xx&gt; &lt;commit@email.xx&gt;</literallayout>
<simpara>which allows mailmap to replace both the name and the email of a
commit matching the specified commit email address, and:</simpara>
<literallayout class="monospaced">Proper Name &lt;proper@email.xx&gt; Commit Name &lt;commit@email.xx&gt;</literallayout>
<simpara>which allows mailmap to replace both the name and the email of a
commit matching both the specified commit name and email address.</simpara>
<simpara>Example 1: Your history contains commits by two authors, Jane
and Joe, whose names appear in the repository under several forms:</simpara>
<literallayout class="monospaced">Joe Developer &lt;joe@example.com&gt;
Joe R. Developer &lt;joe@example.com&gt;
Jane Doe &lt;jane@example.com&gt;
Jane Doe &lt;jane@laptop.(none)&gt;
Jane D. &lt;jane@desktop.(none)&gt;</literallayout><simpara></simpara>
<simpara>Now suppose that Joe wants his middle name initial used, and Jane
prefers her family name fully spelled out. A proper <literal>.mailmap</literal> file
would look like:</simpara>
<literallayout class="monospaced">Jane Doe         &lt;jane@desktop.(none)&gt;
Joe R. Developer &lt;joe@example.com&gt;</literallayout><simpara></simpara>
<simpara>Note how there is no need for an entry for <literal>&lt;jane@laptop.(none)&gt;</literal>, because the
real name of that author is already correct.</simpara>
<simpara>Example 2: Your repository contains commits from the following
authors:</simpara>
<literallayout class="monospaced">nick1 &lt;bugs@company.xx&gt;
nick2 &lt;bugs@company.xx&gt;
nick2 &lt;nick2@company.xx&gt;
santa &lt;me@company.xx&gt;
claus &lt;me@company.xx&gt;
CTO &lt;cto@coompany.xx&gt;</literallayout><simpara></simpara>
<simpara>Then you might want a <literal>.mailmap</literal> file that looks like:</simpara>
<literallayout class="monospaced">&lt;cto@company.xx&gt;                       &lt;cto@coompany.xx&gt;
Some Dude &lt;some@dude.xx&gt;         nick1 &lt;bugs@company.xx&gt;
Other Author &lt;other@author.xx&gt;   nick2 &lt;bugs@company.xx&gt;
Other Author &lt;other@author.xx&gt;         &lt;nick2@company.xx&gt;
Santa Claus &lt;santa.claus@northpole.xx&gt; &lt;me@company.xx&gt;</literallayout><simpara></simpara>
<simpara>Use hash <emphasis>#</emphasis> for comments that are either on their own line, or after
the email address.</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
