<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-gc</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-gc</refname>
  <refpurpose>Cleanup unnecessary files and optimize the local repository</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git gc</emphasis> [--aggressive] [--auto] [--quiet] [--prune=&lt;date&gt; | --no-prune] [--force]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Runs a number of housekeeping tasks within the current repository,
such as compressing file revisions (to reduce disk space and increase
performance) and removing unreachable objects which may have been
created from prior invocations of <emphasis>git add</emphasis>.</simpara>
<simpara>Users are encouraged to run this task on a regular basis within
each repository to maintain good disk space utilization and good
operating performance.</simpara>
<simpara>Some git commands may automatically run <emphasis>git gc</emphasis>; see the <literal>--auto</literal> flag
below for details. If you know what you&#8217;re doing and all you want is to
disable this behavior permanently without further considerations, just do:</simpara>
<literallayout class="monospaced">$ git config --global gc.auto 0</literallayout><simpara></simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--aggressive
</term>
<listitem>
<simpara>
        Usually <emphasis>git gc</emphasis> runs very quickly while providing good disk
        space utilization and performance.  This option will cause
        <emphasis>git gc</emphasis> to more aggressively optimize the repository at the expense
        of taking much more time.  The effects of this optimization are
        persistent, so this option only needs to be used occasionally; every
        few hundred changesets or so.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--auto
</term>
<listitem>
<simpara>
        With this option, <emphasis>git gc</emphasis> checks whether any housekeeping is
        required; if not, it exits without performing any work.
        Some git commands run <literal>git gc --auto</literal> after performing
        operations that could create many loose objects.
</simpara>
<simpara>Housekeeping is required if there are too many loose objects or
too many packs in the repository. If the number of loose objects
exceeds the value of the <literal>gc.auto</literal> configuration variable, then
all loose objects are combined into a single pack using
<literal>git repack -d -l</literal>.  Setting the value of <literal>gc.auto</literal> to 0
disables automatic packing of loose objects.</simpara>
<simpara>If the number of packs exceeds the value of <literal>gc.autoPackLimit</literal>,
then existing packs (except those marked with a <literal>.keep</literal> file)
are consolidated into a single pack by using the <literal>-A</literal> option of
<emphasis>git repack</emphasis>. Setting <literal>gc.autoPackLimit</literal> to 0 disables
automatic consolidation of packs.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--prune=&lt;date&gt;
</term>
<listitem>
<simpara>
        Prune loose objects older than date (default is 2 weeks ago,
        overridable by the config variable <literal>gc.pruneExpire</literal>).
        --prune=all prunes loose objects regardless of their age (do
        not use --prune=all unless you know exactly what you are doing.
        Unless the repository is quiescent, you will lose newly created
        objects that haven&#8217;t been anchored with the refs and end up
        corrupting your repository).  --prune is on by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-prune
</term>
<listitem>
<simpara>
        Do not prune any loose objects.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--quiet
</term>
<listitem>
<simpara>
        Suppress all progress reports.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--force
</term>
<listitem>
<simpara>
        Force <literal>git gc</literal> to run even if there may be another <literal>git gc</literal>
        instance running on this repository.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_configuration">
<title>Configuration</title>
<simpara>The optional configuration variable <emphasis>gc.reflogExpire</emphasis> can be
set to indicate how long historical entries within each branch&#8217;s
reflog should remain available in this repository.  The setting is
expressed as a length of time, for example <emphasis>90 days</emphasis> or <emphasis>3 months</emphasis>.
It defaults to <emphasis>90 days</emphasis>.</simpara>
<simpara>The optional configuration variable <emphasis>gc.reflogExpireUnreachable</emphasis>
can be set to indicate how long historical reflog entries which
are not part of the current branch should remain available in
this repository.  These types of entries are generally created as
a result of using <literal>git commit --amend</literal> or <literal>git rebase</literal> and are the
commits prior to the amend or rebase occurring.  Since these changes
are not part of the current project most users will want to expire
them sooner.  This option defaults to <emphasis>30 days</emphasis>.</simpara>
<simpara>The above two configuration variables can be given to a pattern.  For
example, this sets non-default expiry values only to remote-tracking
branches:</simpara>
<literallayout class="monospaced">[gc "refs/remotes/*"]
        reflogExpire = never
        reflogExpireUnreachable = 3 days</literallayout><simpara></simpara>
<simpara>The optional configuration variable <emphasis>gc.rerereResolved</emphasis> indicates
how long records of conflicted merge you resolved earlier are
kept.  This defaults to 60 days.</simpara>
<simpara>The optional configuration variable <emphasis>gc.rerereUnresolved</emphasis> indicates
how long records of conflicted merge you have not resolved are
kept.  This defaults to 15 days.</simpara>
<simpara>The optional configuration variable <emphasis>gc.packRefs</emphasis> determines if
<emphasis>git gc</emphasis> runs <emphasis>git pack-refs</emphasis>. This can be set to "notbare" to enable
it within all non-bare repos or it can be set to a boolean value.
This defaults to true.</simpara>
<simpara>The optional configuration variable <emphasis>gc.aggressiveWindow</emphasis> controls how
much time is spent optimizing the delta compression of the objects in
the repository when the --aggressive option is specified.  The larger
the value, the more time is spent optimizing the delta compression.  See
the documentation for the --window' option in <citerefentry>
<refentrytitle>git-repack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> for
more details.  This defaults to 250.</simpara>
<simpara>Similarly, the optional configuration variable <emphasis>gc.aggressiveDepth</emphasis>
controls --depth option in <citerefentry>
<refentrytitle>git-repack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>. This defaults to 250.</simpara>
<simpara>The optional configuration variable <emphasis>gc.pruneExpire</emphasis> controls how old
the unreferenced loose objects have to be before they are pruned.  The
default is "2 weeks ago".</simpara>
</refsect1>
<refsect1 id="_notes">
<title>Notes</title>
<simpara><emphasis>git gc</emphasis> tries very hard to be safe about the garbage it collects. In
particular, it will keep not only objects referenced by your current set
of branches and tags, but also objects referenced by the index,
remote-tracking branches, refs saved by <emphasis>git filter-branch</emphasis> in
refs/original/, or reflogs (which may reference commits in branches
that were later amended or rewound).</simpara>
<simpara>If you are expecting some objects to be collected and they aren&#8217;t, check
all of those locations and decide whether it makes sense in your case to
remove those references.</simpara>
</refsect1>
<refsect1 id="_hooks">
<title>HOOKS</title>
<simpara>The <emphasis>git gc --auto</emphasis> command will run the <emphasis>pre-auto-gc</emphasis> hook.  See
<citerefentry>
<refentrytitle>githooks</refentrytitle><manvolnum>5</manvolnum>
</citerefentry> for more information.</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>git-prune</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
<citerefentry>
<refentrytitle>git-reflog</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
<citerefentry>
<refentrytitle>git-repack</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
<citerefentry>
<refentrytitle>git-rerere</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
