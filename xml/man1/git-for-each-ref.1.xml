<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-for-each-ref</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-for-each-ref</refname>
  <refpurpose>Output information on each ref</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<literallayout><emphasis>git for-each-ref</emphasis> [--count=&lt;count&gt;] [--shell|--perl|--python|--tcl]
                   [(--sort=&lt;key&gt;)&#8230;] [--format=&lt;format&gt;] [&lt;pattern&gt;&#8230;]
                   [--points-at &lt;object&gt;] [(--merged | --no-merged) [&lt;object&gt;]]
                   [--contains [&lt;object&gt;]]</literallayout>
<simpara></simpara>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>Iterate over all refs that match <literal>&lt;pattern&gt;</literal> and show them
according to the given <literal>&lt;format&gt;</literal>, after sorting them according
to the given set of <literal>&lt;key&gt;</literal>.  If <literal>&lt;count&gt;</literal> is given, stop after
showing that many refs.  The interpolated values in <literal>&lt;format&gt;</literal>
can optionally be quoted as string literals in the specified
host language allowing their direct evaluation in that language.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
&lt;count&gt;
</term>
<listitem>
<simpara>
        By default the command shows all refs that match
        <literal>&lt;pattern&gt;</literal>.  This option makes it stop after showing
        that many refs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;key&gt;
</term>
<listitem>
<simpara>
        A field name to sort on.  Prefix <literal>-</literal> to sort in
        descending order of the value.  When unspecified,
        <literal>refname</literal> is used.  You may use the --sort=&lt;key&gt; option
        multiple times, in which case the last key becomes the primary
        key.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;format&gt;
</term>
<listitem>
<simpara>
        A string that interpolates <literal>%(fieldname)</literal> from the
        object pointed at by a ref being shown.  If <literal>fieldname</literal>
        is prefixed with an asterisk (<literal>*</literal>) and the ref points
        at a tag object, the value for the field in the object
        tag refers is used.  When unspecified, defaults to
        <literal>%(objectname) SPC %(objecttype) TAB %(refname)</literal>.
        It also interpolates <literal>%%</literal> to <literal>%</literal>, and <literal>%xx</literal> where <literal>xx</literal>
        are hex digits interpolates to character with hex code
        <literal>xx</literal>; for example <literal>%00</literal> interpolates to <literal>\0</literal> (NUL),
        <literal>%09</literal> to <literal>\t</literal> (TAB) and <literal>%0a</literal> to <literal>\n</literal> (LF).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;pattern&gt;&#8230;
</term>
<listitem>
<simpara>
        If one or more patterns are given, only refs are shown that
        match against at least one pattern, either using fnmatch(3) or
        literally, in the latter case matching completely or from the
        beginning up to a slash.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--shell
</term>
<term>
--perl
</term>
<term>
--python
</term>
<term>
--tcl
</term>
<listitem>
<simpara>
        If given, strings that substitute <literal>%(fieldname)</literal>
        placeholders are quoted as string literals suitable for
        the specified host language.  This is meant to produce
        a scriptlet that can directly be `eval`ed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--points-at &lt;object&gt;
</term>
<listitem>
<simpara>
        Only list refs which points at the given object.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--merged [&lt;object&gt;]
</term>
<listitem>
<simpara>
        Only list refs whose tips are reachable from the
        specified commit (HEAD if not specified).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-merged [&lt;object&gt;]
</term>
<listitem>
<simpara>
        Only list refs whose tips are not reachable from the
        specified commit (HEAD if not specified).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--contains [&lt;object&gt;]
</term>
<listitem>
<simpara>
        Only list refs which contain the specified commit (HEAD if not
        specified).
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_field_names">
<title>FIELD NAMES</title>
<simpara>Various values from structured fields in referenced objects can
be used to interpolate into the resulting output, or as sort
keys.</simpara>
<simpara>For all objects, the following names can be used:</simpara>
<variablelist>
<varlistentry>
<term>
refname
</term>
<listitem>
<simpara>
        The name of the ref (the part after $GIT_DIR/).
        For a non-ambiguous short name of the ref append <literal>:short</literal>.
        The option core.warnAmbiguousRefs is used to select the strict
        abbreviation mode. If <literal>strip=&lt;N&gt;</literal> is appended, strips <literal>&lt;N&gt;</literal>
        slash-separated path components from the front of the refname
        (e.g., <literal>%(refname:strip=2)</literal> turns <literal>refs/tags/foo</literal> into <literal>foo</literal>.
        <literal>&lt;N&gt;</literal> must be a positive integer.  If a displayed ref has fewer
        components than <literal>&lt;N&gt;</literal>, the command aborts with an error.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
objecttype
</term>
<listitem>
<simpara>
        The type of the object (<literal>blob</literal>, <literal>tree</literal>, <literal>commit</literal>, <literal>tag</literal>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
objectsize
</term>
<listitem>
<simpara>
        The size of the object (the same as <emphasis>git cat-file -s</emphasis> reports).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
objectname
</term>
<listitem>
<simpara>
        The object name (aka SHA-1).
        For a non-ambiguous abbreviation of the object name append <literal>:short</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
upstream
</term>
<listitem>
<simpara>
        The name of a local ref which can be considered &#8220;upstream&#8221;
        from the displayed ref. Respects <literal>:short</literal> in the same way as
        <literal>refname</literal> above.  Additionally respects <literal>:track</literal> to show
        "[ahead N, behind M]" and <literal>:trackshort</literal> to show the terse
        version: "&gt;" (ahead), "&lt;" (behind), "&lt;&gt;" (ahead and behind),
        or "=" (in sync).  Has no effect if the ref does not have
        tracking information associated with it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
push
</term>
<listitem>
<simpara>
        The name of a local ref which represents the <literal>@{push}</literal> location
        for the displayed ref. Respects <literal>:short</literal>, <literal>:track</literal>, and
        <literal>:trackshort</literal> options as <literal>upstream</literal> does. Produces an empty
        string if no <literal>@{push}</literal> ref is configured.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
HEAD
</term>
<listitem>
<simpara>
        <emphasis>*</emphasis> if HEAD matches current ref (the checked out branch), ' '
        otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
color
</term>
<listitem>
<simpara>
        Change output color.  Followed by <literal>:&lt;colorname&gt;</literal>, where names
        are described in <literal>color.branch.*</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
align
</term>
<listitem>
<simpara>
        Left-, middle-, or right-align the content between
        %(align:&#8230;) and %(end). The "align:" is followed by
        <literal>width=&lt;width&gt;</literal> and <literal>position=&lt;position&gt;</literal> in any order
        separated by a comma, where the <literal>&lt;position&gt;</literal> is either left,
        right or middle, default being left and <literal>&lt;width&gt;</literal> is the total
        length of the content with alignment. For brevity, the
        "width=" and/or "position=" prefixes may be omitted, and bare
        &lt;width&gt; and &lt;position&gt; used instead.  For instance,
        <literal>%(align:&lt;width&gt;,&lt;position&gt;)</literal>. If the contents length is more
        than the width then no alignment is performed. If used with
        <emphasis>--quote</emphasis> everything in between %(align:&#8230;) and %(end) is
        quoted, but if nested then only the topmost level performs
        quoting.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>In addition to the above, for commit and tag objects, the header
field names (<literal>tree</literal>, <literal>parent</literal>, <literal>object</literal>, <literal>type</literal>, and <literal>tag</literal>) can
be used to specify the value in the header field.</simpara>
<simpara>For commit and tag objects, the special <literal>creatordate</literal> and <literal>creator</literal>
fields will correspond to the appropriate date or name-email-date tuple
from the <literal>committer</literal> or <literal>tagger</literal> fields depending on the object type.
These are intended for working on a mix of annotated and lightweight tags.</simpara>
<simpara>Fields that have name-email-date tuple as its value (<literal>author</literal>,
<literal>committer</literal>, and <literal>tagger</literal>) can be suffixed with <literal>name</literal>, <literal>email</literal>,
and <literal>date</literal> to extract the named component.</simpara>
<simpara>The complete message in a commit and tag object is <literal>contents</literal>.
Its first line is <literal>contents:subject</literal>, where subject is the concatenation
of all lines of the commit message up to the first blank line.  The next
line is <emphasis>contents:body</emphasis>, where body is all of the lines after the first
blank line.  The optional GPG signature is <literal>contents:signature</literal>.  The
first <literal>N</literal> lines of the message is obtained using <literal>contents:lines=N</literal>.</simpara>
<simpara>For sorting purposes, fields with numeric values sort in numeric order
(<literal>objectsize</literal>, <literal>authordate</literal>, <literal>committerdate</literal>, <literal>creatordate</literal>, <literal>taggerdate</literal>).
All other fields are used to sort in their byte-value order.</simpara>
<simpara>There is also an option to sort by versions, this can be done by using
the fieldname <literal>version:refname</literal> or its alias <literal>v:refname</literal>.</simpara>
<simpara>In any case, a field name that refers to a field inapplicable to
the object referred by the ref does not cause an error.  It
returns an empty string instead.</simpara>
<simpara>As a special case for the date-type fields, you may specify a format for
the date by adding <literal>:</literal> followed by date format name (see the
values the <literal>--date</literal> option to <citerefentry>
<refentrytitle>git-rev-list</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> takes).</simpara>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<simpara>An example directly producing formatted text.  Show the most recent
3 tagged commits:</simpara>
<literallayout class="monospaced">#!/bin/sh

git for-each-ref --count=3 --sort='-*authordate' \
--format='From: %(*authorname) %(*authoremail)
Subject: %(*subject)
Date: %(*authordate)
Ref: %(*refname)

%(*body)
' 'refs/tags'</literallayout><simpara></simpara>
<simpara>A simple example showing the use of shell eval on the output,
demonstrating the use of --shell.  List the prefixes of all heads:</simpara>
<literallayout class="monospaced">#!/bin/sh

git for-each-ref --shell --format="ref=%(refname)" refs/heads | \
while read entry
do
        eval "$entry"
        echo `dirname $ref`
done</literallayout><simpara></simpara>
<simpara>A bit more elaborate report on tags, demonstrating that the format
may be an entire script:</simpara>
<literallayout class="monospaced">#!/bin/sh

fmt='
        r=%(refname)
        t=%(*objecttype)
        T=${r#refs/tags/}

        o=%(*objectname)
        n=%(*authorname)
        e=%(*authoremail)
        s=%(*subject)
        d=%(*authordate)
        b=%(*body)

        kind=Tag
        if test "z$t" = z
        then
                # could be a lightweight tag
                t=%(objecttype)
                kind="Lightweight tag"
                o=%(objectname)
                n=%(authorname)
                e=%(authoremail)
                s=%(subject)
                d=%(authordate)
                b=%(body)
        fi
        echo "$kind $T points at a $t object $o"
        if test "z$t" = zcommit
        then
                echo "The commit was authored by $n $e
at $d, and titled

    $s

Its message reads as:
"
                echo "$b" | sed -e "s/^/    /"
                echo
        fi
'

eval=`git for-each-ref --shell --format="$fmt" \
        --sort='*objecttype' \
        --sort=-taggerdate \
        refs/tags`
eval "$eval"</literallayout><simpara></simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>git-show-ref</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
