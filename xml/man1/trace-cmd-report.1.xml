<!-- Converted by db4-upgrade version 1.1 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
<info>
    
</info>
<refmeta>
<refentrytitle>trace-cmd-report</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source"> </refmiscinfo>
<refmiscinfo class="manual"> </refmiscinfo>
</refmeta>
<refnamediv>
    <refname>trace-cmd-report</refname>
    <refpurpose>show in ASCII a trace created by trace-cmd record</refpurpose>
</refnamediv>
<refsynopsisdiv xml:id="_synopsis">
<simpara><emphasis role="strong">trace-cmd report</emphasis> [<emphasis>OPTIONS</emphasis>] [<emphasis>input-file</emphasis>]</simpara>
</refsynopsisdiv>
<refsect1 xml:id="_description">
<title>DESCRIPTION</title>
<simpara>The trace-cmd(1) report command will output a human readable report of a trace
created by trace-cmd record.</simpara>
</refsect1>
<refsect1 xml:id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-i</emphasis> <emphasis>input-file</emphasis>
</term>
<listitem>
<simpara>
    By default, trace-cmd report will read the file <emphasis>trace.dat</emphasis>. But the <emphasis role="strong">-i</emphasis>
    option open up the given <emphasis>input-file</emphasis> instead. Note, the input file may
    also be specified as the last item on the command line.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-e</emphasis>
</term>
<listitem>
<simpara>
    This outputs the endianess of the file. trace-cmd report is smart enough
    to be able to read big endian files on little endian machines, and vise
    versa.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-f</emphasis>
</term>
<listitem>
<simpara>
    This outputs the list of functions that have been recorded in the file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-P</emphasis>
</term>
<listitem>
<simpara>
    This outputs the list of "trace_printk()" data. The raw trace data points
    to static pointers in the kernel. This must be stored in the trace.dat
    file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-E</emphasis>
</term>
<listitem>
<simpara>
    This lists the possible events in the file (but this list is not
    necessarily the list of events in the file).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">--events</emphasis>
</term>
<listitem>
<simpara>
    This will list the event formats that are stored in the trace.dat file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">--event</emphasis> regex
</term>
<listitem>
<simpara>
    This will print events that match the given regex. If a colon is specified,
    then the characters before the colon will be used to match the system and
    the characters after the colon will match the event.
</simpara>
<literallayout class="monospaced">trace-cmd report --event sys:read</literallayout>
<literallayout class="monospaced">The above will only match events where the system name contains "sys"
and the event name contains "read".</literallayout>
<literallayout class="monospaced">trace-cmd report --event read</literallayout>
<literallayout class="monospaced">The above will match all events that contain "read" in its name. Also it
may list all events of a system that contains "read" as well.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">--check-events</emphasis>
</term>
<listitem>
<simpara>
    This will parse the event format strings that are stored in the trace.dat
    file and return whether the formats can be parsed correctly. It will load
    plugins unless <emphasis role="strong">-N</emphasis> is specified.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-t</emphasis>
</term>
<listitem>
<simpara>
    Print the full timestamp. The timestamps in the data file are usually
    recorded to the nanosecond. But the default display of the timestamp
    is only to the microsecond. To see the full timestamp, add the <emphasis role="strong">-t</emphasis> option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-F</emphasis> <emphasis>filter</emphasis>
</term>
<listitem>
<simpara>
    Add a filter to limit what events are displayed. The format of the filter
    is:
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>    &lt;events&gt; ':' &lt;filter&gt;
    &lt;events&gt; = SYSTEM'/'EVENT  | SYSTEM | EVENT | &lt;events&gt; ',' &lt;events&gt;
    &lt;filter&gt; = EVENT_FIELD &lt;op&gt; &lt;value&gt; | &lt;filter&gt; '&amp;&amp;' &lt;filter&gt; |
               &lt;filter&gt; '||' &lt;filter&gt; | '(' &lt;filter&gt; ')' | '!' &lt;filter&gt;
    &lt;op&gt; = '==' | '!=' | '&gt;=' | '&lt;=' | '&gt;' | '&lt;' | '&amp;' | '|' | '^' |
           '+' | '-' | '*' | '/' | '%'
    &lt;value&gt; = NUM | STRING | EVENT_FIELD</screen>
<literallayout class="monospaced">SYSTEM is the name of the system to filter on. If the EVENT is left out,
then it applies to all events under the SYSTEM. If only one string is used
without the '/' to deliminate between SYSTEM and EVENT, then the filter
will be applied to all systems and events that match the given string.</literallayout>
<literallayout class="monospaced">Whitespace is ignored, such that "sched:next_pid==123" is equivalent to
"sched : next_pid == 123".</literallayout>
<literallayout class="monospaced">STRING is defined with single or double quotes (single quote must end with
single quote, and double with double). Whitespace within quotes are not
ignored.</literallayout>
<literallayout class="monospaced">The representation of a SYSTEM or EVENT may also be a regular expression
as defined by 'regcomp(3)'.</literallayout>
<literallayout class="monospaced">The EVENT_FIELD is the name of the field of an event that is being
filtered. If the event does not contain the EVENT_FIELD, that part of the
equation will be considered false.</literallayout>
<screen>    -F 'sched : bogus == 1 || common_pid == 2'</screen>
<literallayout class="monospaced">The "bogus == 1" will always evaluate to FALSE because no event has a
field called "bogus", but the "common_pid == 2" will still be evaluated
since all events have the field "common_pid". Any "sched" event that was
traced by the process with the PID of 2 will be shown.</literallayout>
<literallayout class="monospaced">Note, the EVENT_FIELD is the field name as shown by an events format
(as displayed with *--events*), and not what is found in the output.
If the output shows "ID:foo" but the field that "foo" belongs to was
called "name" in the event format, then "name" must be used in the filter.
The same is true about values. If the value that is displayed is converted
by to a string symbol, the filter checks the original value and not the
value displayed. For example, to filter on all tasks that were in the
running state at a context switch:</literallayout>
<screen>    -F 'sched/sched_switch : prev_state==0'</screen>
<literallayout class="monospaced">Although the output displays 'R', having 'prev_stat=="R"' will not work.</literallayout>
<literallayout class="monospaced">Note: You can also specify 'COMM' as an EVENT_FIELD. This will use the
task name (or comm) of the record to compare. For example, to filter out
all of the "trace-cmd" tasks:</literallayout>
<screen>    -F '.*:COMM != "trace-cmd"'</screen>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-v</emphasis>
</term>
<listitem>
<simpara>
    This causes the following filters of <emphasis role="strong">-F</emphasis> to filter out the matching
    events.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>    -v -F 'sched/sched_switch : prev_state == 0'</screen>
<literallayout class="monospaced">Will not display any sched_switch events that have a prev_state of 0.
Removing the *-v* will only print out those events.</literallayout>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-T</emphasis>
</term>
<listitem>
<simpara>
    Test the filters of -F. After processing a filter string, the
    resulting filter will be displayed for each event. This is useful
    for using a filter for more than one event where a field may not
    exist in all events. Also it can be used to make sure there are no
    misspelled event field names, as they will simply be ignored.
    <emphasis role="strong">-T</emphasis> is ignored if <emphasis role="strong">-F</emphasis> is not specified.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-V</emphasis>
</term>
<listitem>
<simpara>
    Show the plugins that are loaded.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-L</emphasis>
</term>
<listitem>
<simpara>
    This will not load system wide plugins. It loads "local only". That is
    what it finds in the ~/.trace-cmd/plugins directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-N</emphasis>
</term>
<listitem>
<simpara>
    This will not load any plugins.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-n</emphasis> <emphasis>event-re</emphasis>
</term>
<listitem>
<simpara>
    This will cause all events that match the option to ignore any registered
    handler (by the plugins) to print the event. The normal event will be printed
    instead.  The <emphasis>event-re</emphasis> is a regular expression as defined by <emphasis>regcomp(3)</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-R</emphasis>
</term>
<listitem>
<simpara>
    This will show the events in "raw" format. That is, it will ignore the event’s
    print formatting and just print the contents of each field.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-r</emphasis> <emphasis>event-re</emphasis>
</term>
<listitem>
<simpara>
    This will cause all events that match the option to print its raw fields.
    The <emphasis>event-re</emphasis> is a regular expression as defined by <emphasis>regcomp(3)</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-l</emphasis>
</term>
<listitem>
<simpara>
    This adds a "latency output" format. Information about interrupts being
    disabled, soft irq being disabled, the "need_resched" flag being set,
    preempt count, and big kernel lock are all being recorded with every
    event. But the default display does not show this information. This option
    will set display this information with 6 characters. When one of the
    fields is zero or N/A a '.\' is shown.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>      &lt;idle&gt;-0       0d.h1. 106467.859747: function:             ktime_get &lt;-- tick_check_idle</screen>
<literallayout class="monospaced">The 0d.h1. denotes this information. The first character is never a '.'
and represents what CPU the trace was recorded on (CPU 0). The 'd' denotes
that interrupts were disabled. The 'h' means that this was called inside
an interrupt handler. The '1' is the preemption disabled (preempt_count)
was set to one.  The two '.'s are "need_resched" flag and kernel lock
counter.  If the "need_resched" flag is set, then that character would be a
'N'.</literallayout>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-w</emphasis>
</term>
<listitem>
<simpara>
    If both the <emphasis>sched_switch</emphasis> and <emphasis>sched_wakeup</emphasis> events are enabled, then
    this option will report the latency between the time the task was first
    woken, and the time it was scheduled in.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-q</emphasis>
</term>
<listitem>
<simpara>
    Quiet non critical warnings.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-O</emphasis>
</term>
<listitem>
<simpara>
    Pass options to the trace-cmd plugins that are loaded.
</simpara>
<literallayout class="monospaced">-O plugin:var=value</literallayout>
<literallayout class="monospaced">The 'plugin:' and '=value' are optional. Value may be left off for options
that are boolean. If the 'plugin:' is left off, then any variable that matches
in all plugins will be set.</literallayout>
<literallayout class="monospaced">Example:  -O fgraph:tailprint</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">--stat</emphasis>
</term>
<listitem>
<simpara>
    If the trace.dat file recorded the final stats (outputed at the end of record)
    the <emphasis role="strong">--stat</emphasis> option can be used to retrieve them.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 xml:id="_examples">
<title>EXAMPLES</title>
<simpara>Using a trace.dat file that was created with:</simpara>
<screen>    # trace-cmd record -p function -e all sleep 5</screen>
<simpara>The default report shows:</simpara>
<screen> # trace-cmd report
       trace-cmd-16129 [002] 158126.498411: function: __mutex_unlock_slowpath &lt;-- mutex_unlock
       trace-cmd-16131 [000] 158126.498411: kmem_cache_alloc: call_site=811223c5 ptr=0xffff88003ecf2b40 bytes_req=272 bytes_alloc=320 gfp_flags=GFP_KERNEL|GFP_ZERO
       trace-cmd-16130 [003] 158126.498411: function:             do_splice_to &lt;-- sys_splice
           sleep-16133 [001] 158126.498412: function: inotify_inode_queue_event &lt;-- vfs_write
       trace-cmd-16129 [002] 158126.498420: lock_release: 0xffff88003f1fa4f8 &amp;sb-&gt;s_type-&gt;i_mutex_key
       trace-cmd-16131 [000] 158126.498421: function: security_file_alloc &lt;-- get_empty_filp
           sleep-16133 [001] 158126.498422: function: __fsnotify_parent &lt;-- vfs_write
       trace-cmd-16130 [003] 158126.498422: function: rw_verify_area &lt;-- do_splice_to
       trace-cmd-16131 [000] 158126.498424: function: cap_file_alloc_security &lt;-- security_file_alloc
       trace-cmd-16129 [002] 158126.498425: function: syscall_trace_leave &lt;-- int_check_syscall_exit_work
           sleep-16133 [001] 158126.498426: function: inotify_dentry_parent_queue_event &lt;-- vfs_write
       trace-cmd-16130 [003] 158126.498426: function: security_file_permission &lt;-- rw_verify_area
       trace-cmd-16129 [002] 158126.498428: function: audit_syscall_exit &lt;-- syscall_trace_leave
[...]</screen>
<simpara>To see everything but the function traces:</simpara>
<screen> # trace-cmd report -v -F 'function'
       trace-cmd-16131 [000] 158126.498411: kmem_cache_alloc: call_site=811223c5 ptr=0xffff88003ecf2b40 bytes_req=272 bytes_alloc=320 gfp_flags=GFP_KERNEL|GFP_ZERO
       trace-cmd-16129 [002] 158126.498420: lock_release: 0xffff88003f1fa4f8 &amp;sb-&gt;s_type-&gt;i_mutex_key
       trace-cmd-16130 [003] 158126.498436: lock_acquire: 0xffffffff8166bf78 read all_cpu_access_lock
       trace-cmd-16131 [000] 158126.498438: lock_acquire: 0xffff88003df5b520 read &amp;fs-&gt;lock
       trace-cmd-16129 [002] 158126.498446: kfree: call_site=810a7abb ptr=0x0
       trace-cmd-16130 [003] 158126.498448: lock_acquire: 0xffff880002250a80 &amp;per_cpu(cpu_access_lock, cpu)
       trace-cmd-16129 [002] 158126.498450: sys_exit_splice:      0xfffffff5
       trace-cmd-16131 [000] 158126.498454: lock_release: 0xffff88003df5b520 &amp;fs-&gt;lock
           sleep-16133 [001] 158126.498456: kfree: call_site=810a7abb ptr=0x0
           sleep-16133 [001] 158126.498460: sys_exit_write:       0x1
       trace-cmd-16130 [003] 158126.498462: kmalloc: call_site=810bf95b ptr=0xffff88003dedc040 bytes_req=24 bytes_alloc=32 gfp_flags=GFP_KERNEL|GFP_ZERO</screen>
<simpara>To see only the kmalloc calls that were greater than 1000 bytes:</simpara>
<screen> #trace-cmd report -F 'kmalloc: bytes_req &gt; 1000'
          &lt;idle&gt;-0     [000] 158128.126641: kmalloc: call_site=81330635 ptr=0xffff88003c2fd000 bytes_req=2096 bytes_alloc=4096 gfp_flags=GFP_ATOMIC</screen>
<simpara>To see wakeups and sched switches that left the previous task in the running
state:</simpara>
<screen> # trace-cmd report -F 'sched: prev_state == 0 || (success == 1)'
       trace-cmd-16132 [002] 158126.499951: sched_wakeup: comm=trace-cmd pid=16129 prio=120 success=1 target_cpu=002
       trace-cmd-16132 [002] 158126.500401: sched_switch: prev_comm=trace-cmd prev_pid=16132 prev_prio=120 prev_state=R ==&gt; next_comm=trace-cmd next_pid=16129 next_prio=120
          &lt;idle&gt;-0     [003] 158126.500585: sched_wakeup: comm=trace-cmd pid=16130 prio=120 success=1 target_cpu=003
          &lt;idle&gt;-0     [003] 158126.501241: sched_switch: prev_comm=swapper prev_pid=0 prev_prio=120 prev_state=R ==&gt; next_comm=trace-cmd next_pid=16130 next_prio=120
       trace-cmd-16132 [000] 158126.502475: sched_wakeup: comm=trace-cmd pid=16131 prio=120 success=1 target_cpu=000
       trace-cmd-16131 [002] 158126.506516: sched_wakeup: comm=trace-cmd pid=16129 prio=120 success=1 target_cpu=002
          &lt;idle&gt;-0     [003] 158126.550110: sched_switch: prev_comm=swapper prev_pid=0 prev_prio=120 prev_state=R ==&gt; next_comm=trace-cmd next_pid=16130 next_prio=120
       trace-cmd-16131 [003] 158126.570243: sched_wakeup: comm=trace-cmd pid=16129 prio=120 success=1 target_cpu=003
       trace-cmd-16130 [002] 158126.618202: sched_switch: prev_comm=trace-cmd prev_pid=16130 prev_prio=120 prev_state=R ==&gt; next_comm=yum-updatesd next_pid=3088 next_prio=1 20
       trace-cmd-16129 [003] 158126.622379: sched_wakeup: comm=trace-cmd pid=16131 prio=120 success=1 target_cpu=003
       trace-cmd-16129 [000] 158126.649287: sched_wakeup: comm=trace-cmd pid=16131 prio=120 success=1 target_cpu=000</screen>
<simpara>The above needs a little explanation. The filter specifies the "sched"
subsystem, which includes both sched_switch and sched_wakeup events. Any event
that does not have the format field "prev_state" or "success", will evaluate
those expressions as FALSE, and will not produce a match. Using "||" will have
the "prev_state" test happen for the "sched_switch" event and the "success"
test happen for the "sched_wakeup" event.</simpara>
<screen>  # trace-cmd report -w -F 'sched_switch, sched_wakeup.*'
[...]
       trace-cmd-16130 [003] 158131.580616: sched_wakeup: comm=trace-cmd pid=16131 prio=120 success=1 target_cpu=003
       trace-cmd-16129 [000] 158131.581502: sched_switch: prev_comm=trace-cmd prev_pid=16129 prev_prio=120 prev_state=S ==&gt; next_comm=trace-cmd next_pid=16131 next_prio=120 Latency: 885.901 usecs
       trace-cmd-16131 [000] 158131.582414: sched_wakeup: comm=trace-cmd pid=16129 prio=120 success=1 target_cpu=000
       trace-cmd-16132 [001] 158131.583219: sched_switch: prev_comm=trace-cmd prev_pid=16132 prev_prio=120 prev_state=S ==&gt; next_comm=trace-cmd next_pid=16129 next_prio=120 Latency: 804.809 usecs
           sleep-16133 [002] 158131.584121: sched_wakeup: comm=trace-cmd pid=16120 prio=120 success=1 target_cpu=002
       trace-cmd-16129 [001] 158131.584128: sched_wakeup: comm=trace-cmd pid=16132 prio=120 success=1 target_cpu=001
           sleep-16133 [002] 158131.584275: sched_switch: prev_comm=sleep prev_pid=16133 prev_prio=120 prev_state=R ==&gt; next_comm=trace-cmd next_pid=16120 next_prio=120 Latency: 153.915 usecs
       trace-cmd-16130 [003] 158131.585284: sched_switch: prev_comm=trace-cmd prev_pid=16130 prev_prio=120 prev_state=S ==&gt; next_comm=trace-cmd next_pid=16132 next_prio=120 Latency: 1155.677 usecs

Average wakeup latency: 26626.656 usecs</screen>
<simpara>The above trace produces the wakeup latencies of the tasks. The "sched_switch"
event reports each individual latency after writing the event information.
At the end of the report, the average wakeup latency is reported.</simpara>
<screen>  # trace-cmd report -w -F 'sched_switch, sched_wakeup.*: prio &lt; 100 || next_prio &lt; 100'
          &lt;idle&gt;-0     [003] 158131.516753: sched_wakeup: comm=ksoftirqd/3 pid=13 prio=49 success=1 target_cpu=003
          &lt;idle&gt;-0     [003] 158131.516855: sched_switch: prev_comm=swapper prev_pid=0 prev_prio=120 prev_state=R ==&gt; next_comm=ksoftirqd/3 next_pid=13 next_prio=49 Latency: 101.244 usecs
          &lt;idle&gt;-0     [003] 158131.533781: sched_wakeup: comm=ksoftirqd/3 pid=13 prio=49 success=1 target_cpu=003
          &lt;idle&gt;-0     [003] 158131.533897: sched_switch: prev_comm=swapper prev_pid=0 prev_prio=120 prev_state=R ==&gt; next_comm=ksoftirqd/3 next_pid=13 next_prio=49 Latency: 115.608 usecs
          &lt;idle&gt;-0     [003] 158131.569730: sched_wakeup: comm=ksoftirqd/3 pid=13 prio=49 success=1 target_cpu=003
          &lt;idle&gt;-0     [003] 158131.569851: sched_switch: prev_comm=swapper prev_pid=0 prev_prio=120 prev_state=R ==&gt; next_comm=ksoftirqd/3 next_pid=13 next_prio=49 Latency: 121.024 usecs

Average wakeup latency: 110.021 usecs</screen>
<simpara>The above version will only show the wakeups and context switches of Real Time
tasks. The <emphasis>prio</emphasis> used inside the kernel starts at 0 for highest priority.
That is <emphasis>prio</emphasis> 0 is equivalent to user space real time priority 99, and
priority 98 is equivalent to user space real time priority 1.
Prios less than 100 represent Real Time tasks.</simpara>
</refsect1>
<refsect1 xml:id="_see_also">
<title>SEE ALSO</title>
<simpara>trace-cmd(1), trace-cmd-record(1), trace-cmd-start(1), trace-cmd-stop(1),
trace-cmd-extract(1), trace-cmd-reset(1), trace-cmd-split(1),
trace-cmd-list(1), trace-cmd-listen(1)</simpara>
</refsect1>
<refsect1 xml:id="_author">
<title>AUTHOR</title>
<simpara>Written by Steven Rostedt, &lt;<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="mailto:rostedt@goodmis.org">rostedt@goodmis.org</link>&gt;</simpara>
</refsect1>
<refsect1 xml:id="_resources">
<title>RESOURCES</title>
<simpara>git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/trace-cmd.git</simpara>
</refsect1>
<refsect1 xml:id="_copying">
<title>COPYING</title>
<simpara>Copyright (C) 2010 Red Hat, Inc. Free use of this software is granted under
the terms of the GNU Public License (GPL).</simpara>
</refsect1>
</refentry>