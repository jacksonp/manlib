<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-http-backend</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-http-backend</refname>
  <refpurpose>Server side implementation of Git over HTTP</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<blockquote>
<literallayout><emphasis>git http-backend</emphasis></literallayout>
</blockquote>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>A simple CGI program to serve the contents of a Git repository to Git
clients accessing the repository over http:// and https:// protocols.
The program supports clients fetching using both the smart HTTP protocol
and the backwards-compatible dumb HTTP protocol, as well as clients
pushing using the smart HTTP protocol.</simpara>
<simpara>It verifies that the directory has the magic file
"git-daemon-export-ok", and it will refuse to export any Git directory
that hasn&#8217;t explicitly been marked for export this way (unless the
GIT_HTTP_EXPORT_ALL environmental variable is set).</simpara>
<simpara>By default, only the <literal>upload-pack</literal> service is enabled, which serves
<emphasis>git fetch-pack</emphasis> and <emphasis>git ls-remote</emphasis> clients, which are invoked from
<emphasis>git fetch</emphasis>, <emphasis>git pull</emphasis>, and <emphasis>git clone</emphasis>.  If the client is authenticated,
the <literal>receive-pack</literal> service is enabled, which serves <emphasis>git send-pack</emphasis>
clients, which is invoked from <emphasis>git push</emphasis>.</simpara>
</refsect1>
<refsect1 id="_services">
<title>SERVICES</title>
<simpara>These services can be enabled/disabled using the per-repository
configuration file:</simpara>
<variablelist>
<varlistentry>
<term>
http.getanyfile
</term>
<listitem>
<simpara>
        This serves Git clients older than version 1.6.6 that are unable to use the
        upload pack service.  When enabled, clients are able to read
        any file within the repository, including objects that are
        no longer reachable from a branch but are still present.
        It is enabled by default, but a repository can disable it
        by setting this configuration item to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.uploadpack
</term>
<listitem>
<simpara>
        This serves <emphasis>git fetch-pack</emphasis> and <emphasis>git ls-remote</emphasis> clients.
        It is enabled by default, but a repository can disable it
        by setting this configuration item to <literal>false</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
http.receivepack
</term>
<listitem>
<simpara>
        This serves <emphasis>git send-pack</emphasis> clients, allowing push.  It is
        disabled by default for anonymous users, and enabled by
        default for users authenticated by the web server.  It can be
        disabled by setting this item to <literal>false</literal>, or enabled for all
        users, including anonymous users, by setting it to <literal>true</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_url_translation">
<title>URL TRANSLATION</title>
<simpara>To determine the location of the repository on disk, <emphasis>git http-backend</emphasis>
concatenates the environment variables PATH_INFO, which is set
automatically by the web server, and GIT_PROJECT_ROOT, which must be set
manually in the web server configuration.  If GIT_PROJECT_ROOT is not
set, <emphasis>git http-backend</emphasis> reads PATH_TRANSLATED, which is also set
automatically by the web server.</simpara>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<simpara>All of the following examples map <literal>http://$hostname/git/foo/bar.git</literal>
to <literal>/var/www/git/foo/bar.git</literal>.</simpara>
<variablelist>
<varlistentry>
<term>
Apache 2.x
</term>
<listitem>
<simpara>
        Ensure mod_cgi, mod_alias, and mod_env are enabled, set
        GIT_PROJECT_ROOT (or DocumentRoot) appropriately, and
        create a ScriptAlias to the CGI:
</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;SetEnv GIT_PROJECT_ROOT /var/www/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/&#10;.ft&#10;
</literallayout>
<simpara>To enable anonymous read access but authenticated write access,
require authorization for both the initial ref advertisement (which we
detect as a push via the service parameter in the query string), and the
receive-pack invocation itself:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;RewriteCond %{QUERY_STRING} service=git-receive-pack [OR]
RewriteCond %{REQUEST_URI} /git-receive-pack$
RewriteRule ^/git/ - [E=AUTHREQUIRED:yes]

&lt;LocationMatch "^/git/"&gt;
        Order Deny,Allow
        Deny from env=AUTHREQUIRED

        AuthType Basic
        AuthName "Git Access"
        Require group committers
        Satisfy Any
        ...
&lt;/LocationMatch&gt;&#10;.ft&#10;
</literallayout>
<simpara>If you do not have <literal>mod_rewrite</literal> available to match against the query
string, it is sufficient to just protect <literal>git-receive-pack</literal> itself,
like:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;&lt;LocationMatch "^/git/.*/git-receive-pack$"&gt;
        AuthType Basic
        AuthName "Git Access"
        Require group committers
        ...
&lt;/LocationMatch&gt;&#10;.ft&#10;
</literallayout>
<simpara>In this mode, the server will not request authentication until the
client actually starts the object negotiation phase of the push, rather
than during the initial contact.  For this reason, you must also enable
the <literal>http.receivepack</literal> config option in any repositories that should
accept a push. The default behavior, if <literal>http.receivepack</literal> is not set,
is to reject any pushes by unauthenticated users; the initial request
will therefore report <literal>403 Forbidden</literal> to the client, without even giving
an opportunity for authentication.</simpara>
<simpara>To require authentication for both reads and writes, use a Location
directive around the repository, or one of its parent directories:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;&lt;Location /git/private&gt;
        AuthType Basic
        AuthName "Private Git Access"
        Require group committers
        ...
&lt;/Location&gt;&#10;.ft&#10;
</literallayout>
<simpara>To serve gitweb at the same url, use a ScriptAliasMatch to only
those URLs that <emphasis>git http-backend</emphasis> can handle, and forward the
rest to gitweb:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;ScriptAliasMatch \
        "(?x)^/git/(.*/(HEAD | \
                        info/refs | \
                        objects/(info/[^/]+ | \
                                 [0-9a-f]{2}/[0-9a-f]{38} | \
                                 pack/pack-[0-9a-f]{40}\.(pack|idx)) | \
                        git-(upload|receive)-pack))$" \
        /usr/libexec/git-core/git-http-backend/$1

ScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/&#10;.ft&#10;
</literallayout>
<simpara>To serve multiple repositories from different <citerefentry>
<refentrytitle>gitnamespaces</refentrytitle><manvolnum>7</manvolnum>
</citerefentry> in a
single repository:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;SetEnvIf Request_URI "^/git/([^/]*)" GIT_NAMESPACE=$1
ScriptAliasMatch ^/git/[^/]*(.*) /usr/libexec/git-core/git-http-backend/storage.git$1&#10;.ft&#10;
</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
Accelerated static Apache 2.x
</term>
<listitem>
<simpara>
        Similar to the above, but Apache can be used to return static
        files that are stored on disk.  On many systems this may
        be more efficient as Apache can ask the kernel to copy the
        file contents from the file system directly to the network:
</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;SetEnv GIT_PROJECT_ROOT /var/www/git

AliasMatch ^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          /var/www/git/$1
AliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /var/www/git/$1
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/&#10;.ft&#10;
</literallayout>
<simpara>This can be combined with the gitweb configuration:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;SetEnv GIT_PROJECT_ROOT /var/www/git

AliasMatch ^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          /var/www/git/$1
AliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /var/www/git/$1
ScriptAliasMatch \
        "(?x)^/git/(.*/(HEAD | \
                        info/refs | \
                        objects/info/[^/]+ | \
                        git-(upload|receive)-pack))$" \
        /usr/libexec/git-core/git-http-backend/$1
ScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/&#10;.ft&#10;
</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
Lighttpd
</term>
<listitem>
<simpara>
        Ensure that <literal>mod_cgi</literal>, <literal>mod_alias</literal>, <literal>mod_auth</literal>, <literal>mod_setenv</literal> are
        loaded, then set <literal>GIT_PROJECT_ROOT</literal> appropriately and redirect
        all requests to the CGI:
</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;alias.url += ( "/git" =&gt; "/usr/lib/git-core/git-http-backend" )
$HTTP["url"] =~ "^/git" {
        cgi.assign = ("" =&gt; "")
        setenv.add-environment = (
                "GIT_PROJECT_ROOT" =&gt; "/var/www/git",
                "GIT_HTTP_EXPORT_ALL" =&gt; ""
        )
}&#10;.ft&#10;
</literallayout>
<simpara>To enable anonymous read access but authenticated write access:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;$HTTP["querystring"] =~ "service=git-receive-pack" {
        include "git-auth.conf"
}
$HTTP["url"] =~ "^/git/.*/git-receive-pack$" {
        include "git-auth.conf"
}&#10;.ft&#10;
</literallayout>
<simpara>where <literal>git-auth.conf</literal> looks something like:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;auth.require = (
        "/" =&gt; (
                "method" =&gt; "basic",
                "realm" =&gt; "Git Access",
                "require" =&gt; "valid-user"
               )
)
# ...and set up auth.backend here&#10;.ft&#10;
</literallayout>
<simpara>To require authentication for both reads and writes:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;$HTTP["url"] =~ "^/git/private" {
        include "git-auth.conf"
}&#10;.ft&#10;
</literallayout>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_environment">
<title>ENVIRONMENT</title>
<simpara><emphasis>git http-backend</emphasis> relies upon the CGI environment variables set
by the invoking web server, including:</simpara>
<itemizedlist>
<listitem>
<simpara>
PATH_INFO (if GIT_PROJECT_ROOT is set, otherwise PATH_TRANSLATED)
</simpara>
</listitem>
<listitem>
<simpara>
REMOTE_USER
</simpara>
</listitem>
<listitem>
<simpara>
REMOTE_ADDR
</simpara>
</listitem>
<listitem>
<simpara>
CONTENT_TYPE
</simpara>
</listitem>
<listitem>
<simpara>
QUERY_STRING
</simpara>
</listitem>
<listitem>
<simpara>
REQUEST_METHOD
</simpara>
</listitem>
</itemizedlist>
<simpara>The GIT_HTTP_EXPORT_ALL environmental variable may be passed to
<emphasis>git-http-backend</emphasis> to bypass the check for the "git-daemon-export-ok"
file in each repository before allowing export of that repository.</simpara>
<simpara>The backend process sets GIT_COMMITTER_NAME to <emphasis>$REMOTE_USER</emphasis> and
GIT_COMMITTER_EMAIL to <emphasis>${REMOTE_USER}@http.${REMOTE_ADDR}</emphasis>,
ensuring that any reflogs created by <emphasis>git-receive-pack</emphasis> contain some
identifying information of the remote user who performed the push.</simpara>
<simpara>All CGI environment variables are available to each of the hooks
invoked by the <emphasis>git-receive-pack</emphasis>.</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
