<!-- Converted by db4-upgrade version 1.1 -->
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="varnish-vsl-query-expressions">
  <title>Varnish VSL Query Expressions</title>
  <section xml:id="overview">
    <title>OVERVIEW</title>
    <para>
      The Varnish VSL Query Expressions extracts transactions from the
      Varnish shared memory log, and perform queries on the transactions
      before reporting matches.
    </para>
    <para>
      A transaction is a set of log lines that belongs together, e.g. a
      client request or a backend request. The API monitors the log, and
      collects all log records that make up a transaction before
      reporting on that transaction. Transactions can also be grouped,
      meaning backend transactions are reported together with the client
      transaction that initiated it.
    </para>
    <para>
      A query is run on a group of transactions. A query expression is
      true if there is a log record within the group that satisfies the
      condition. It is false only if none of the log records satisfies
      the condition. Query expressions can be combined using boolean
      functions.
    </para>
  </section>
  <section xml:id="grouping">
    <title>GROUPING</title>
    <para>
      When grouping transactions, there is a hierarchy structure showing
      which transaction initiated what. The level increases by one by an
      'initiated by' relation, so for example a backend transaction will
      have one higher level than the client transaction that initiated
      it on a cache miss. Request restart transactions does not have
      it's level increased. This is to help predicting the level for a
      given transaction.
    </para>
    <para>
      Levels start counting at 1, except when using raw where it will
      always be 0.
    </para>
    <para>
      The grouping modes are:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Session
        </para>
        <para>
          All transactions initiated by a client connection are reported
          together. All log data is buffered until the client connection
          is closed, which can cause session grouping mode to
          potentially consume a lot of memory.
        </para>
      </listitem>
      <listitem>
        <para>
          Request
        </para>
        <para>
          Transactions are grouped by request, where the set will
          include the request itself as well as any backend requests or
          ESI-subrequests. Session data is not reported. This is the
          default.
        </para>
      </listitem>
      <listitem>
        <para>
          VXID
        </para>
        <para>
          Transactions are not grouped, so each VXID is reported in it's
          entirety. Sessions, requests, ESI-requests and backend
          requests are all reported individually. Non-transactional data
          is not reported (VXID == 0).
        </para>
      </listitem>
      <listitem>
        <para>
          Raw
        </para>
        <para>
          Every log record will make up a transaction of it's own. All
          data, including non-transactional data will be reported.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Example transaction hierarchy :
    </para>
    <programlisting>
Lvl 1: Client request (cache miss)
  Lvl 2: Backend request
  Lvl 2: ESI subrequest (cache miss)
    Lvl 3: Backend request
    Lvl 3: Backend request (VCL restart)
    Lvl 3: ESI subrequest (cache miss)
      Lvl 4: Backend request
  Lvl 2: ESI subrequest (cache hit)
</programlisting>
  </section>
  <section xml:id="query-language">
    <title>QUERY LANGUAGE</title>
    <para>
      A query expression consists of record selection criteria, and
      optionally an operator and a value to match against the selected
      records. :
    </para>
    <programlisting>
&lt;record selection criteria&gt; &lt;operator&gt; &lt;operand&gt;
</programlisting>
    <section xml:id="record-selection-criteria">
      <title>Record selection criteria</title>
      <para>
        The record selection criteria determines what kind records from
        the transaction group the expression applies to. Syntax: :
      </para>
      <programlisting>
{level}taglist:record-prefix[field]
</programlisting>
      <para>
        Taglist is mandatory, the other components are optional.
      </para>
      <para>
        The level limits the expression to a transaction at that level.
        If left unspecified, the expression is applied to transactions
        at all levels. Level is a positive integer or zero. If level is
        followed by a '+' character, it expresses greater than or equal.
        If level is followed by a '-', it expresses less than or equal.
      </para>
      <para>
        The taglist is a comma-separated list of VSL record tags that
        this expression should be checked against. Each list element can
        be a tag name or a tag glob. Globs allow a '<emphasis>' either
        in the beginning of the name or at the end, and will select all
        tags that match either the prefix or subscript. A single
        '</emphasis>' will select all tags.
      </para>
      <para>
        The record prefix will further limit the matches to those
        records that has this prefix as it's first part of the record
        content followed by a colon. The part of the log record matched
        against will then be limited to what follows the prefix and
        colon. This is useful when matching against specific HTTP
        headers. The record prefix matching is done case insensitive.
      </para>
      <para>
        The field will, if present, treat the log record as a white
        space separated list of fields, and only the nth part of the
        record will be matched against. Fields start counting at 1.
      </para>
      <para>
        An expression using only a record selection criteria will be
        true if there is any record in the transaction group that is
        selected by the criteria.
      </para>
    </section>
    <section xml:id="operators">
      <title>Operators</title>
      <para>
        The following matching operators are available:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            == != &lt; &lt;= &gt; &gt;=
          </para>
          <para>
            Numerical comparison. The record contents will be converted
            to either an integer or a float before comparison, depending
            on the type of the operand.
          </para>
        </listitem>
        <listitem>
          <para>
            eq ne
          </para>
          <para>
            String comparison. 'eq' tests string equality, 'ne' tests
            for not equality.
          </para>
        </listitem>
        <listitem>
          <para>
            ~ !~
          </para>
          <para>
            Regular expression matching. '~' is a positive match, '!~'
            is a non-match.
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="operand">
      <title>Operand</title>
      <para>
        The operand is the value the selected records will be matched
        against.
      </para>
      <para>
        An operand can be quoted or unquoted. Quotes can be either
        single or double quotes, and for quoted operands a backslash can
        be used to escape the quotes.
      </para>
      <para>
        Unquoted operands can only consist of the following characters:
        :
      </para>
      <programlisting>
a-z A-Z 0-9 + - _ . *
</programlisting>
      <para>
        The following types of operands are available:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Integer
          </para>
          <para>
            A number without any fractional part, valid for the
            numerical comparison operators. The integer type is used
            when the operand does not contain any period (.) characters.
          </para>
        </listitem>
        <listitem>
          <para>
            Float
          </para>
          <para>
            A number with a fractional part, valid for the numerical
            comparison operators. The float type is used when the
            operand does contain a period (.) character.
          </para>
        </listitem>
        <listitem>
          <para>
            String
          </para>
          <para>
            A sequence of characters, valid for the string equality
            operators.
          </para>
        </listitem>
        <listitem>
          <para>
            Regular expression
          </para>
          <para>
            A PCRE regular expression. Valid for the regular expression
            operators.
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="boolean-functions">
      <title>Boolean functions</title>
      <para>
        Query expressions can be linked together using boolean
        functions. The following are available, in decreasing
        precedence:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            not &lt;expr&gt;
          </para>
          <para>
            Inverts the result of &lt;expr&gt;
          </para>
        </listitem>
        <listitem>
          <para>
            &lt;expr1&gt; and &lt;expr2&gt;
          </para>
          <para>
            True only if both expr1 and expr2 are true
          </para>
        </listitem>
        <listitem>
          <para>
            &lt;expr1&gt; or &lt;expr2&gt;
          </para>
          <para>
            True if either of expr1 or expr2 is true
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Expressions can be grouped using parenthesis.
      </para>
    </section>
  </section>
  <section xml:id="query-expression-examples">
    <title>QUERY EXPRESSION EXAMPLES</title>
    <itemizedlist>
      <listitem>
        <para>
          Transaction group contains a request URL that equals to
          "/foo" :
        </para>
        <programlisting>
ReqURL eq "/foo"
</programlisting>
      </listitem>
      <listitem>
        <para>
          Transaction group contains a request cookie header :
        </para>
        <programlisting>
ReqHeader:cookie
</programlisting>
      </listitem>
      <listitem>
        <para>
          Transaction group doesn't contain a request cookie header :
        </para>
        <programlisting>
not ReqHeader:cookie
</programlisting>
      </listitem>
      <listitem>
        <para>
          Transaction group contains a request user-agent header that
          contains "iPod" and the request delivery time
          exceeds 1 second :
        </para>
        <programlisting>
ReqHeader:user-agent ~ "iPod" and ReqEnd[5] &gt; 1.
</programlisting>
      </listitem>
      <listitem>
        <para>
          Transaction group contains a backend response status larger
          than or equal to 500 :
        </para>
        <programlisting>
BerespStatus &gt;= 500
</programlisting>
      </listitem>
      <listitem>
        <para>
          Transaction group contains a request response status of 304,
          but where the request did not contain an if-modified-since
          header :
        </para>
        <programlisting>
ReqStatus == 304 and not ReqHeader:if-modified-since
</programlisting>
      </listitem>
      <listitem>
        <para>
          Transactions that have had backend failures or long delivery
          time on their ESI subrequests. (Assumes request grouping
          mode). :
        </para>
        <programlisting>
BerespStatus &gt;= 500 or {2+}ReqEnd[5] &gt; 1.
</programlisting>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="history">
    <title>HISTORY</title>
    <para>
      This document was written by Martin Blix Grydeland.
    </para>
  </section>
</section>