<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>git-check-mailmap</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">Git</refmiscinfo>
<refmiscinfo class="manual">Git Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>git-check-mailmap</refname>
  <refpurpose>Show canonical names and email addresses of contacts</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<blockquote>
<literallayout><emphasis>git check-mailmap</emphasis> [options] &lt;contact&gt;&#8230;</literallayout>
</blockquote>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>For each &#8220;Name &lt;user@host&gt;&#8221; or &#8220;&lt;user@host&gt;&#8221; from the command-line
or standard input (when using <literal>--stdin</literal>), look up the person&#8217;s canonical name
and email address (see "Mapping Authors" below). If found, print them;
otherwise print the input as-is.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--stdin
</term>
<listitem>
<simpara>
        Read contacts, one per line, from the standard input after exhausting
        contacts provided on the command-line.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_output">
<title>OUTPUT</title>
<simpara>For each contact, a single line is output, terminated by a newline.  If the
name is provided or known to the <emphasis>mailmap</emphasis>, &#8220;Name &lt;user@host&gt;&#8221; is
printed; otherwise only &#8220;&lt;user@host&gt;&#8221; is printed.</simpara>
</refsect1>
<refsect1 id="_mapping_authors">
<title>MAPPING AUTHORS</title>
<simpara>If the file <literal>.mailmap</literal> exists at the toplevel of the repository, or at
the location pointed to by the mailmap.file or mailmap.blob
configuration options, it
is used to map author and committer names and email addresses to
canonical real names and email addresses.</simpara>
<simpara>In the simple form, each line in the file consists of the canonical
real name of an author, whitespace, and an email address used in the
commit (enclosed by <emphasis>&lt;</emphasis> and <emphasis>&gt;</emphasis>) to map to the name. For example:</simpara>
<literallayout class="monospaced">Proper Name &lt;commit@email.xx&gt;</literallayout>
<simpara>The more complex forms are:</simpara>
<literallayout class="monospaced">&lt;proper@email.xx&gt; &lt;commit@email.xx&gt;</literallayout>
<simpara>which allows mailmap to replace only the email part of a commit, and:</simpara>
<literallayout class="monospaced">Proper Name &lt;proper@email.xx&gt; &lt;commit@email.xx&gt;</literallayout>
<simpara>which allows mailmap to replace both the name and the email of a
commit matching the specified commit email address, and:</simpara>
<literallayout class="monospaced">Proper Name &lt;proper@email.xx&gt; Commit Name &lt;commit@email.xx&gt;</literallayout>
<simpara>which allows mailmap to replace both the name and the email of a
commit matching both the specified commit name and email address.</simpara>
<simpara>Example 1: Your history contains commits by two authors, Jane
and Joe, whose names appear in the repository under several forms:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;Joe Developer &lt;joe@example.com&gt;
Joe R. Developer &lt;joe@example.com&gt;
Jane Doe &lt;jane@example.com&gt;
Jane Doe &lt;jane@laptop.(none)&gt;
Jane D. &lt;jane@desktop.(none)&gt;&#10;.ft&#10;
</literallayout>
<simpara>Now suppose that Joe wants his middle name initial used, and Jane
prefers her family name fully spelled out. A proper <literal>.mailmap</literal> file
would look like:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;Jane Doe         &lt;jane@desktop.(none)&gt;
Joe R. Developer &lt;joe@example.com&gt;&#10;.ft&#10;
</literallayout>
<simpara>Note how there is no need for an entry for <literal>&lt;jane@laptop.(none)&gt;</literal>, because the
real name of that author is already correct.</simpara>
<simpara>Example 2: Your repository contains commits from the following
authors:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;nick1 &lt;bugs@company.xx&gt;
nick2 &lt;bugs@company.xx&gt;
nick2 &lt;nick2@company.xx&gt;
santa &lt;me@company.xx&gt;
claus &lt;me@company.xx&gt;
CTO &lt;cto@coompany.xx&gt;&#10;.ft&#10;
</literallayout>
<simpara>Then you might want a <literal>.mailmap</literal> file that looks like:</simpara>
<literallayout class="monospaced">
&#10;.ft C&#10;&lt;cto@company.xx&gt;                       &lt;cto@coompany.xx&gt;
Some Dude &lt;some@dude.xx&gt;         nick1 &lt;bugs@company.xx&gt;
Other Author &lt;other@author.xx&gt;   nick2 &lt;bugs@company.xx&gt;
Other Author &lt;other@author.xx&gt;         &lt;nick2@company.xx&gt;
Santa Claus &lt;santa.claus@northpole.xx&gt; &lt;me@company.xx&gt;&#10;.ft&#10;
</literallayout>
<simpara>Use hash <emphasis>#</emphasis> for comments that are either on their own line, or after
the email address.</simpara>
</refsect1>
<refsect1 id="_git">
<title>GIT</title>
<simpara>Part of the <citerefentry>
<refentrytitle>git</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> suite</simpara>
</refsect1>
</refentry>
